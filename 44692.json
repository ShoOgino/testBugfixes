{"path":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","commits":[{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071baff2e8ccdf4709b106e0c0f720868fd7b444","date":1463622773,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n            .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","date":1475846642,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n            .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n            .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n            .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a5a00236471b1e5f3c75017adb632328e120c3","date":1483544009,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n            .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n            .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bd3ba64594a889f0e0224b3a1627b038cced5cf","date":1483845464,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61ee8f1fa567e6cea780b707334c8b330b66662e","date":1522686751,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    Lang.register(streamFactory);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    streamFactory\n        // streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n            // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n            // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593","date":1523389558,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    Lang.register(streamFactory);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(),\n            Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0213a8f84d8fe5dd24ff0672285e325b96169cb3","date":1582738593,"type":3,"author":"Eric Pugh","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These\n     * defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          @SuppressWarnings(\"resource\")\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class.getName()));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          @SuppressWarnings(\"resource\")\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class.getName()));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n    // This pulls all the overrides and additions from the config\n    StreamHandler.addExpressiblePlugins(streamFactory, core);\n\n    // Check deprecated approach.\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      log.warn(\"solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.\");\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings) {\n        String key = functionMapping.getKey();\n        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap(\"class\", functionMapping.getValue()));\n\n        if (pluginInfo.pkgName == null) {\n          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),\n              Expressible.class);\n          streamFactory.withFunctionName(key, clazz);\n        } else {\n          @SuppressWarnings(\"resource\")\n          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class.getName()));\n          streamFactory.withFunctionName(key, () -> holder.getClazz());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"0213a8f84d8fe5dd24ff0672285e325b96169cb3":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"01624b85de12fb02335810bdf325124e59040772":["5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["79728e71d79579147b18f43e27a36e34be4986e2","1eb10453c4217aa50392c51e3e89deb8b779bd51"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"ba055e19afc289adcb5bedaf68513793a7254012":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02a5a00236471b1e5f3c75017adb632328e120c3"],"1eb10453c4217aa50392c51e3e89deb8b779bd51":["79728e71d79579147b18f43e27a36e34be4986e2","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"60c716cf818aff6857d8490cd0fb8b5aa432408f":["2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["0213a8f84d8fe5dd24ff0672285e325b96169cb3"],"02a5a00236471b1e5f3c75017adb632328e120c3":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["79728e71d79579147b18f43e27a36e34be4986e2"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["491c9672ec42582fe43960452dbd37f1c80fe0f0","5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"79728e71d79579147b18f43e27a36e34be4986e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["01624b85de12fb02335810bdf325124e59040772"],"5bd3ba64594a889f0e0224b3a1627b038cced5cf":["02a5a00236471b1e5f3c75017adb632328e120c3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["ba055e19afc289adcb5bedaf68513793a7254012"],"2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593":["61ee8f1fa567e6cea780b707334c8b330b66662e"],"61ee8f1fa567e6cea780b707334c8b330b66662e":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["02a5a00236471b1e5f3c75017adb632328e120c3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0213a8f84d8fe5dd24ff0672285e325b96169cb3":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"01624b85de12fb02335810bdf325124e59040772":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"ba055e19afc289adcb5bedaf68513793a7254012":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","79728e71d79579147b18f43e27a36e34be4986e2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"60c716cf818aff6857d8490cd0fb8b5aa432408f":["0213a8f84d8fe5dd24ff0672285e325b96169cb3","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["ba055e19afc289adcb5bedaf68513793a7254012"],"02a5a00236471b1e5f3c75017adb632328e120c3":["491c9672ec42582fe43960452dbd37f1c80fe0f0","5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"79728e71d79579147b18f43e27a36e34be4986e2":["d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","1eb10453c4217aa50392c51e3e89deb8b779bd51","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"5bd3ba64594a889f0e0224b3a1627b038cced5cf":["01624b85de12fb02335810bdf325124e59040772","6f4c5d3859373c3a74734e85efa122b17514e3e8","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["61ee8f1fa567e6cea780b707334c8b330b66662e"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61ee8f1fa567e6cea780b707334c8b330b66662e":["2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}