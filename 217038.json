{"path":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    final DocumentsWriter writer = this.writer.get();\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (writer.infoStream.isEnabled(\"FP\")) {\n       writer.infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    final DocumentsWriter writer = this.writer.get();\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (writer.infoStream.isEnabled(\"FP\")) {\n       writer.infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    final DocumentsWriter writer = this.writer.get();\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (writer.infoStream.isEnabled(\"FP\")) {\n       writer.infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    final DocumentsWriter writer = this.writer.get();\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (writer.infoStream.isEnabled(\"FP\")) {\n       writer.infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    final DocumentsWriter writer = this.writer.get();\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (writer.infoStream.isEnabled(\"FP\")) {\n       writer.infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c85e7e94bb746322f26163ea038a38c73887e6","date":1421315713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n     }\n   }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBuffer=\" + (1024*1024*indexWriterConfig.getRAMBufferSizeMB()));\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if ((flushOnRAM() && control.getDeleteBytesUsed() > 1024*1024*indexWriterConfig.getRAMBufferSizeMB())) {\n      control.setApplyAllDeletes();\n      if (infoStream.isEnabled(\"FP\")) {\n        infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if ((flushOnRAM() && control.getDeleteBytesUsed() > 1024*1024*indexWriterConfig.getRAMBufferSizeMB())) {\n      control.setApplyAllDeletes();\n      if (infoStream.isEnabled(\"FP\")) {\n        infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if ((flushOnRAM() && control.getDeleteBytesUsed() > 1024*1024*indexWriterConfig.getRAMBufferSizeMB())) {\n      control.setApplyAllDeletes();\n      if (infoStream.isEnabled(\"FP\")) {\n        infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDeleteTerms()) {\n      // Flush this state by num del terms\n      final int maxBufferedDeleteTerms = indexWriterConfig\n          .getMaxBufferedDeleteTerms();\n      if (control.getNumGlobalTermDeletes() >= maxBufferedDeleteTerms) {\n        control.setApplyAllDeletes();\n      }\n    }\n    if ((flushOnRAM() &&\n        control.getDeleteBytesUsed() > (1024*1024*indexWriterConfig.getRAMBufferSizeMB()))) {\n      control.setApplyAllDeletes();\n     if (infoStream.isEnabled(\"FP\")) {\n       infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n     }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, DocumentsWriterPerThread perThread) {\n    if ((flushOnRAM() && control.getDeleteBytesUsed() > 1024*1024*indexWriterConfig.getRAMBufferSizeMB())) {\n      control.setApplyAllDeletes();\n      if (infoStream.isEnabled(\"FP\")) {\n        infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n    if ((flushOnRAM() && control.getDeleteBytesUsed() > 1024*1024*indexWriterConfig.getRAMBufferSizeMB())) {\n      control.setApplyAllDeletes();\n      if (infoStream.isEnabled(\"FP\")) {\n        infoStream.message(\"FP\", \"force apply deletes bytesUsed=\" + control.getDeleteBytesUsed() + \" vs ramBufferMB=\" + indexWriterConfig.getRAMBufferSizeMB());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["28288370235ed02234a64753cdbf0c6ec096304a"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["20c85e7e94bb746322f26163ea038a38c73887e6"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20c85e7e94bb746322f26163ea038a38c73887e6":["7af110b00ea8df9429309d83e38e0533d82e144f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["20c85e7e94bb746322f26163ea038a38c73887e6","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["20c85e7e94bb746322f26163ea038a38c73887e6","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","20c85e7e94bb746322f26163ea038a38c73887e6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"20c85e7e94bb746322f26163ea038a38c73887e6":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}