{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(String,String).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens an index directory for given index path.\n   *\n   * <p>This can be used to open/repair corrupted indexes.</p>\n   *\n   * @param dirPath - index directory path\n   * @param dirImpl - class name for the specific directory implementation\n   * @return directory\n   * @throws IOException - if there is a low level IO error.\n   */\n  public static Directory openDirectory(String dirPath, String dirImpl) throws IOException {\n    final Path path = FileSystems.getDefault().getPath(Objects.requireNonNull(dirPath));\n    Directory dir = openDirectory(path, dirImpl);\n    log.info(String.format(Locale.ENGLISH, \"DirectoryReader successfully opened. Directory path=%s\", dirPath));\n    return dir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(String,String).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(String,String).mjava","sourceNew":"  /**\n   * Opens an index directory for given index path.\n   *\n   * <p>This can be used to open/repair corrupted indexes.</p>\n   *\n   * @param dirPath - index directory path\n   * @param dirImpl - class name for the specific directory implementation\n   * @return directory\n   * @throws IOException - if there is a low level IO error.\n   */\n  public static Directory openDirectory(String dirPath, String dirImpl) throws IOException {\n    final Path path = FileSystems.getDefault().getPath(Objects.requireNonNull(dirPath));\n    Directory dir = openDirectory(path, dirImpl);\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ENGLISH, \"DirectoryReader successfully opened. Directory path=%s\", dirPath));\n    }\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Opens an index directory for given index path.\n   *\n   * <p>This can be used to open/repair corrupted indexes.</p>\n   *\n   * @param dirPath - index directory path\n   * @param dirImpl - class name for the specific directory implementation\n   * @return directory\n   * @throws IOException - if there is a low level IO error.\n   */\n  public static Directory openDirectory(String dirPath, String dirImpl) throws IOException {\n    final Path path = FileSystems.getDefault().getPath(Objects.requireNonNull(dirPath));\n    Directory dir = openDirectory(path, dirImpl);\n    log.info(String.format(Locale.ENGLISH, \"DirectoryReader successfully opened. Directory path=%s\", dirPath));\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}