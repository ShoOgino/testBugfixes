{"path":"lucene/test-framework/src/test/org/apache/lucene/util/TestReproduceMessage#testFailureRule().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestReproduceMessage#testFailureRule().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestReproduceMessage#testFailureRule().mjava","sourceNew":"  @Test\n  public void testFailureRule() throws Exception { \n    type = SoreType.FAILURE; \n    where = SorePoint.RULE;\n\n    final String syserr = runAndReturnSyserr();\n    \n    Assert.assertTrue(syserr.contains(\"NOTE: reproduce with:\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtests.method=test\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtestcase=\" + Nested.class.getSimpleName()));\n  }\n\n","sourceOld":"  @Test\n  public void testFailureRule() throws Exception { \n    type = SoreType.FAILURE; \n    where = SorePoint.RULE;\n\n    final String syserr = runAndReturnSyserr();\n    \n    Assert.assertTrue(syserr.contains(\"NOTE: reproduce with:\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtests.method=test\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtestcase=\" + Nested.class.getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eae8b38e10daa721fd079d4fd7a51c87aeddcc4c","date":1600082972,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestReproduceMessage#testFailureRule().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/util/TestReproduceMessage#testFailureRule().mjava","sourceNew":"  @Test\n  public void testFailureRule() throws Exception { \n    type = SoreType.FAILURE; \n    where = SorePoint.RULE;\n    checkTestName(runAndReturnSyserr(), Nested.class.getSimpleName() + \".test\");\n  }\n\n","sourceOld":"  @Test\n  public void testFailureRule() throws Exception { \n    type = SoreType.FAILURE; \n    where = SorePoint.RULE;\n\n    final String syserr = runAndReturnSyserr();\n    \n    Assert.assertTrue(syserr.contains(\"NOTE: reproduce with:\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtests.method=test\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtestcase=\" + Nested.class.getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestReproduceMessage#testFailureRule().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/util/TestReproduceMessage#testFailureRule().mjava","sourceNew":"  @Test\n  public void testFailureRule() throws Exception { \n    type = SoreType.FAILURE; \n    where = SorePoint.RULE;\n    checkTestName(runAndReturnSyserr(), Nested.class.getSimpleName() + \".test\");\n  }\n\n","sourceOld":"  @Test\n  public void testFailureRule() throws Exception { \n    type = SoreType.FAILURE; \n    where = SorePoint.RULE;\n\n    final String syserr = runAndReturnSyserr();\n    \n    Assert.assertTrue(syserr.contains(\"NOTE: reproduce with:\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtests.method=test\"));\n    Assert.assertTrue(Arrays.asList(syserr.split(\"\\\\s\")).contains(\"-Dtestcase=\" + Nested.class.getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","eae8b38e10daa721fd079d4fd7a51c87aeddcc4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eae8b38e10daa721fd079d4fd7a51c87aeddcc4c":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["680b6449f09827f58fe987aff279e014c311d966","eae8b38e10daa721fd079d4fd7a51c87aeddcc4c"],"eae8b38e10daa721fd079d4fd7a51c87aeddcc4c":["680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}