{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader();\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader();\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  // NOTE: always returns a non-null result (ie new reader)\n  // but that could change someday\n  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","eb378f8bdee16a26810e086303a4a86b4930ea12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb378f8bdee16a26810e086303a4a86b4930ea12":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","eb378f8bdee16a26810e086303a4a86b4930ea12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["8a8259c922a83abc544609227a60d48e5ee93e7e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}