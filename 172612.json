{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n      final SolrInputField dest = mutate(src);\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutute returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97011c9e96db3532a253bad154535c9d0f8c1006","date":1328834634,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutute returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n      final SolrInputField dest = mutate(src);\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutute returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutate returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutute returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutate returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutute returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutate returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * Calls <code>mutate</code> on any fields identified by the selector \n   * before forwarding the command down the chain.  Any SolrExceptions \n   * thrown by <code>mutate</code> will be logged with the Field name, \n   * wrapped and re-thrown.\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final SolrInputDocument doc = cmd.getSolrInputDocument();\n\n    // make a copy we can iterate over while mutating the doc\n    final Collection<String> fieldNames \n      = new ArrayList<String>(doc.getFieldNames());\n\n    for (final String fname : fieldNames) {\n\n      if (! selector.shouldMutate(fname)) continue;\n      \n      final SolrInputField src = doc.get(fname);\n\n      SolrInputField dest = null;\n      try { \n        dest = mutate(src);\n      } catch (SolrException e) {\n        String msg = \"Unable to mutate field '\"+fname+\"': \"+e.getMessage();\n        SolrException.log(log, msg, e);\n        throw new SolrException(BAD_REQUEST, msg, e);\n      }\n      if (null == dest) {\n        doc.remove(fname);\n      } else {\n        // semantics of what happens if dest has diff name are hard\n        // we could treat it as a copy, or a rename\n        // for now, don't allow it.\n        if (! fname.equals(dest.getName()) ) {\n          throw new SolrException(SERVER_ERROR,\n                                  \"mutate returned field with different name: \" \n                                  + fname + \" => \" + dest.getName());\n        }\n        doc.put(dest.getName(), dest);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["97011c9e96db3532a253bad154535c9d0f8c1006","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["97011c9e96db3532a253bad154535c9d0f8c1006"],"97011c9e96db3532a253bad154535c9d0f8c1006":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["97011c9e96db3532a253bad154535c9d0f8c1006"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"97011c9e96db3532a253bad154535c9d0f8c1006":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}