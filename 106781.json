{"path":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","commits":[{"id":"c3465573b8d89796a7dc94c1b6461292f8708c6d","date":1341336998,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopwordsAfterCoreReload() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"42\" );\n    doc.setField( \"teststop\", \"terma stopworda stopwordb stopwordc\" );\n    \n    // default stopwords - stopworda and stopwordb\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.add( doc );\n    up.process( getSolrCore() );\n\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    // overwrite stopwords file with stopword list [\"stopwordc\"] and reload the core\n    overwriteStopwords(\"stopwordc\\n\");\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminRequest.reloadCore(collection, coreadmin);\n\n    up.process( getSolrCore() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    // stopworda is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    // stopwordb is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    // stopwordc should be a stopword\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopwordsAfterCoreReload() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"42\" );\n    doc.setField( \"teststop\", \"terma stopworda stopwordb stopwordc\" );\n    \n    // default stopwords - stopworda and stopwordb\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.add( doc );\n    up.process( getSolrCore() );\n\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    // overwrite stopwords file with stopword list [\"stopwordc\"] and reload the core\n    overwriteStopwords(\"stopwordc\\n\");\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminRequest.reloadCore(collection, coreadmin);\n\n    up.process( getSolrCore() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    // stopworda is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    // stopwordb is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    // stopwordc should be a stopword\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","sourceNew":"  public void testStopwordsAfterCoreReload() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"42\" );\n    doc.setField( \"teststop\", \"terma stopworda stopwordb stopwordc\" );\n    \n    // default stopwords - stopworda and stopwordb\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.add( doc );\n    up.process( getSolrCore() );\n\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    // overwrite stopwords file with stopword list [\"stopwordc\"] and reload the core\n    overwriteStopwords(\"stopwordc\\n\");\n    h.getCoreContainer().reload(collection);\n\n    up.process( getSolrCore() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    // stopworda is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    // stopwordb is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    // stopwordc should be a stopword\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n  }\n\n","sourceOld":"  public void testStopwordsAfterCoreReload() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"42\" );\n    doc.setField( \"teststop\", \"terma stopworda stopwordb stopwordc\" );\n    \n    // default stopwords - stopworda and stopwordb\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.add( doc );\n    up.process( getSolrCore() );\n\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    // overwrite stopwords file with stopword list [\"stopwordc\"] and reload the core\n    overwriteStopwords(\"stopwordc\\n\");\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminRequest.reloadCore(collection, coreadmin);\n\n    up.process( getSolrCore() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    // stopworda is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    // stopwordb is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    // stopwordc should be a stopword\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest#testStopwordsAfterCoreReload().mjava","sourceNew":"  public void testStopwordsAfterCoreReload() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"42\" );\n    doc.setField( \"teststop\", \"terma stopworda stopwordb stopwordc\" );\n    \n    // default stopwords - stopworda and stopwordb\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.add( doc );\n    up.process( getSolrCore() );\n\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    // overwrite stopwords file with stopword list [\"stopwordc\"] and reload the core\n    overwriteStopwords(\"stopwordc\\n\");\n    h.getCoreContainer().reload(collection);\n\n    up.process( getSolrCore() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    // stopworda is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    // stopwordb is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    // stopwordc should be a stopword\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n  }\n\n","sourceOld":"  public void testStopwordsAfterCoreReload() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"42\" );\n    doc.setField( \"teststop\", \"terma stopworda stopwordb stopwordc\" );\n    \n    // default stopwords - stopworda and stopwordb\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.add( doc );\n    up.process( getSolrCore() );\n\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    // overwrite stopwords file with stopword list [\"stopwordc\"] and reload the core\n    overwriteStopwords(\"stopwordc\\n\");\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminRequest.reloadCore(collection, coreadmin);\n\n    up.process( getSolrCore() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:terma\" );\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopworda\" );\n    // stopworda is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordb\" );\n    // stopwordb is no longer a stopword\n    assertEquals( 1, r.process( getSolrCore() ).getResults().size() );\n\n    q = new SolrQuery();\n    r = new QueryRequest( q );\n    q.setQuery( \"teststop:stopwordc\" );\n    // stopwordc should be a stopword\n    assertEquals( 0, r.process( getSolrCore() ).getResults().size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c3465573b8d89796a7dc94c1b6461292f8708c6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c3465573b8d89796a7dc94c1b6461292f8708c6d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c3465573b8d89796a7dc94c1b6461292f8708c6d","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"c3465573b8d89796a7dc94c1b6461292f8708c6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9405f486872f1e416304dfe389741f4ee2f8a4d"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c3465573b8d89796a7dc94c1b6461292f8708c6d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"c3465573b8d89796a7dc94c1b6461292f8708c6d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}