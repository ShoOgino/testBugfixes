{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testBehaviorEquivilenceOfUninvertibleFalse().mjava","commits":[{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testBehaviorEquivilenceOfUninvertibleFalse().mjava","pathOld":"/dev/null","sourceNew":"  public void testBehaviorEquivilenceOfUninvertibleFalse() throws Exception {\n    // NOTE: mincount=0 affects method detection/coercion, so we include permutations of it\n    \n    { \n      // an \"uninvertible=false\" field is not be facetable using the \"default\" method,\n      // or any explicit method other then \"enum\".\n      //\n      // it should behave the same as any attempt (using any method) at faceting on\n      // and \"indexed=false docValues=false\" field -- returning no buckets.\n      \n      final List<SolrParams> paramSets = new ArrayList<>();\n      for (String min : Arrays.asList(\"0\", \"1\")) {\n        for (String f : Arrays.asList(\"trait_s_not_uninvert\", \"trait_s_not_indexed_sS\")) {\n          paramSets.add(params(\"facet.field\", \"{!key=x}\" + f));\n          for (String method : Arrays.asList(\"fc\", \"fcs\", \"uif\")) {\n            paramSets.add(params(\"facet.field\", \"{!key=x}\" + f,\n                                 \"facet.mincount\", min,\n                                 \"facet.method\", method));\n            paramSets.add(params(\"facet.field\", \"{!key=x}\" + f,\n                                 \"facet.mincount\", min,\n                                 \"facet.method\", method));\n          }\n        }\n        paramSets.add(params(\"facet.field\", \"{!key=x}trait_s_not_indexed_sS\",\n                             \"facet.mincount\", min,\n                             \"facet.method\", \"enum\"));\n      }\n      for (SolrParams p : paramSets) {\n        // \"empty\" results should be the same regardless of mincount\n        assertQ(\"expect no buckets when field is not-indexed or not-uninvertible\",\n                req(p\n                    ,\"rows\",\"0\"\n                    ,\"q\", \"id_i1:[42 TO 47]\"\n                    ,\"fq\", \"id_i1:[42 TO 45]\"\n                    ,\"facet\", \"true\"\n                    )\n                ,\"//*[@numFound='4']\"\n                ,\"*[count(//lst[@name='x'])=1]\"\n                ,\"*[count(//lst[@name='x']/int)=0]\"\n                );\n      }\n      \n    }\n    \n    { \n      // the only way to facet on an \"uninvertible=false\" field is to explicitly request facet.method=enum\n      // in which case it should behave consistently with it's copyField source & equivilent docValues field\n      // (using any method for either of them)\n\n      final List<SolrParams> paramSets = new ArrayList<>();\n      for (String min : Arrays.asList(\"0\", \"1\")) {\n        paramSets.add(params(\"facet.field\", \"{!key=x}trait_s_not_uninvert\",\n                             \"facet.method\", \"enum\"));\n        for (String okField : Arrays.asList(\"trait_s\", \"trait_s_not_uninvert_dv\")) {\n          paramSets.add(params(\"facet.field\", \"{!key=x}\" + okField));\n          for (String method : Arrays.asList(\"enum\",\"fc\", \"fcs\", \"uif\")) {\n            paramSets.add(params(\"facet.field\", \"{!key=x}\" + okField,\n                                 \"facet.method\", method));\n          }\n        }\n        for (SolrParams p : paramSets) {\n          assertQ(\"check counts for applied facet queries using filtering (fq)\",\n                  req(p\n                      ,\"rows\",\"0\"\n                      ,\"q\", \"id_i1:[42 TO 47]\"\n                      ,\"fq\", \"id_i1:[42 TO 45]\"\n                      ,\"facet\", \"true\"\n                      ,\"facet.mincount\", min\n                      )\n                  ,\"//*[@numFound='4']\"\n                  ,\"*[count(//lst[@name='x'])=1]\"\n                  ,\"*[count(//lst[@name='x']/int)=\"+(\"0\".equals(min) ? \"4]\" : \"3]\")\n                  ,\"//lst[@name='x']/int[@name='Tool'][.='2']\"\n                  ,\"//lst[@name='x']/int[@name='Obnoxious'][.='1']\"\n                  ,\"//lst[@name='x']/int[@name='Chauvinist'][.='1']\"\n                  ,\"count(//lst[@name='x']/int[@name='Pig'][.='0'])=\" + (\"0\".equals(min) ? \"1\" : \"0\")\n                  );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}