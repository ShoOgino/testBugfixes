{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockRAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockRAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      searcher.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      searcher.close();\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","53a31399f2471493d67b19a95c028a74e0113b6a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","53a31399f2471493d67b19a95c028a74e0113b6a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["53a31399f2471493d67b19a95c028a74e0113b6a","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}