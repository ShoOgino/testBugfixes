{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFill().mjava","commits":[{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFill().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFill() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFill().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFill() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testFill().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFill().mjava","sourceNew":"  @Test\n  public void testFill() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFill() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}