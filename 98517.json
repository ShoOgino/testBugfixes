{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testMaxFixedLength().mjava","commits":[{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testMaxFixedLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxFixedLength() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int fixedLength = random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10);\n    int numTerms = atLeast(10);\n    int actualFixedLength = -2;\n    int actualMaxLength = -1;\n    for(int termIDX=0;termIDX<numTerms;termIDX++) {\n      Document doc = new Document();\n      String termString;\n      if (fixedLength == -1) {\n        termString = _TestUtil.randomRealisticUnicodeString(random());\n      } else {\n        termString = _TestUtil.randomRealisticUnicodeString(random(), fixedLength, fixedLength);\n      }\n      BytesRef term = new BytesRef(termString);\n      actualMaxLength = Math.max(actualMaxLength, term.length);\n      if (actualFixedLength == -2) {\n        actualFixedLength = term.length;\n      } else if (actualFixedLength != term.length) {\n        actualFixedLength = -1;\n      }\n      doc.add(newField(\"term\", termString, StringField.TYPE_NOT_STORED));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    AtomicReader subR = r.leaves().get(0).reader();\n    BinaryDocValues values = FieldCache.DEFAULT.getTerms(subR, \"term\");\n    assertEquals(actualFixedLength >= 0, values.isFixedLength());\n    assertEquals(actualMaxLength, values.maxLength());\n\n    SortedDocValues sortedValues = FieldCache.DEFAULT.getTermsIndex(subR, \"term\");\n    assertEquals(actualFixedLength >= 0, sortedValues.isFixedLength());\n    assertEquals(actualMaxLength, sortedValues.maxLength());\n\n    // No field cache insanity because close purges FC entries:\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testMaxFixedLength().mjava","sourceNew":null,"sourceOld":"  public void testMaxFixedLength() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int fixedLength = random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10);\n    int numTerms = atLeast(10);\n    int actualFixedLength = -2;\n    int actualMaxLength = -1;\n    for(int termIDX=0;termIDX<numTerms;termIDX++) {\n      Document doc = new Document();\n      String termString;\n      if (fixedLength == -1) {\n        termString = _TestUtil.randomRealisticUnicodeString(random());\n      } else {\n        termString = _TestUtil.randomRealisticUnicodeString(random(), fixedLength, fixedLength);\n      }\n      BytesRef term = new BytesRef(termString);\n      actualMaxLength = Math.max(actualMaxLength, term.length);\n      if (actualFixedLength == -2) {\n        actualFixedLength = term.length;\n      } else if (actualFixedLength != term.length) {\n        actualFixedLength = -1;\n      }\n      doc.add(newField(\"term\", termString, StringField.TYPE_NOT_STORED));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    AtomicReader subR = r.leaves().get(0).reader();\n    BinaryDocValues values = FieldCache.DEFAULT.getTerms(subR, \"term\");\n    assertEquals(actualFixedLength >= 0, values.isFixedLength());\n    assertEquals(actualMaxLength, values.maxLength());\n\n    SortedDocValues sortedValues = FieldCache.DEFAULT.getTermsIndex(subR, \"term\");\n    assertEquals(actualFixedLength >= 0, sortedValues.isFixedLength());\n    assertEquals(actualMaxLength, sortedValues.maxLength());\n\n    // No field cache insanity because close purges FC entries:\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"746e3645169db50c8f53252b30d6bc9ac21dea7c":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"746e3645169db50c8f53252b30d6bc9ac21dea7c":[],"f7178a82d1134111f4511f28bb9ad57573a57d93":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7178a82d1134111f4511f28bb9ad57573a57d93","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["746e3645169db50c8f53252b30d6bc9ac21dea7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}