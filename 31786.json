{"path":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","commits":[{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"295ee3b02a4d15ec6a740f6bc893d94de10dbbb7","date":1301759516,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f20bb72b0dfa147c6f1fcd7693102c63a2714eae","date":1303767270,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0663cc678850ea2c51151f9fd217342ea35b8568","date":1303828523,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21486a8058ee8d7503c7d7a5e55b6c3a218d0942","date":1303841712,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a405e749df166cf8c456ac9381f77f6c99a6270","date":1303842176,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f944ac3fe3f9d40d825177507fb381d2b106b3","date":1303868525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":["665d31bc0a447d133271ce49d66e9a4ee16f353b","665d31bc0a447d133271ce49d66e9a4ee16f353b","665d31bc0a447d133271ce49d66e9a4ee16f353b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.termsEnum = te;\n      }\n\n      maxTermCounts[termNum] = searcher.getDocSet(new TermQuery(new Term(field, topTerm.term)), deState).size();\n      //System.out.println(\"  big term termNum=\" + termNum + \" term=\" + topTerm.term.utf8ToString() + \" size=\" + maxTermCounts[termNum] + \" dF=\" + te.docFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = StringHelper.intern(field);\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d5df8e07c035d62d982894b439322da40e0938":["45669a651c970812a680841b97a77cce06af559f","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"7a405e749df166cf8c456ac9381f77f6c99a6270":["21486a8058ee8d7503c7d7a5e55b6c3a218d0942"],"f20bb72b0dfa147c6f1fcd7693102c63a2714eae":["295ee3b02a4d15ec6a740f6bc893d94de10dbbb7"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"c26f00b574427b55127e869b935845554afde1fa":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"0663cc678850ea2c51151f9fd217342ea35b8568":["f20bb72b0dfa147c6f1fcd7693102c63a2714eae"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"f8f944ac3fe3f9d40d825177507fb381d2b106b3":["7a405e749df166cf8c456ac9381f77f6c99a6270"],"295ee3b02a4d15ec6a740f6bc893d94de10dbbb7":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f8f944ac3fe3f9d40d825177507fb381d2b106b3","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","295ee3b02a4d15ec6a740f6bc893d94de10dbbb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"21486a8058ee8d7503c7d7a5e55b6c3a218d0942":["0663cc678850ea2c51151f9fd217342ea35b8568"]},"commit2Childs":{"d4d5df8e07c035d62d982894b439322da40e0938":[],"7a405e749df166cf8c456ac9381f77f6c99a6270":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"f20bb72b0dfa147c6f1fcd7693102c63a2714eae":["0663cc678850ea2c51151f9fd217342ea35b8568"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"0663cc678850ea2c51151f9fd217342ea35b8568":["21486a8058ee8d7503c7d7a5e55b6c3a218d0942"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8f944ac3fe3f9d40d825177507fb381d2b106b3":["d4d5df8e07c035d62d982894b439322da40e0938","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"295ee3b02a4d15ec6a740f6bc893d94de10dbbb7":["f20bb72b0dfa147c6f1fcd7693102c63a2714eae","45669a651c970812a680841b97a77cce06af559f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["295ee3b02a4d15ec6a740f6bc893d94de10dbbb7"],"45669a651c970812a680841b97a77cce06af559f":["d4d5df8e07c035d62d982894b439322da40e0938"],"21486a8058ee8d7503c7d7a5e55b6c3a218d0942":["7a405e749df166cf8c456ac9381f77f6c99a6270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4d5df8e07c035d62d982894b439322da40e0938","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}