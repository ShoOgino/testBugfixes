{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"193a8346fc41165af561d084bb5f40a62125a878","date":1315971230,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null) {\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      } else {\n        streams.withStopFilter = streams.wrapped;\n      }\n    } else {\n      /*\n      * an entry for this field exists, verify the wrapped stream has not\n      * changed. if it has not, reuse it, otherwise wrap the new stream.\n      */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n      } else {\n        /*\n        * the wrapped analyzer did not. if there are any stopwords for the\n        * field, create a new StopFilter around the new stream\n        */\n        streams.wrapped = result;\n        Set<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null) {\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        } else {\n          streams.withStopFilter = streams.wrapped;\n        }\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    @SuppressWarnings(\"unchecked\")\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null) {\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      } else {\n        streams.withStopFilter = streams.wrapped;\n      }\n    } else {\n      /*\n      * an entry for this field exists, verify the wrapped stream has not\n      * changed. if it has not, reuse it, otherwise wrap the new stream.\n      */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n      } else {\n        /*\n        * the wrapped analyzer did not. if there are any stopwords for the\n        * field, create a new StopFilter around the new stream\n        */\n        streams.wrapped = result;\n        Set<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null) {\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        } else {\n          streams.withStopFilter = streams.wrapped;\n        }\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["4d7a70709df2f3ba961939504c75098e92da8b99"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4d7a70709df2f3ba961939504c75098e92da8b99","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"4d7a70709df2f3ba961939504c75098e92da8b99":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4d7a70709df2f3ba961939504c75098e92da8b99","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"193a8346fc41165af561d084bb5f40a62125a878":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"2f49143da0a5d278a72f741432047fcfa6da996e":["193a8346fc41165af561d084bb5f40a62125a878"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4d7a70709df2f3ba961939504c75098e92da8b99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f49143da0a5d278a72f741432047fcfa6da996e"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","193a8346fc41165af561d084bb5f40a62125a878"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"4d7a70709df2f3ba961939504c75098e92da8b99":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"193a8346fc41165af561d084bb5f40a62125a878":["2f49143da0a5d278a72f741432047fcfa6da996e"],"2f49143da0a5d278a72f741432047fcfa6da996e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["4d7a70709df2f3ba961939504c75098e92da8b99","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}