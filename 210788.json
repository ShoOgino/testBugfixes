{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle],boolean).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle],boolean).mjava","sourceNew":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation, final boolean mortonOptimized) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // compute edges from polygon\n        boolean abFromPolygon = (a.next == node) ? a.isNextEdgeFromPolygon : isEdgeFromPolygon(a, node, mortonOptimized);\n        boolean bcFromPolygon = (node.next == b) ? node.isNextEdgeFromPolygon : isEdgeFromPolygon(node, b, mortonOptimized);\n        boolean caFromPolygon = (b.next == a) ? b.isNextEdgeFromPolygon : isEdgeFromPolygon(a, b, mortonOptimized);\n        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon,  b, caFromPolygon));\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon, b, caFromPolygon));\n\n        // remove two nodes involved\n        removeNode(node, caFromPolygon);\n        removeNode(node.next, caFromPolygon);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","sourceOld":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation, final boolean mortonOptimized) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // compute edges from polygon\n        boolean abFromPolygon = (a.next == node) ? a.isNextEdgeFromPolygon : isEdgeFromPolygon(a, node, mortonOptimized);\n        boolean bcFromPolygon = (node.next == b) ? node.isNextEdgeFromPolygon : isEdgeFromPolygon(node, b, mortonOptimized);\n        boolean caFromPolygon = (b.next == a) ? b.isNextEdgeFromPolygon : isEdgeFromPolygon(a, b, mortonOptimized);\n        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon,  b, caFromPolygon));\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon, b, caFromPolygon));\n\n        // remove two nodes involved\n        removeNode(node, caFromPolygon);\n        removeNode(node.next, caFromPolygon);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}