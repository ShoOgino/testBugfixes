{"path":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static ValueSource parseValSource(StrParser sp, IndexSchema schema) throws ParseException {\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function: could contain a fieldname or another function.\n      ValueSource vs=null;\n      if (id.equals(\"ord\")) {\n        String field = sp.getId();\n        vs = new OrdFieldSource(field);\n      } else if (id.equals(\"rord\")) {\n        String field = sp.getId();\n        vs = new ReverseOrdFieldSource(field);\n      } else if (id.equals(\"linear\")) {\n        ValueSource source = parseValSource(sp, schema);\n        sp.expect(\",\");\n        float slope = sp.getFloat();\n        sp.expect(\",\");\n        float intercept = sp.getFloat();\n        vs = new LinearFloatFunction(source,slope,intercept);\n      } else if (id.equals(\"recip\")) {\n        ValueSource source = parseValSource(sp,schema);\n        sp.expect(\",\");\n        float m = sp.getFloat();\n        sp.expect(\",\");\n        float a = sp.getFloat();\n        sp.expect(\",\");\n        float b = sp.getFloat();\n        vs = new ReciprocalFloatFunction(source,m,a,b);\n      } else {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = schema.getField(id);\n    return f.getType().getValueSource(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5aa223546c77c24e2d9812e1eadda7669318cb","date":1141238653,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","sourceNew":"  private static ValueSource parseValSource(StrParser sp, IndexSchema schema) throws ParseException {\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function: could contain a fieldname or another function.\n      ValueSource vs=null;\n      if (id.equals(\"ord\")) {\n        String field = sp.getId();\n        vs = new OrdFieldSource(field);\n      } else if (id.equals(\"rord\")) {\n        String field = sp.getId();\n        vs = new ReverseOrdFieldSource(field);\n      } else if (id.equals(\"linear\")) {\n        ValueSource source = parseValSource(sp, schema);\n        sp.expect(\",\");\n        float slope = sp.getFloat();\n        sp.expect(\",\");\n        float intercept = sp.getFloat();\n        vs = new LinearFloatFunction(source,slope,intercept);\n      } else if (id.equals(\"max\")) {\n        ValueSource source = parseValSource(sp, schema);\n        sp.expect(\",\");\n        float val = sp.getFloat();\n        vs = new MaxFloatFunction(source,val);\n      } else if (id.equals(\"recip\")) {\n        ValueSource source = parseValSource(sp,schema);\n        sp.expect(\",\");\n        float m = sp.getFloat();\n        sp.expect(\",\");\n        float a = sp.getFloat();\n        sp.expect(\",\");\n        float b = sp.getFloat();\n        vs = new ReciprocalFloatFunction(source,m,a,b);\n      } else {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = schema.getField(id);\n    return f.getType().getValueSource(f);\n  }\n\n","sourceOld":"  private static ValueSource parseValSource(StrParser sp, IndexSchema schema) throws ParseException {\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function: could contain a fieldname or another function.\n      ValueSource vs=null;\n      if (id.equals(\"ord\")) {\n        String field = sp.getId();\n        vs = new OrdFieldSource(field);\n      } else if (id.equals(\"rord\")) {\n        String field = sp.getId();\n        vs = new ReverseOrdFieldSource(field);\n      } else if (id.equals(\"linear\")) {\n        ValueSource source = parseValSource(sp, schema);\n        sp.expect(\",\");\n        float slope = sp.getFloat();\n        sp.expect(\",\");\n        float intercept = sp.getFloat();\n        vs = new LinearFloatFunction(source,slope,intercept);\n      } else if (id.equals(\"recip\")) {\n        ValueSource source = parseValSource(sp,schema);\n        sp.expect(\",\");\n        float m = sp.getFloat();\n        sp.expect(\",\");\n        float a = sp.getFloat();\n        sp.expect(\",\");\n        float b = sp.getFloat();\n        vs = new ReciprocalFloatFunction(source,m,a,b);\n      } else {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = schema.getField(id);\n    return f.getType().getValueSource(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aa57ace203f336e00a38867cb7e815ca4e1572e","date":1190088278,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","sourceNew":"  private static ValueSource parseValSource(StrParser sp, IndexSchema schema) throws ParseException {\n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      return new ConstValueSource(sp.getFloat());\n    }\n\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function... look it up.\n      VSParser argParser = vsParsers.get(id);\n      if (argParser==null) {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      ValueSource vs = argParser.parse(sp, schema);\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = schema.getField(id);\n    return f.getType().getValueSource(f);\n  }\n\n","sourceOld":"  private static ValueSource parseValSource(StrParser sp, IndexSchema schema) throws ParseException {\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function: could contain a fieldname or another function.\n      ValueSource vs=null;\n      if (id.equals(\"ord\")) {\n        String field = sp.getId();\n        vs = new OrdFieldSource(field);\n      } else if (id.equals(\"rord\")) {\n        String field = sp.getId();\n        vs = new ReverseOrdFieldSource(field);\n      } else if (id.equals(\"linear\")) {\n        ValueSource source = parseValSource(sp, schema);\n        sp.expect(\",\");\n        float slope = sp.getFloat();\n        sp.expect(\",\");\n        float intercept = sp.getFloat();\n        vs = new LinearFloatFunction(source,slope,intercept);\n      } else if (id.equals(\"max\")) {\n        ValueSource source = parseValSource(sp, schema);\n        sp.expect(\",\");\n        float val = sp.getFloat();\n        vs = new MaxFloatFunction(source,val);\n      } else if (id.equals(\"recip\")) {\n        ValueSource source = parseValSource(sp,schema);\n        sp.expect(\",\");\n        float m = sp.getFloat();\n        sp.expect(\",\");\n        float a = sp.getFloat();\n        sp.expect(\",\");\n        float b = sp.getFloat();\n        vs = new ReciprocalFloatFunction(source,m,a,b);\n      } else {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = schema.getField(id);\n    return f.getType().getValueSource(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseValSource().mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseValSource(StrParser,IndexSchema).mjava","sourceNew":"  private ValueSource parseValSource() throws ParseException {\n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      return new ConstValueSource(sp.getFloat());\n    }\n\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function... look it up.\n      VSParser argParser = vsParsers.get(id);\n      if (argParser==null) {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      ValueSource vs = argParser.parse(this);\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = req.getSchema().getField(id);\n    return f.getType().getValueSource(f, this);\n  }\n\n","sourceOld":"  private static ValueSource parseValSource(StrParser sp, IndexSchema schema) throws ParseException {\n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      return new ConstValueSource(sp.getFloat());\n    }\n\n    String id = sp.getId();\n    if (sp.opt(\"(\")) {\n      // a function... look it up.\n      VSParser argParser = vsParsers.get(id);\n      if (argParser==null) {\n        throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n      }\n      ValueSource vs = argParser.parse(sp, schema);\n      sp.expect(\")\");\n      return vs;\n    }\n\n    SchemaField f = schema.getField(id);\n    return f.getType().getValueSource(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["1f5aa223546c77c24e2d9812e1eadda7669318cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1f5aa223546c77c24e2d9812e1eadda7669318cb":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["1f5aa223546c77c24e2d9812e1eadda7669318cb"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":[],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f5aa223546c77c24e2d9812e1eadda7669318cb":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["66ab3886c1d845c59c9e5b23b2fb247b927db498","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}