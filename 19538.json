{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store, true);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = DirectoryReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertNotNull(\"First element doesn't exist.\", spare = it.next());\n      assertEquals(\"First element isn't correct\", \"bar\", spare.utf8ToString());\n      assertNull(\"More elements than expected\", it.next());\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = DirectoryReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertNotNull(\"First element doesn't exist.\", spare = it.next());\n      assertEquals(\"First element isn't correct\", \"bar\", spare.utf8ToString());\n      assertNull(\"More elements than expected\", it.next());\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = IndexReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertTrue(\"First element doesn't exist.\", it.hasNext());\n      assertTrue(\"First element isn't correct\", it.next().equals(\"bar\"));\n      assertFalse(\"More elements than expected\", it.hasNext());\n      assertTrue(\"Nonexistent element is really null\", it.next() == null);\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestLuceneDictionary#testFieldZzz().mjava","sourceNew":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = DirectoryReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertNotNull(\"First element doesn't exist.\", spare = it.next());\n      assertEquals(\"First element isn't correct\", \"bar\", spare.utf8ToString());\n      assertNull(\"More elements than expected\", it.next());\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","sourceOld":"  public void testFieldZzz() throws IOException {\n    try {\n      indexReader = DirectoryReader.open(store);\n\n      ld = new LuceneDictionary(indexReader, \"zzz\");\n      it = ld.getWordsIterator();\n\n      assertNotNull(\"First element doesn't exist.\", spare = it.next());\n      assertEquals(\"First element isn't correct\", \"bar\", spare.utf8ToString());\n      assertNull(\"More elements than expected\", it.next());\n    }\n    finally {\n      if  (indexReader != null) { indexReader.close(); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["e230a61047bc041516c811baa08a7174d6f8322a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3615ce4a1f785ae1b779244de52c6a7d99227e60","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e230a61047bc041516c811baa08a7174d6f8322a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e230a61047bc041516c811baa08a7174d6f8322a","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e230a61047bc041516c811baa08a7174d6f8322a":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3615ce4a1f785ae1b779244de52c6a7d99227e60","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}