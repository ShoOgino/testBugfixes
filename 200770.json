{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentExpressionDictionaryTest#testWithValueSource().mjava","commits":[{"id":"24730daba4a74cb3bd673ccacc4ddaee5963af02","date":1385133691,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentExpressionDictionaryTest#testWithValueSource().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithValueSource() throws IOException {\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(atLeast(100));\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentExpressionDictionary(ir, FIELD_NAME, new DoubleConstValueSource(10), PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(inputIterator.weight(), 10);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentExpressionDictionaryTest#testWithValueSource().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithValueSource() throws IOException {\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(atLeast(100));\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentExpressionDictionary(ir, FIELD_NAME, new DoubleConstValueSource(10), PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(inputIterator.weight(), 10);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11c5f879e49375db0f48ca533856f226c2db57a5","date":1390688316,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentValueSourceDictionaryTest#testWithValueSource().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentExpressionDictionaryTest#testWithValueSource().mjava","sourceNew":"  @Test\n  public void testWithValueSource() throws IOException {\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(atLeast(100));\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentValueSourceDictionary(ir, FIELD_NAME, new DoubleConstValueSource(10), PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(inputIterator.weight(), 10);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testWithValueSource() throws IOException {\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(atLeast(100));\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentExpressionDictionary(ir, FIELD_NAME, new DoubleConstValueSource(10), PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(inputIterator.weight(), 10);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"11c5f879e49375db0f48ca533856f226c2db57a5":["24730daba4a74cb3bd673ccacc4ddaee5963af02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c5f879e49375db0f48ca533856f226c2db57a5"]},"commit2Childs":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","11c5f879e49375db0f48ca533856f226c2db57a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24730daba4a74cb3bd673ccacc4ddaee5963af02","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"11c5f879e49375db0f48ca533856f226c2db57a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}