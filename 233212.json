{"path":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.FastCompressionHashTable#reset(byte[],int,int).mjava","commits":[{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.FastCompressionHashTable#reset(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#reset(int).mjava","sourceNew":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      this.bytes = bytes;\n      this.base = off;\n      this.lastOff = off - 1;\n      this.end = off + len;\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        // Avoid calling hashTable.clear(), this makes it costly to compress many short sequences otherwise.\n        // Instead, get() checks that references are less than the current offset.\n        get(off); // this sets the hashTable for the first 4 bytes as a side-effect\n      }\n    }\n\n","sourceOld":"    void reset(int len) {\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        hashTable.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.FastCompressionHashTable#reset(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.FastCompressionHashTable#reset(byte[],int,int).mjava","sourceNew":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      this.bytes = bytes;\n      this.base = off;\n      this.end = off + len;\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        // Avoid calling hashTable.clear(), this makes it costly to compress many short sequences otherwise.\n        // Instead, get() checks that references are less than the current offset.\n      }\n      this.lastOff = off - 1;\n    }\n\n","sourceOld":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      this.bytes = bytes;\n      this.base = off;\n      this.lastOff = off - 1;\n      this.end = off + len;\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        // Avoid calling hashTable.clear(), this makes it costly to compress many short sequences otherwise.\n        // Instead, get() checks that references are less than the current offset.\n        get(off); // this sets the hashTable for the first 4 bytes as a side-effect\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["9407318969e8504257b4c5764c65755a043e5404"],"9407318969e8504257b4c5764c65755a043e5404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9407318969e8504257b4c5764c65755a043e5404"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9407318969e8504257b4c5764c65755a043e5404":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}