{"path":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final OpenBitSet bits = new OpenBitSet(n);\n    for (int i = 0; i < 5 * n; i++) {\n      bits.flip(random().nextInt(n));\n    }\n    \n    OpenBitSet verify = new OpenBitSet(n);\n    verify.or(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, \n        reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final OpenBitSet bits = new OpenBitSet(n);\n    for (int i = 0; i < 5 * n; i++) {\n      bits.flip(random().nextInt(n));\n    }\n    \n    OpenBitSet verify = new OpenBitSet(n);\n    verify.or(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, \n        reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final OpenBitSet bits = new OpenBitSet(n);\n    for (int i = 0; i < 5 * n; i++) {\n      bits.flip(random().nextInt(n));\n    }\n    \n    OpenBitSet verify = new OpenBitSet(n);\n    verify.or(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, \n        reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final OpenBitSet bits = new OpenBitSet(n);\n    for (int i = 0; i < 5 * n; i++) {\n      bits.flip(random().nextInt(n));\n    }\n    \n    OpenBitSet verify = new OpenBitSet(n);\n    verify.or(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, \n        reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testComplementIterator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testComplementIterator().mjava","sourceNew":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComplementIterator() throws Exception {\n    final int n = atLeast(10000);\n    final FixedBitSet bits = new FixedBitSet(n);\n    Random random = random();\n    for (int i = 0; i < n; i++) {\n      int idx = random.nextInt(n);\n      bits.flip(idx, idx + 1);\n    }\n    \n    FixedBitSet verify = new FixedBitSet(bits);\n\n    ScoredDocIDs scoredDocIDs = ScoredDocIdsUtils.createScoredDocIds(bits, n); \n\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, n, dir);\n    try { \n      assertEquals(n - verify.cardinality(), ScoredDocIdsUtils.getComplementSet(scoredDocIDs, reader).size());\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}