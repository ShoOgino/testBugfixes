{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}