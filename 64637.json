{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  private long addChildren(String prefix, SolrInputDocument topDocument, int childIndex, boolean lastLevel, long docId) {\n    SolrInputDocument childDocument = new SolrInputDocument();\n    childDocument.addField(\"id\", docId++);\n    childDocument.addField(\"type_s\", prefix);\n    for (int index = 0; index < childIndex; ++index) {\n      childDocument.addField(childIndex + prefix + index + \"_s\", childIndex + \"value\"+ index);\n    }   \n  \n    if (!lastLevel) {\n      for (int i = 0; i < childIndex * 2; ++i) {\n        docId = addChildren(\"grand\", childDocument, i, true, docId);\n      }\n    }\n    topDocument.addChildDocument(childDocument);\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  private long addChildren(String prefix, SolrInputDocument topDocument, int childIndex, boolean lastLevel, long docId) {\n    SolrInputDocument childDocument = new SolrInputDocument();\n    childDocument.addField(\"id\", docId++);\n    childDocument.addField(\"type_s\", prefix);\n    for (int index = 0; index < childIndex; ++index) {\n      childDocument.addField(childIndex + prefix + index + \"_s\", childIndex + \"value\"+ index);\n    }   \n  \n    if (!lastLevel) {\n      for (int i = 0; i < childIndex * 2; ++i) {\n        docId = addChildren(\"grand\", childDocument, i, true, docId);\n      }\n    }\n    topDocument.addChildDocument(childDocument);\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","sourceNew":"  /**\n   * Recursive helper function for building out child and grandchild docs\n   */\n  private long addChildren(String prefix, SolrInputDocument topDocument, int childIndex, boolean lastLevel, long docId) {\n    SolrInputDocument childDocument = new SolrInputDocument();\n    childDocument.addField(\"id\", docId++);\n    childDocument.addField(\"type_s\", prefix);\n    for (int index = 0; index < childIndex; ++index) {\n      childDocument.addField(childIndex + prefix + index + \"_s\", childIndex + \"value\"+ index);\n    }   \n  \n    if (!lastLevel) {\n      for (int i = 0; i < childIndex * 2; ++i) {\n        docId = addChildren(\"grand\", childDocument, i, true, docId);\n      }\n    }\n    topDocument.addChildDocument(childDocument);\n    return docId;\n  }\n\n","sourceOld":"  private long addChildren(String prefix, SolrInputDocument topDocument, int childIndex, boolean lastLevel, long docId) {\n    SolrInputDocument childDocument = new SolrInputDocument();\n    childDocument.addField(\"id\", docId++);\n    childDocument.addField(\"type_s\", prefix);\n    for (int index = 0; index < childIndex; ++index) {\n      childDocument.addField(childIndex + prefix + index + \"_s\", childIndex + \"value\"+ index);\n    }   \n  \n    if (!lastLevel) {\n      for (int i = 0; i < childIndex * 2; ++i) {\n        docId = addChildren(\"grand\", childDocument, i, true, docId);\n      }\n    }\n    topDocument.addChildDocument(childDocument);\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addChildren(String,SolrInputDocument,int,boolean,long).mjava","sourceNew":"  /**\n   * Recursive helper function for building out child and grandchild docs\n   */\n  private long addChildren(String prefix, SolrInputDocument topDocument, int childIndex, boolean lastLevel, long docId) {\n    SolrInputDocument childDocument = new SolrInputDocument();\n    childDocument.addField(\"id\", docId++);\n    childDocument.addField(\"type_s\", prefix);\n    for (int index = 0; index < childIndex; ++index) {\n      childDocument.addField(childIndex + prefix + index + \"_s\", childIndex + \"value\"+ index);\n    }   \n  \n    if (!lastLevel) {\n      for (int i = 0; i < childIndex * 2; ++i) {\n        docId = addChildren(\"grand\", childDocument, i, true, docId);\n      }\n    }\n    topDocument.addChildDocument(childDocument);\n    return docId;\n  }\n\n","sourceOld":"  private long addChildren(String prefix, SolrInputDocument topDocument, int childIndex, boolean lastLevel, long docId) {\n    SolrInputDocument childDocument = new SolrInputDocument();\n    childDocument.addField(\"id\", docId++);\n    childDocument.addField(\"type_s\", prefix);\n    for (int index = 0; index < childIndex; ++index) {\n      childDocument.addField(childIndex + prefix + index + \"_s\", childIndex + \"value\"+ index);\n    }   \n  \n    if (!lastLevel) {\n      for (int i = 0; i < childIndex * 2; ++i) {\n        docId = addChildren(\"grand\", childDocument, i, true, docId);\n      }\n    }\n    topDocument.addChildDocument(childDocument);\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b945b8f5bba0303382bc69d60c0c287714f23328":["637a392e2e05d4e1179ac3c532cfeef0cde977ba","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}