{"path":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n\n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n    return sort(reader.maxDoc(), comparators);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n\n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n    return sort(reader.maxDoc(), comparators);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        for (int i = 0; i < comparators.length; i++) {\n          int comp = comparators[i].compare(docID1, docID2);\n          if (comp != 0) {\n            return comp;\n          }\n        }\n        return Integer.compare(docID1, docID2); // docid order tiebreak\n      }\n    };\n\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <code>null</code> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n\n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n    return sort(reader.maxDoc(), comparators);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n\n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n    return sort(reader.maxDoc(), comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, IndexSorter.DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <code>null</code> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField[] fields = sort.getSort();\n    final IndexSorter.DocComparator[] comparators = new IndexSorter.DocComparator[fields.length];\n\n    for (int i = 0; i < fields.length; i++) {\n      IndexSorter sorter = fields[i].getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalArgumentException(\"Cannot use sortfield + \"  + fields[i] + \" to sort indexes\");\n      }\n      comparators[i] = sorter.getDocComparator(reader, reader.maxDoc());\n    }\n    return sort(reader.maxDoc(), comparators);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <code>null</code> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final DocComparator comparators[] = new DocComparator[fields.length];\n\n    for (int i = 0; i < fields.length; i++) {\n      comparators[i] = getDocComparator(reader, fields[i]);\n    }\n    return sort(reader.maxDoc(), comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["773bf150032d3ef6c95997a154fb914b82875cb8"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["9e3751ad4cc85eb979419cf5469dfba266eae56a","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}