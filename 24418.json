{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f58dd714e47e4b20e7ddf69802a24d8278a50d3d","date":1270583819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24736f886f499d15345d6c4b717b9fe84a70dae2","date":1274900864,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx(),\n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e277c90a96e81a581f45e4b6aaf384ddc50f79bc","date":1280401404,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getCodec().name);\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getCodec().name);\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getCodec());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getCodec().name);\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          if (infoStream != null) {\n            message(\"flushedFiles=\" + docWriter.getFlushedFiles());\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          if (infoStream != null) {\n            message(\"flushedFiles=\" + docWriter.getFlushedFiles());\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          if (infoStream != null) {\n            message(\"flushedFiles=\" + docWriter.getFlushedFiles());\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (infoStream != null) {\n      message(\"flush: now pause all indexing threads\");\n    }\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          if (infoStream != null) {\n            message(\"flushedFiles=\" + docWriter.getFlushedFiles());\n          }\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, docStoreOffset,\n                                     docStoreSegment, docStoreIsCompoundFile,\n                                     docWriter.hasProx(),    \n                                     docWriter.getSegmentCodecs());\n\n        if (infoStream != null) {\n          message(\"flush codec=\" + docWriter.getSegmentCodecs());\n        }\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.clearFlushPending();\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["2a186ae8733084223c22044e935e4ef848a143d1"],"2a186ae8733084223c22044e935e4ef848a143d1":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["85a883878c0af761245ab048babc63d099f835f3","2a186ae8733084223c22044e935e4ef848a143d1"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["e277c90a96e81a581f45e4b6aaf384ddc50f79bc"],"24736f886f499d15345d6c4b717b9fe84a70dae2":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"85a883878c0af761245ab048babc63d099f835f3":["e277c90a96e81a581f45e4b6aaf384ddc50f79bc","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["6267e1ce56c2eec111425690cd04e251b6f14952"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["24736f886f499d15345d6c4b717b9fe84a70dae2"],"e277c90a96e81a581f45e4b6aaf384ddc50f79bc":["334c1175813aea771a71728cd2c4ee4754fd0603"],"6267e1ce56c2eec111425690cd04e251b6f14952":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a186ae8733084223c22044e935e4ef848a143d1":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["2a186ae8733084223c22044e935e4ef848a143d1","85a883878c0af761245ab048babc63d099f835f3"],"85a883878c0af761245ab048babc63d099f835f3":["c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"24736f886f499d15345d6c4b717b9fe84a70dae2":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["e277c90a96e81a581f45e4b6aaf384ddc50f79bc"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["6267e1ce56c2eec111425690cd04e251b6f14952"],"e277c90a96e81a581f45e4b6aaf384ddc50f79bc":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3"],"6267e1ce56c2eec111425690cd04e251b6f14952":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["24736f886f499d15345d6c4b717b9fe84a70dae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8fe956d65251358d755c56f14fe8380644790e47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}