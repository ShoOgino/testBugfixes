{"path":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, Handle.Output);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, Handle.Output);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnCreateOutput) {\n      maybeThrowDeterministicException();\n    }\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, Handle.Output);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, Handle.Output);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnCreateOutput) {\n      maybeThrowDeterministicException();\n    }\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, Handle.Output);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnCreateOutput) {\n      maybeThrowDeterministicException();\n    }\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, Handle.Output);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}