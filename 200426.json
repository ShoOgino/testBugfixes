{"path":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","commits":[{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        this.storePayloads = false;\n      }\n    }\n    assert this.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, \n              boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePositionWithTermVector != storePositionWithTermVector) {\n        this.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        this.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        this.storePayloads = false;\n      }\n    }\n    assert this.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        this.storePayloads = false;\n      }\n    }\n    assert this.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}