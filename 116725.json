{"path":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testCopyOf().mjava","commits":[{"id":"33adea025f43af3243278587a46b8d9fd2e8ccf9","date":1525885077,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testCopyOf().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyOf() {\n    Random random = random();\n    int numBits = TestUtil.nextInt(random, 1000, 2000);\n    int count = TestUtil.nextInt(random, 0, numBits - 1);\n    int[] bits = makeIntArray(random, count, 0, numBits - 1);\n    FixedBitSet fixedBitSet = makeFixedBitSet(bits, numBits);\n\n    FixedBitSet mutableCopy = FixedBitSet.copyOf(fixedBitSet);\n    assertNotSame(mutableCopy, fixedBitSet);\n    assertEquals(mutableCopy, fixedBitSet);\n\n    FixedBitSet mutableCopy1 = FixedBitSet.copyOf(new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return fixedBitSet.get(index);\n      }\n\n      @Override\n      public int length() {\n        return fixedBitSet.length();\n      }\n    });\n\n    assertNotSame(mutableCopy, mutableCopy1);\n    assertNotSame(fixedBitSet, mutableCopy1);\n    assertEquals(mutableCopy1, mutableCopy);\n    assertEquals(mutableCopy1, fixedBitSet);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343225ab8d252d23fe15d7009ec76fc99c199cf3","date":1525885873,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testCopyOf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testCopyOf().mjava","sourceNew":"  public void testCopyOf() {\n    Random random = random();\n    int numBits = TestUtil.nextInt(random, 1000, 2000);\n    int count = TestUtil.nextInt(random, 0, numBits - 1);\n    int[] bits = makeIntArray(random, count, 0, numBits - 1);\n    FixedBitSet fixedBitSet = new FixedBitSet(numBits);\n    for (int e : bits) {\n      fixedBitSet.set(e);\n    }\n    FixedBitSet mutableCopy = FixedBitSet.copyOf(fixedBitSet);\n    assertNotSame(mutableCopy, fixedBitSet);\n    assertEquals(mutableCopy, fixedBitSet);\n\n    FixedBitSet mutableCopy1 = FixedBitSet.copyOf(new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return fixedBitSet.get(index);\n      }\n\n      @Override\n      public int length() {\n        return fixedBitSet.length();\n      }\n    });\n\n    assertNotSame(mutableCopy, mutableCopy1);\n    assertNotSame(fixedBitSet, mutableCopy1);\n    assertEquals(mutableCopy1, mutableCopy);\n    assertEquals(mutableCopy1, fixedBitSet);\n  }\n\n","sourceOld":"  public void testCopyOf() {\n    Random random = random();\n    int numBits = TestUtil.nextInt(random, 1000, 2000);\n    int count = TestUtil.nextInt(random, 0, numBits - 1);\n    int[] bits = makeIntArray(random, count, 0, numBits - 1);\n    FixedBitSet fixedBitSet = makeFixedBitSet(bits, numBits);\n\n    FixedBitSet mutableCopy = FixedBitSet.copyOf(fixedBitSet);\n    assertNotSame(mutableCopy, fixedBitSet);\n    assertEquals(mutableCopy, fixedBitSet);\n\n    FixedBitSet mutableCopy1 = FixedBitSet.copyOf(new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return fixedBitSet.get(index);\n      }\n\n      @Override\n      public int length() {\n        return fixedBitSet.length();\n      }\n    });\n\n    assertNotSame(mutableCopy, mutableCopy1);\n    assertNotSame(fixedBitSet, mutableCopy1);\n    assertEquals(mutableCopy1, mutableCopy);\n    assertEquals(mutableCopy1, fixedBitSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"858adca70b05a27f5e0996d8d62c95172b695210","date":1526486059,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testCopyOf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testCopyOf().mjava","sourceNew":"  public void testCopyOf() {\n    Random random = random();\n    int numBits = TestUtil.nextInt(random, 1000, 2000);\n    int count = TestUtil.nextInt(random, 0, numBits - 1);\n    int[] bits = makeIntArray(random, count, 0, numBits - 1);\n    FixedBitSet fixedBitSet = new FixedBitSet(numBits);\n    for (int e : bits) {\n      fixedBitSet.set(e);\n    }\n    for (boolean readOnly : new boolean[] {false, true}) {\n      Bits bitsToCopy = readOnly ? fixedBitSet.asReadOnlyBits() : fixedBitSet;\n      FixedBitSet mutableCopy = FixedBitSet.copyOf(bitsToCopy);\n      assertNotSame(mutableCopy, bitsToCopy);\n      assertEquals(mutableCopy, fixedBitSet);\n    }\n\n    final Bits bitsToCopy = new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return fixedBitSet.get(index);\n      }\n\n      @Override\n      public int length() {\n        return fixedBitSet.length();\n      }\n    };\n    FixedBitSet mutableCopy = FixedBitSet.copyOf(bitsToCopy);\n\n    assertNotSame(bitsToCopy, mutableCopy);\n    assertNotSame(fixedBitSet, mutableCopy);\n    assertEquals(mutableCopy, fixedBitSet);\n  }\n\n","sourceOld":"  public void testCopyOf() {\n    Random random = random();\n    int numBits = TestUtil.nextInt(random, 1000, 2000);\n    int count = TestUtil.nextInt(random, 0, numBits - 1);\n    int[] bits = makeIntArray(random, count, 0, numBits - 1);\n    FixedBitSet fixedBitSet = new FixedBitSet(numBits);\n    for (int e : bits) {\n      fixedBitSet.set(e);\n    }\n    FixedBitSet mutableCopy = FixedBitSet.copyOf(fixedBitSet);\n    assertNotSame(mutableCopy, fixedBitSet);\n    assertEquals(mutableCopy, fixedBitSet);\n\n    FixedBitSet mutableCopy1 = FixedBitSet.copyOf(new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return fixedBitSet.get(index);\n      }\n\n      @Override\n      public int length() {\n        return fixedBitSet.length();\n      }\n    });\n\n    assertNotSame(mutableCopy, mutableCopy1);\n    assertNotSame(fixedBitSet, mutableCopy1);\n    assertEquals(mutableCopy1, mutableCopy);\n    assertEquals(mutableCopy1, fixedBitSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"858adca70b05a27f5e0996d8d62c95172b695210":["343225ab8d252d23fe15d7009ec76fc99c199cf3"],"343225ab8d252d23fe15d7009ec76fc99c199cf3":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["858adca70b05a27f5e0996d8d62c95172b695210"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"858adca70b05a27f5e0996d8d62c95172b695210":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"343225ab8d252d23fe15d7009ec76fc99c199cf3":["858adca70b05a27f5e0996d8d62c95172b695210"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["343225ab8d252d23fe15d7009ec76fc99c199cf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}