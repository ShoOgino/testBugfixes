{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String,FacetRangeMethod).mjava","commits":[{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String,FacetRangeMethod).mjava","pathOld":"/dev/null","sourceNew":"   private void helpTestFractionalNumberRangeFacets(final String fieldName, FacetRangeMethod method) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.method\", method.toString()\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e135e47842b3fd6a4797b7e4787241b06817efa2"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}