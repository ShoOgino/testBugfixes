{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#testWhiteboxSanityMethodProcessorDebug().mjava","commits":[{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv#testWhiteboxSanityMethodProcessorDebug().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sanity check that our method of varying the <code>method</code> param\n   * works and can be verified by inspecting the debug output of basic requests.\n   */\n  public void testWhiteboxSanityMethodProcessorDebug() throws Exception {\n    // NOTE: json.facet debugging output can be wonky, particularly when dealing with cloud\n    // so for these queries we keep it simple:\n    // - only one \"top\" facet per request\n    // - no refinement\n    // even with those constraints in place, a single facet can (may/sometimes?) produce multiple debug\n    // blocks - aparently due to shard merging? So...\n    // - only inspect the \"first\" debug NamedList in the results\n    //\n    \n    // simple individual facet that sorts on an skg stat...\n    final TermFacet f = new TermFacet(soloStrField(9), 10, 0, \"skg desc\", null);\n    final Map<String,TermFacet> facets = new LinkedHashMap<>();\n    facets.put(\"str\", f);\n    \n    final SolrParams facetParams = params(\"rows\",\"0\",\n                                          \"debug\",\"true\", // SOLR-14451\n                                          // *:* is the only \"safe\" query for this test,\n                                          // to ensure we always have at least one bucket for every facet\n                                          // so we can be confident in getting the debug we expect...\n                                          \"q\", \"*:*\",\n                                          \"fore\", multiStrField(7)+\":11\",\n                                          \"back\", \"*:*\",\n                                          \"json.facet\", Facet.toJSONFacetParamValue(facets));\n    \n    { // dv \n      final SolrParams params = SolrParams.wrapDefaults(params(\"method_val\", \"dv\"),\n                                                        facetParams);\n      final NamedList<Object> debug = getFacetDebug(params);\n      assertEquals(FacetFieldProcessorByArrayDV.class.getSimpleName(), debug.get(\"processor\"));\n    }\n    { // dvhash\n      final SolrParams params = SolrParams.wrapDefaults(params(\"method_val\", \"dvhash\"),\n                                                        facetParams);\n      final NamedList<Object> debug = getFacetDebug(params);\n      assertEquals(FacetFieldProcessorByHashDV.class.getSimpleName(), debug.get(\"processor\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}