{"path":"solr/core/src/java/org/apache/solr/cluster/placement/impl/PlacementPluginConfigImpl#createConfigFromProperties(Map[String,Object]).mjava","commits":[{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/impl/PlacementPluginConfigImpl#createConfigFromProperties(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Parses the {@link Map} obtained as the value for key {@link #PLACEMENT_PLUGIN_CONFIG_KEY} from\n   * the {@code clusterprops.json} configuration {@link Map} (obtained by calling\n   * {@link org.apache.solr.client.solrj.impl.ClusterStateProvider#getClusterProperties()}) and translates it into a\n   * configuration consumable by the plugin (and that will not change as Solr changes internally how and where it stores\n   * configuration).</p>\n   *\n   * <p>Configuration properties {@code class} and {@code name} are reserved: for defining the plugin factory class and\n   * a human readable plugin name. All other properties are plugin specific.</p>\n   *\n   * <p>See configuration example and how-to in {@link SamplePluginAffinityReplicaPlacement}.</p>\n   */\n  static PlacementPluginConfig createConfigFromProperties(Map<String, Object> pluginConfig) {\n    final Map<String, String> stringConfigs = new HashMap<>();\n    final Map<String, Long> longConfigs = new HashMap<>();\n    final Map<String, Boolean> boolConfigs = new HashMap<>();\n    final Map<String, Double> doubleConfigs = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : pluginConfig.entrySet()) {\n      String key = e.getKey();\n      if (CONFIG_CLASS.equals(key)) {\n        continue;\n      }\n\n      if (key == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing config name attribute in parameter of \" + PLACEMENT_PLUGIN_CONFIG_KEY);\n      }\n\n      Object value = e.getValue();\n\n      if (value == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing config value for parameter \" + key + \" of \" + PLACEMENT_PLUGIN_CONFIG_KEY);\n      }\n\n      if (value instanceof String) {\n        stringConfigs.put(key, (String) value);\n      } else if (value instanceof Long) {\n        longConfigs.put(key, (Long) value);\n      } else if (value instanceof Boolean) {\n        boolConfigs.put(key, (Boolean) value);\n      } else if (value instanceof Double) {\n        doubleConfigs.put(key, (Double) value);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported config type \" + value.getClass().getName() +\n            \" for parameter \" + key + \" of \" + PLACEMENT_PLUGIN_CONFIG_KEY);\n      }\n    }\n\n    return new PlacementPluginConfigImpl(stringConfigs, longConfigs, boolConfigs, doubleConfigs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":0,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/impl/PlacementPluginConfigImpl#createConfigFromProperties(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Parses the {@link Map} obtained as the value for key {@link #PLACEMENT_PLUGIN_CONFIG_KEY} from\n   * the {@code clusterprops.json} configuration {@link Map} (obtained by calling\n   * {@link org.apache.solr.client.solrj.impl.ClusterStateProvider#getClusterProperties()}) and translates it into a\n   * configuration consumable by the plugin (and that will not change as Solr changes internally how and where it stores\n   * configuration).</p>\n   *\n   * <p>Configuration properties {@code class} and {@code name} are reserved: for defining the plugin factory class and\n   * a human readable plugin name. All other properties are plugin specific.</p>\n   *\n   * <p>See configuration example and how-to in {@link SamplePluginAffinityReplicaPlacement}.</p>\n   */\n  static PlacementPluginConfig createConfigFromProperties(Map<String, Object> pluginConfig) {\n    final Map<String, String> stringConfigs = new HashMap<>();\n    final Map<String, Long> longConfigs = new HashMap<>();\n    final Map<String, Boolean> boolConfigs = new HashMap<>();\n    final Map<String, Double> doubleConfigs = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : pluginConfig.entrySet()) {\n      String key = e.getKey();\n      if (CONFIG_CLASS.equals(key)) {\n        continue;\n      }\n\n      if (key == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing config name attribute in parameter of \" + PLACEMENT_PLUGIN_CONFIG_KEY);\n      }\n\n      Object value = e.getValue();\n\n      if (value == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing config value for parameter \" + key + \" of \" + PLACEMENT_PLUGIN_CONFIG_KEY);\n      }\n\n      if (value instanceof String) {\n        stringConfigs.put(key, (String) value);\n      } else if (value instanceof Long) {\n        longConfigs.put(key, (Long) value);\n      } else if (value instanceof Boolean) {\n        boolConfigs.put(key, (Boolean) value);\n      } else if (value instanceof Double) {\n        doubleConfigs.put(key, (Double) value);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported config type \" + value.getClass().getName() +\n            \" for parameter \" + key + \" of \" + PLACEMENT_PLUGIN_CONFIG_KEY);\n      }\n    }\n\n    return new PlacementPluginConfigImpl(stringConfigs, longConfigs, boolConfigs, doubleConfigs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}