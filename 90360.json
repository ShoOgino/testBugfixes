{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","commits":[{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"/dev/null","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"/dev/null","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"/dev/null","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create() {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setConfigName(config);\n    create.setCollectionName(name);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    miniCluster.waitForActiveCollection(name, 1, 1);\n    \n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n\n","sourceOld":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#create1ShardCollection(String,String,MiniSolrCloudCluster).mjava","sourceNew":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    response = create.process(solrCluster.getSolrClient());\n\n    miniCluster.waitForActiveCollection(name, 1, 1);\n    \n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n\n","sourceOld":"  private void create1ShardCollection(String name, String config, MiniSolrCloudCluster solrCluster) throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create(name,config,1,1,0,0) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams msp = new ModifiableSolrParams(super.getParams());\n        msp.set(USER_PARAM, \"user\");\n        return msp;\n      }\n    };\n    create.setMaxShardsPerNode(1);\n    response = create.process(solrCluster.getSolrClient());\n\n    miniCluster.waitForActiveCollection(name, 1, 1);\n    \n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3217321f3e1d7922898c6c633d17acfa840d6875"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","ac97ea104d893f16aab430d9904473bc1f233f3c"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","3217321f3e1d7922898c6c633d17acfa840d6875"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3217321f3e1d7922898c6c633d17acfa840d6875":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}