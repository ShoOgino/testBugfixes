{"path":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","commits":[{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newInetAddressRange(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for addresses indexed with {@link InetAddressPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newInetAddressRange(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newInetAddressRange(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for addresses indexed with {@link InetAddressPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newInetAddressRange(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newDoubleRange(String,Double,boolean,Double,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for double values indexed with {@link DoublePoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiDoubleRange newMultiDoubleRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newDoubleRange(String field, Double lowerValue, boolean lowerInclusive, Double upperValue, boolean upperInclusive) {\n    return newMultiDoubleRange(field, \n                            new Double[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Double[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newLongRange(String,Long,boolean,Long,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for long values indexed with {@link LongPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiLongRange newMultiLongRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newLongRange(String field, Long lowerValue, boolean lowerInclusive, Long upperValue, boolean upperInclusive) {\n    return newMultiLongRange(field, \n                             new Long[] { lowerValue },\n                             new boolean[] { lowerInclusive }, \n                             new Long[] { upperValue },\n                             new boolean[] { upperInclusive });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b","dd4aa10c3623b9da92a555b8d04677af8fe86877"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0a21baa7591e89ae2649015a5a3db64cbe87a73","date":1456346302,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = InetAddressPoint.encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = InetAddressPoint.encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["606ea169579957651185909e7264798e99e714f9","606ea169579957651185909e7264798e99e714f9","606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#newRangeQuery(String,InetAddress,boolean,InetAddress,boolean).mjava","sourceNew":"  /** \n   * Create a range query for network addresses.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be null.\n   * @param upperValue upper portion of the range (inclusive). must not be null.\n   * @throws IllegalArgumentException if {@code field} is null, {@code lowerValue} is null, \n   *                                  or {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, InetAddress upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    byte[][] lowerBytes = new byte[1][];\n    lowerBytes[0] = encode(lowerValue);\n    byte[][] upperBytes = new byte[1][];\n    upperBytes[0] = encode(upperValue);\n    return new PointRangeQuery(field, lowerBytes, upperBytes) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a range query for network addresses.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, InetAddress lowerValue, boolean lowerInclusive, InetAddress upperValue, boolean upperInclusive) {\n    byte[][] lowerBytes = new byte[1][];\n    if (lowerValue != null) {\n      lowerBytes[0] = encode(lowerValue);\n    }\n    byte[][] upperBytes = new byte[1][];\n    if (upperValue != null) {\n      upperBytes[0] = encode(upperValue);\n    }\n    return new PointRangeQuery(field, lowerBytes, new boolean[] { lowerInclusive }, upperBytes, new boolean[] { upperInclusive }) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return decode(value).getHostAddress(); // for ranges, the range itself is already bracketed\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"c422e924212367b334b4938f1fd3e44438e88c40":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0a21baa7591e89ae2649015a5a3db64cbe87a73":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"c0a21baa7591e89ae2649015a5a3db64cbe87a73":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["c0a21baa7591e89ae2649015a5a3db64cbe87a73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}