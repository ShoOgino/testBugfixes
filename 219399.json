{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(baseUrl, httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e605d5d76b951a56badc9b8d630a3657aff0f8","date":1435095621,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4","date":1452195469,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        try {\n          EntityUtils.consume(entity);\n        } catch (IOException e) {\n          log.error(\"Error consuming and closing http response stream.\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c787dc902884220111b2b719b1bcf15d1506c298","date":1455136376,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        try {\n          EntityUtils.consume(entity);\n        } catch (IOException e) {\n          log.error(\"Error consuming and closing http response stream.\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext(this);\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext(this);\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method, HttpClientUtil.createNewHttpClientRequestContext());\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa113475b0d7da1c7f347c5c0014c210851f7c0","date":1495464242,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","date":1497937593,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":null,"sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4":["29e605d5d76b951a56badc9b8d630a3657aff0f8"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"9fa113475b0d7da1c7f347c5c0014c210851f7c0":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"91814ce09be68efd0626969632e79ae47d8876d4":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c787dc902884220111b2b719b1bcf15d1506c298":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["9fa113475b0d7da1c7f347c5c0014c210851f7c0"],"29e605d5d76b951a56badc9b8d630a3657aff0f8":["91814ce09be68efd0626969632e79ae47d8876d4"],"28288370235ed02234a64753cdbf0c6ec096304a":["9fa113475b0d7da1c7f347c5c0014c210851f7c0","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","9fa113475b0d7da1c7f347c5c0014c210851f7c0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","91814ce09be68efd0626969632e79ae47d8876d4"],"859081acf00749f5dd462772c571d611d4a4d2db":["c787dc902884220111b2b719b1bcf15d1506c298"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4":["c787dc902884220111b2b719b1bcf15d1506c298"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9fa113475b0d7da1c7f347c5c0014c210851f7c0":["2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["9fa113475b0d7da1c7f347c5c0014c210851f7c0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"91814ce09be68efd0626969632e79ae47d8876d4":["29e605d5d76b951a56badc9b8d630a3657aff0f8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"bafca15d8e408346a67f4282ad1143b88023893b":["91814ce09be68efd0626969632e79ae47d8876d4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c787dc902884220111b2b719b1bcf15d1506c298":["859081acf00749f5dd462772c571d611d4a4d2db"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"29e605d5d76b951a56badc9b8d630a3657aff0f8":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["070b525fb213c5643ba35e1b60f1a1d4f7b23312","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}