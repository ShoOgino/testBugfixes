{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","commits":[{"id":"b046c3e04315940a761d69bb348c761c11d995d4","date":1347605712,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,String).mjava","sourceNew":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  private int getWordFreqForClass(String word, String c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    return indexSearcher.search(booleanQuery, 1).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","sourceNew":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","date":1383406909,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","sourceNew":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery subQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n     subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery, BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7533828cbcc5f498a44cca5d9bce92692663778","date":1408525002,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","sourceNew":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery subQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery, BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery subQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n     subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery, BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","sourceNew":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery subQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery, BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery, totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","sourceNew":"  /**\n   * Returns the number of documents of the input class ( from the whole index or from a subset)\n   * that contains the word ( in a specific field or in all the fields if no one selected)\n   * @param word the token produced by the analyzer\n   * @param c the class\n   * @return the number of documents of the input class\n   * @throws IOException if a low level I/O problem happens\n   */\n  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,Term).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getWordFreqForClass(String,BytesRef).mjava","sourceNew":"  /**\n   * Returns the number of documents of the input class ( from the whole index or from a subset)\n   * that contains the word ( in a specific field or in all the fields if no one selected)\n   * @param word the token produced by the analyzer\n   * @param term the term representing the class\n   * @return the number of documents of the input class\n   * @throws IOException if a low level I/O problem happens\n   */\n  private int getWordFreqForClass(String word, Term term) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents of the input class ( from the whole index or from a subset)\n   * that contains the word ( in a specific field or in all the fields if no one selected)\n   * @param word the token produced by the analyzer\n   * @param c the class\n   * @return the number of documents of the input class\n   * @throws IOException if a low level I/O problem happens\n   */\n  private int getWordFreqForClass(String word, BytesRef c) throws IOException {\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    BooleanQuery.Builder subQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      subQuery.add(new BooleanClause(new TermQuery(new Term(textFieldName, word)), BooleanClause.Occur.SHOULD));\n    }\n    booleanQuery.add(new BooleanClause(subQuery.build(), BooleanClause.Occur.MUST));\n    booleanQuery.add(new BooleanClause(new TermQuery(new Term(classFieldName, c)), BooleanClause.Occur.MUST));\n    if (query != null) {\n      booleanQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n    indexSearcher.search(booleanQuery.build(), totalHitCountCollector);\n    return totalHitCountCollector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e7533828cbcc5f498a44cca5d9bce92692663778"],"e7533828cbcc5f498a44cca5d9bce92692663778":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["134a24d0cb66520908d88384f1a559875704ed25"],"b046c3e04315940a761d69bb348c761c11d995d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["b046c3e04315940a761d69bb348c761c11d995d4"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"134a24d0cb66520908d88384f1a559875704ed25":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38b5bd3ae837751f57f363e9a41b833794222814"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["134a24d0cb66520908d88384f1a559875704ed25"],"e7533828cbcc5f498a44cca5d9bce92692663778":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b046c3e04315940a761d69bb348c761c11d995d4"],"38b5bd3ae837751f57f363e9a41b833794222814":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b046c3e04315940a761d69bb348c761c11d995d4":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["e7533828cbcc5f498a44cca5d9bce92692663778"],"134a24d0cb66520908d88384f1a559875704ed25":["38b5bd3ae837751f57f363e9a41b833794222814"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}