{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    byte[] minPacked = new byte[packedBytesLength];\n    byte[] maxPacked = new byte[packedBytesLength];\n    Arrays.fill(maxPacked, (byte) 0xff);\n    intersect(minPacked, maxPacked, visitor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    intersect(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    byte[] minPacked = new byte[packedBytesLength];\n    byte[] maxPacked = new byte[packedBytesLength];\n    Arrays.fill(maxPacked, (byte) 0xff);\n    intersect(minPacked, maxPacked, visitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9f70b31079ec002469ee49df3b8f9bd8d10df23","date":1447755747,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), numDims,\n                                              packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    intersect(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    intersect(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), numDims,\n                                              packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    intersect(state, 1, minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), numDims,\n                                              packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    intersect(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), numDims,\n                                              packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    intersect(state, 1, minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), numDims,\n                                              packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    intersect(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), 1, minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    IntersectState state = new IntersectState(in.clone(), numDims,\n                                              packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              visitor);\n    intersect(state, 1, minPackedValue, maxPackedValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), 1, minPackedValue, maxPackedValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), 1, minPackedValue, maxPackedValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  @Override\n  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), minPackedValue, maxPackedValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectVisitor).mjava","sourceNew":"  @Override\n  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), minPackedValue, maxPackedValue);\n  }\n\n","sourceOld":"  public void intersect(IntersectVisitor visitor) throws IOException {\n    intersect(getIntersectState(visitor), minPackedValue, maxPackedValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"9856095f7afb5a607bf5e65077615ed91273508c":["b01431682e11036a1a7d757a3fa7c1f903fb2c45","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b9f70b31079ec002469ee49df3b8f9bd8d10df23","879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"302d34f2c66e8d489ee13078305c330cbf67b226":["9856095f7afb5a607bf5e65077615ed91273508c","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","9856095f7afb5a607bf5e65077615ed91273508c"],"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9856095f7afb5a607bf5e65077615ed91273508c":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}