{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}