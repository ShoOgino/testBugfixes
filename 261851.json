{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","commits":[{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(\"id\");\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValues[k] != null) {\n              sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n            }\n          }\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bab0702ffbb627ce10bd5af1c669b3c1f999002","date":1487156075,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","sourceNew":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(\"id\");\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          sortValues[k] = ShardResultTransformerUtils.unmarshalSortValue(sortValues[k], field);\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","sourceOld":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(\"id\");\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValues[k] != null) {\n              sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n            }\n          }\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","sourceNew":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(ID);\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          sortValues[k] = ShardResultTransformerUtils.unmarshalSortValue(sortValues[k], field);\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","sourceOld":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(\"id\");\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          sortValues[k] = ShardResultTransformerUtils.unmarshalSortValue(sortValues[k], field);\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNativeShardDoc(List[NamedList[Object]],Sort,String,IndexSchema).mjava","sourceNew":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(ID);\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          sortValues[k] = ShardResultTransformerUtils.unmarshalSortValue(sortValues[k], field);\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","sourceOld":"  protected ScoreDoc[] transformToNativeShardDoc(List<NamedList<Object>> documents, Sort groupSort, String shard,\n                                                 IndexSchema schema) {\n    ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n    int j = 0;\n    for (NamedList<Object> document : documents) {\n      Object docId = document.get(\"id\");\n      if (docId != null) {\n        docId = docId.toString();\n      } else {\n        log.error(\"doc {} has null 'id'\", document);\n      }\n      Float score = (Float) document.get(\"score\");\n      if (score == null) {\n        score = Float.NaN;\n      }\n      Object[] sortValues = null;\n      Object sortValuesVal = document.get(\"sortValues\");\n      if (sortValuesVal != null) {\n        sortValues = ((List) sortValuesVal).toArray();\n        for (int k = 0; k < sortValues.length; k++) {\n          SchemaField field = groupSort.getSort()[k].getField() != null\n              ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n          sortValues[k] = ShardResultTransformerUtils.unmarshalSortValue(sortValues[k], field);\n        }\n      } else {\n        log.debug(\"doc {} has null 'sortValues'\", document);\n      }\n      scoreDocs[j++] = new ShardDoc(score, sortValues, docId, shard);\n    }\n    return scoreDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bab0702ffbb627ce10bd5af1c669b3c1f999002":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"5bab0702ffbb627ce10bd5af1c669b3c1f999002":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}