{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","commits":[{"id":"4ba19267cba8a08940edd30c894796d6e7899530","date":1267870049,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n      true, MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n      true, MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n      true, MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n      true, MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(Double.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"long\").setLongValue(Long.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"double\").setDoubleValue(0.0));\n    doc.add(new NumericField(\"long\").setLongValue(0L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["4ba19267cba8a08940edd30c894796d6e7899530"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4ba19267cba8a08940edd30c894796d6e7899530":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ba19267cba8a08940edd30c894796d6e7899530"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4ba19267cba8a08940edd30c894796d6e7899530":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}