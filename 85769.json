{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e470e29caa5c5200b096b6e282e9e657bc591bfb","date":1269888021,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean,int,int).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat The latitude to search around\n   * @param lng the Longitude to search around\n   * @param miles The radius to search within\n   * @param latField The name of the field containing the latitude\n   * @param lngField The name of the field containing the longitude\n   * @param tierFieldPrefix The prefix of the tier\n   * @param needPrecise if true, then distance is calculated in addition to tier info\n   * @param minTierIndexed The minimum tier level indexed\n   * @param maxTierIndexed The maximum tier level indexed\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise, int minTierIndexed, int maxTierIndexed) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix, minTierIndexed, maxTierIndexed);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e470e29caa5c5200b096b6e282e9e657bc591bfb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e470e29caa5c5200b096b6e282e9e657bc591bfb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e470e29caa5c5200b096b6e282e9e657bc591bfb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e470e29caa5c5200b096b6e282e9e657bc591bfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}