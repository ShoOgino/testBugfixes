{"path":"src/java/org/apache/lucene/index/DirectoryIndexReader#acquireWriteLock().mjava","commits":[{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#acquireWriteLock().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n  \n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n  \n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n  \n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n  \n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n  \n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n  \n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n  \n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n  \n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}