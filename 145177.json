{"path":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testForceMerge().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testForceMerge() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.forceMerge(1);\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testForceMerge().mjava","sourceNew":null,"sourceOld":"  public void testForceMerge() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.forceMerge(1);\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["319624eb66a10b717d3e66af448543e7dc5c479d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"319624eb66a10b717d3e66af448543e7dc5c479d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["319624eb66a10b717d3e66af448543e7dc5c479d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}