{"path":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated use EntryCreator version\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated use EntryCreator version\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = field;\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = field;\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.type = this.creator.getSortType();\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = field;\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = field;\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.type = this.creator.getSortType();\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = field;\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.type = this.creator.getSortType();\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = StringHelper.intern(field);\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.type = INT;\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.type = FLOAT;\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.type = SHORT;\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.type = BYTE;\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.type = LONG;\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.type = DOUBLE;\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   *  \n   *  @deprecated (4.0) use EntryCreator version\n   */\n  @Deprecated\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (field == null) {\n      throw new IllegalArgumentException(\"field can only be null when type is SCORE or DOC\");\n    } \n    this.field = field;\n    this.reverse = reverse;\n    \n    if (parser instanceof FieldCache.IntParser) {\n      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );\n    }\n    else if (parser instanceof FieldCache.FloatParser) {\n      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );\n    }\n    else if (parser instanceof FieldCache.ShortParser) {\n      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );\n    }\n    else if (parser instanceof FieldCache.ByteParser) {\n      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );\n    }\n    else if (parser instanceof FieldCache.LongParser) {\n      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );\n    }\n    else if (parser instanceof FieldCache.DoubleParser) {\n      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );\n    }\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.type = this.creator.getSortType();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["382fe3a6ca9745891afebda9b9a57cc158305545"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"2553b00f699380c64959ccb27991289aae87be2e":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"382fe3a6ca9745891afebda9b9a57cc158305545":["090a0320e4de4a3674376aef96b9701f47564f86"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["4e8cc373c801e54cec75daf9f52792cb4b17f536","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["068265517d1fbc623f5aeaee57fcd8df925678e4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["090a0320e4de4a3674376aef96b9701f47564f86"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","d083e83f225b11e5fdd900e83d26ddb385b6955c","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["2553b00f699380c64959ccb27991289aae87be2e"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}