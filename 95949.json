{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","commits":[{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<SpatialTestData>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","sourceNew":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<SpatialTestData>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","sourceNew":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","sourceNew":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","sourceNew":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestData#getTestData(InputStream,SpatialContext).mjava","sourceNew":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /** Reads the stream, consuming a format that is a tab-separated values of 3 columns:\n   * an \"id\", a \"name\" and the \"shape\".  Empty lines and lines starting with a '#' are skipped.\n   * The stream is closed.\n   */\n  public static Iterator<SpatialTestData> getTestData(InputStream in, SpatialContext ctx) throws IOException {\n    List<SpatialTestData> results = new ArrayList<>();\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = bufInput.readLine()) != null) {\n        if (line.length() == 0 || line.charAt(0) == '#')\n          continue;\n\n        SpatialTestData data = new SpatialTestData();\n        String[] vals = line.split(\"\\t\");\n        if (vals.length != 3)\n          throw new RuntimeException(\"bad format; expecting 3 tab-separated values for line: \"+line);\n        data.id = vals[0];\n        data.name = vals[1];\n        try {\n          data.shape = ctx.readShapeFromWkt(vals[2]);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n        results.add(data);\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"af2638813028b254a88b418ebeafb541afb49653":["9d3d365762604952e436b51980101dfc84cc1b3e","112d77ac8d3e10a362516ad834c9a11d35c94234"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}