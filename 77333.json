{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory#ICUTransformFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory#ICUTransformFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: add support for custom rules\n  /** Creates a new ICUTransformFilterFactory */\n  public ICUTransformFilterFactory(Map<String,String> args) {\n    super(args);\n    String id = args.remove(\"id\");\n    if (id == null) {\n      throw new IllegalArgumentException(\"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.remove(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new IllegalArgumentException(\"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  // TODO: add support for custom rules\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String id = args.get(\"id\");\n    if (id == null) {\n      throw new IllegalArgumentException(\"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.get(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new IllegalArgumentException(\"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory#ICUTransformFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory#ICUTransformFilterFactory(Map[String,String]).mjava","sourceNew":"  // TODO: add support for custom rules\n  /** Creates a new ICUTransformFilterFactory */\n  public ICUTransformFilterFactory(Map<String,String> args) {\n    super(args);\n    String id = require(args, \"id\");\n    String direction = get(args, \"direction\", Arrays.asList(\"forward\", \"reverse\"), \"forward\", false);\n    int dir = \"forward\".equals(direction) ? Transliterator.FORWARD : Transliterator.REVERSE;\n    transliterator = Transliterator.getInstance(id, dir);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  // TODO: add support for custom rules\n  /** Creates a new ICUTransformFilterFactory */\n  public ICUTransformFilterFactory(Map<String,String> args) {\n    super(args);\n    String id = args.remove(\"id\");\n    if (id == null) {\n      throw new IllegalArgumentException(\"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.remove(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new IllegalArgumentException(\"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcae30df9fe9300569835aef42ec65802c7c0afb"]},"commit2Childs":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}