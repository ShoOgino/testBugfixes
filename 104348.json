{"path":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ca0e073c286ebb2c89364ada6dd2740fc18880","date":1453996944,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a4140b15efc64fe1f3dc86b79679d3474add50","date":1457130322,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointReader reader : mergeState.pointReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointReader reader : mergeState.pointReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointsReader reader : mergeState.pointsReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointReader reader : mergeState.pointReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a4140b15efc64fe1f3dc86b79679d3474add50":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"922ddd897402a6df25c766ea8300443be5e82b3d":["8d15e34266d75e4e8b95da046cd0afc812367b38","11a4140b15efc64fe1f3dc86b79679d3474add50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"85ca0e073c286ebb2c89364ada6dd2740fc18880":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","85ca0e073c286ebb2c89364ada6dd2740fc18880"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"11a4140b15efc64fe1f3dc86b79679d3474add50":["922ddd897402a6df25c766ea8300443be5e82b3d"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","85ca0e073c286ebb2c89364ada6dd2740fc18880","8d15e34266d75e4e8b95da046cd0afc812367b38"],"922ddd897402a6df25c766ea8300443be5e82b3d":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"85ca0e073c286ebb2c89364ada6dd2740fc18880":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["11a4140b15efc64fe1f3dc86b79679d3474add50","922ddd897402a6df25c766ea8300443be5e82b3d","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}