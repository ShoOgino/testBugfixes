{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d0b4707f3bab526e78877bedeebf53368dbc3d7","date":1524706692,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, manhattan()), \" +\n                       \"j=distance(a, c, manhattan()),\" +\n                       \"k=distance(b, c, manhattan()),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, manhattan()),\" +\n                       \"n=distance(a, b, canberra()), \" +\n                       \"o=distance(a, c, canberra()),\" +\n                       \"p=distance(b, c, canberra()),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, canberra()),\" +\n                       \"s=distance(a, b, earthMovers()), \" +\n                       \"t=distance(a, c, earthMovers()),\" +\n                       \"u=distance(b, c, earthMovers()),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, earthMovers()),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"960f089602da7f0df48fb0e23de1ecbc791b95f0","date":1524725963,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, manhattan()), \" +\n                       \"j=distance(a, c, manhattan()),\" +\n                       \"k=distance(b, c, manhattan()),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, manhattan()),\" +\n                       \"n=distance(a, b, canberra()), \" +\n                       \"o=distance(a, c, canberra()),\" +\n                       \"p=distance(b, c, canberra()),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, canberra()),\" +\n                       \"s=distance(a, b, earthMovers()), \" +\n                       \"t=distance(a, c, earthMovers()),\" +\n                       \"u=distance(b, c, earthMovers()),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, earthMovers()),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, type=manhattan), \" +\n                       \"j=distance(a, c, type=manhattan),\" +\n                       \"k=distance(b, c, type=manhattan),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, type=manhattan),\" +\n                       \"n=distance(a, b, type=canberra), \" +\n                       \"o=distance(a, c, type=canberra),\" +\n                       \"p=distance(b, c, type=canberra),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, type=canberra),\" +\n                       \"s=distance(a, b, type=earthMovers), \" +\n                       \"t=distance(a, c, type=earthMovers),\" +\n                       \"u=distance(b, c, type=earthMovers),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, type=earthMovers),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistance().mjava","sourceNew":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, manhattan()), \" +\n                       \"j=distance(a, c, manhattan()),\" +\n                       \"k=distance(b, c, manhattan()),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, manhattan()),\" +\n                       \"n=distance(a, b, canberra()), \" +\n                       \"o=distance(a, c, canberra()),\" +\n                       \"p=distance(b, c, canberra()),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, canberra()),\" +\n                       \"s=distance(a, b, earthMovers()), \" +\n                       \"t=distance(a, c, earthMovers()),\" +\n                       \"u=distance(b, c, earthMovers()),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, earthMovers()),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testDistance() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=array(1,2,3,4),\" +\n                       \"b=array(2,3,4,5), \" +\n                       \"c=array(3,4,5,6), \" +\n                       \"d=distance(a, b), \" +\n                       \"e=distance(a, c),\" +\n                       \"f=distance(b, c),\" +\n                       \"g=transpose(matrix(a, b, c)),\" +\n                       \"h=distance(g),\" +\n                       \"i=distance(a, b, manhattan()), \" +\n                       \"j=distance(a, c, manhattan()),\" +\n                       \"k=distance(b, c, manhattan()),\" +\n                       \"l=transpose(matrix(a, b, c)),\" +\n                       \"m=distance(l, manhattan()),\" +\n                       \"n=distance(a, b, canberra()), \" +\n                       \"o=distance(a, c, canberra()),\" +\n                       \"p=distance(b, c, canberra()),\" +\n                       \"q=transpose(matrix(a, b, c)),\" +\n                       \"r=distance(q, canberra()),\" +\n                       \"s=distance(a, b, earthMovers()), \" +\n                       \"t=distance(a, c, earthMovers()),\" +\n                       \"u=distance(b, c, earthMovers()),\" +\n                       \"w=transpose(matrix(a, b, c)),\" +\n                       \"x=distance(w, earthMovers()),\" +\n                       \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number d = (Number)tuples.get(0).get(\"d\");\n    assertEquals(d.doubleValue(), 2.0, 0.0);\n    Number e = (Number)tuples.get(0).get(\"e\");\n    assertEquals(e.doubleValue(), 4.0, 0.0);\n    Number f = (Number)tuples.get(0).get(\"f\");\n    assertEquals(f.doubleValue(), 2.0, 0.0);\n\n    List<List<Number>> h = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(h.size(), 3);\n    assertEquals(h.get(0).size(), 3);\n    List<Number> row0 = h.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 2, 0);\n    assertEquals(row0.get(2).doubleValue(), 4, 0);\n\n    List<Number> row1 = h.get(1);\n    assertEquals(row1.get(0).doubleValue(), 2, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2, 0);\n\n    List<Number> row2 = h.get(2);\n    assertEquals(row2.get(0).doubleValue(), 4, 0);\n    assertEquals(row2.get(1).doubleValue(), 2, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number i = (Number)tuples.get(0).get(\"i\");\n    assertEquals(i.doubleValue(), 4.0, 0.0);\n    Number j = (Number)tuples.get(0).get(\"j\");\n    assertEquals(j.doubleValue(), 8.0, 0.0);\n    Number k = (Number)tuples.get(0).get(\"k\");\n    assertEquals(k.doubleValue(), 4.0, 0.0);\n\n    List<List<Number>> m = (List<List<Number>>)tuples.get(0).get(\"m\");\n    assertEquals(m.size(), 3);\n    assertEquals(m.get(0).size(), 3);\n    row0 = m.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 4, 0);\n    assertEquals(row0.get(2).doubleValue(), 8, 0);\n\n    row1 = m.get(1);\n    assertEquals(row1.get(0).doubleValue(), 4, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 4, 0);\n\n    row2 = m.get(2);\n    assertEquals(row2.get(0).doubleValue(), 8, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n    Number n = (Number)tuples.get(0).get(\"n\");\n    assertEquals(n.doubleValue(), 0.787302, 0.0001);\n    Number o = (Number)tuples.get(0).get(\"o\");\n    assertEquals(o.doubleValue(), 1.283333, 0.0001);\n    Number p = (Number)tuples.get(0).get(\"p\");\n    assertEquals(p.doubleValue(), 0.544877, 0.0001);\n\n    List<List<Number>> r = (List<List<Number>>)tuples.get(0).get(\"r\");\n    assertEquals(r.size(), 3);\n    assertEquals(r.get(0).size(), 3);\n    row0 = r.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 0.787302, .0001);\n    assertEquals(row0.get(2).doubleValue(), 1.283333, .0001);\n\n    row1 = r.get(1);\n    assertEquals(row1.get(0).doubleValue(), 0.787302, .0001);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 0.544877, .0001);\n\n    row2 = r.get(2);\n    assertEquals(row2.get(0).doubleValue(), 1.283333, .0001);\n    assertEquals(row2.get(1).doubleValue(), 0.544877, .0001);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n\n\n    Number s = (Number)tuples.get(0).get(\"s\");\n    assertEquals(s.doubleValue(), 10.0, 0);\n    Number t = (Number)tuples.get(0).get(\"t\");\n    assertEquals(t.doubleValue(), 20.0, 0);\n    Number u = (Number)tuples.get(0).get(\"u\");\n    assertEquals(u.doubleValue(), 10.0, 0);\n\n    List<List<Number>> x = (List<List<Number>>)tuples.get(0).get(\"x\");\n    assertEquals(x.size(), 3);\n    assertEquals(x.get(0).size(), 3);\n    row0 = x.get(0);\n    assertEquals(row0.get(0).doubleValue(), 0, 0);\n    assertEquals(row0.get(1).doubleValue(), 10.0, 0);\n    assertEquals(row0.get(2).doubleValue(), 20, 0);\n\n    row1 = x.get(1);\n    assertEquals(row1.get(0).doubleValue(), 10, 0);\n    assertEquals(row1.get(1).doubleValue(), 0, 0);\n    assertEquals(row1.get(2).doubleValue(), 10, 0);\n\n    row2 = x.get(2);\n    assertEquals(row2.get(0).doubleValue(), 20, 0);\n    assertEquals(row2.get(1).doubleValue(), 10, 0);\n    assertEquals(row2.get(2).doubleValue(), 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","5d0b4707f3bab526e78877bedeebf53368dbc3d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["5d0b4707f3bab526e78877bedeebf53368dbc3d7","960f089602da7f0df48fb0e23de1ecbc791b95f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}