{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#nextSeekTerm(BytesRef).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#nextSeekTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /** @see org.apache.lucene.index.FilteredTermsEnum#nextSeekTerm(BytesRef) */\n    protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n      //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n      if (term == null) {\n        assert seekBytesRef.length() == 0;\n        // return the empty term, as it's valid\n        if (runAutomaton.isAccept(0)) {\n          return seekBytesRef.get();\n        }\n      } else {\n        seekBytesRef.copyBytes(term);\n      }\n\n      // seek to the next possible string;\n      if (nextString()) {\n        return seekBytesRef.get();  // reposition\n      } else {\n        return null;          // no more possible strings can match\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.AutomatonNextTermCalculator#nextSeekTerm(BytesRef).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.index.FilteredTermsEnum#nextSeekTerm(BytesRef)\n     */\n    protected BytesRef nextSeekTerm(final BytesRef term) {\n      //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n      if (term == null) {\n        assert seekBytesRef.length() == 0;\n        // return the empty term, as it's valid\n        if (runAutomaton.isAccept(0)) {\n          return seekBytesRef.get();\n        }\n      } else {\n        seekBytesRef.copyBytes(term);\n      }\n\n      // seek to the next possible string;\n      if (nextString()) {\n        return seekBytesRef.get();  // reposition\n      } else {\n        return null;          // no more possible strings can match\n      }\n    }\n\n","sourceOld":"    /** @see org.apache.lucene.index.FilteredTermsEnum#nextSeekTerm(BytesRef) */\n    protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n      //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n      if (term == null) {\n        assert seekBytesRef.length() == 0;\n        // return the empty term, as it's valid\n        if (runAutomaton.isAccept(0)) {\n          return seekBytesRef.get();\n        }\n      } else {\n        seekBytesRef.copyBytes(term);\n      }\n\n      // seek to the next possible string;\n      if (nextString()) {\n        return seekBytesRef.get();  // reposition\n      } else {\n        return null;          // no more possible strings can match\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23fcccd57316410c404dd37307a496ab850efa9c":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}