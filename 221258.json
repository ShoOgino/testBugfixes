{"path":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(QueryWeight,Filter,int).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(QueryWeight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(QueryWeight weight, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(QueryWeight,Filter,int).mjava","sourceNew":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(QueryWeight weight, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] = new MultiSearcherThread(searchables[i], weight, filter, nDocs,\n          hq, i, starts, \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}