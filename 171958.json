{"path":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","commits":[{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":2,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","sourceNew":"  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 2));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.stopJettySolrRunner(solrRunner);\n    }\n    waitForState(\"Expected empty liveNodes\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.startJettySolrRunner(solrRunner);\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 2));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 2));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 4);\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    \n    List<String> nodes = new ArrayList<>();\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      nodes.add(solrRunner.getNodeName());\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.waitForJettyToStop(solrRunner);\n    }\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {\n      \n      @Override\n      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n        boolean success = true;\n        for (String lostNodeName : nodes) {\n          if (newLiveNodes.contains(lostNodeName)) {\n            success = false;\n            break;\n          }\n        }\n        \n        return success;\n      }\n    });\n    \n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n    cluster.waitForAllNodes(30);\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 4));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 2));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":["691d1439503ec32e198724114f6cd32446c86ac6","27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 4);\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    \n    List<String> nodes = new ArrayList<>();\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      nodes.add(solrRunner.getNodeName());\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.waitForJettyToStop(solrRunner);\n    }\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {\n      \n      @Override\n      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n        boolean success = true;\n        for (String lostNodeName : nodes) {\n          if (newLiveNodes.contains(lostNodeName)) {\n            success = false;\n            break;\n          }\n        }\n        \n        return success;\n      }\n    });\n    \n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n    cluster.waitForAllNodes(30);\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 4));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 4);\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    \n    List<String> nodes = new ArrayList<>();\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      nodes.add(solrRunner.getNodeName());\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.waitForJettyToStop(solrRunner);\n    }\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {\n      \n      @Override\n      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n        boolean success = true;\n        for (String lostNodeName : nodes) {\n          if (newLiveNodes.contains(lostNodeName)) {\n            success = false;\n            break;\n          }\n        }\n        \n        return success;\n      }\n    });\n    \n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n    cluster.waitForAllNodes(30);\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 4));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 4);\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    \n    List<String> nodes = new ArrayList<>();\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      nodes.add(solrRunner.getNodeName());\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.waitForJettyToStop(solrRunner);\n    }\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {\n      \n      @Override\n      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n        boolean success = true;\n        for (String lostNodeName : nodes) {\n          if (newLiveNodes.contains(lostNodeName)) {\n            success = false;\n            break;\n          }\n        }\n        \n        return success;\n      }\n    });\n    \n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n    cluster.waitForAllNodes(30);\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 4));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 4);\n    \n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    \n    List<String> nodes = new ArrayList<>();\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      nodes.add(solrRunner.getNodeName());\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.waitForJettyToStop(solrRunner);\n    }\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {\n      \n      @Override\n      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n        boolean success = true;\n        for (String lostNodeName : nodes) {\n          if (newLiveNodes.contains(lostNodeName)) {\n            success = false;\n            break;\n          }\n        }\n        \n        return success;\n      }\n    });\n    \n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n    cluster.waitForAllNodes(30);\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 4));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4cba13865da71de3b9b0937fcbc66d726089356d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cba13865da71de3b9b0937fcbc66d726089356d":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["4cba13865da71de3b9b0937fcbc66d726089356d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"4cba13865da71de3b9b0937fcbc66d726089356d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}