{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#killDaemon(String,String).mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#killDaemon(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void killDaemon(String daemonName, String daemonUrl) throws Exception {\n    log.debug(\"-- killing daemon \" + daemonName + \" at \" + daemonUrl);\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      // we should really use 'kill' here, but then we will never\n      // know when the daemon actually finishes running - 'kill' only\n      // sets a flag that may be noticed much later\n      q.set(\"action\", \"stop\");\n      q.set(CommonParams.ID, daemonName);\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      NamedList<Object> rsp = solrClient.request(req);\n      // /result-set/docs/[0]/DaemonOp : Deamon:id killed on coreName\n      log.debug(\" -- stop daemon response: \" + Utils.toJSONString(rsp));\n      Map<String, Object> rs = (Map<String, Object>) rsp.get(\"result-set\");\n      if (rs == null || rs.isEmpty()) {\n        log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n        return;\n      }\n      List<Object> list = (List<Object>) rs.get(\"docs\");\n      if (list == null) {\n        log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n        return;\n      }\n      if (list.isEmpty()) { // already finished?\n        return;\n      }\n      for (Object o : list) {\n        Map<String, Object> map = (Map<String, Object>) o;\n        String op = (String) map.get(\"DaemonOp\");\n        if (op == null) {\n          continue;\n        }\n        if (op.contains(daemonName) && op.contains(\"stopped\")) {\n          // now wait for the daemon to really stop\n          q.set(\"action\", \"list\");\n          req = new QueryRequest(q);\n          TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, ocmh.timeSource);\n          while (!timeOut.hasTimedOut()) {\n            rsp = solrClient.request(req);\n            rs = (Map<String, Object>) rsp.get(\"result-set\");\n            if (rs == null || rs.isEmpty()) {\n              log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n              break;\n            }\n            List<Object> list2 = (List<Object>) rs.get(\"docs\");\n            if (list2 == null) {\n              log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n              break;\n            }\n            if (list2.isEmpty()) { // already finished?\n              break;\n            }\n            Map<String, Object> status2 = null;\n            for (Object o2 : list2) {\n              Map<String, Object> map2 = (Map<String, Object>)o2;\n              if (daemonName.equals(map2.get(\"id\"))) {\n                status2 = map2;\n                break;\n              }\n            }\n            if (status2 == null) { // finished?\n              break;\n            }\n            Number stopTime = (Number)status2.get(\"stopTime\");\n            if (stopTime.longValue() > 0) {\n              break;\n            }\n          }\n          if (timeOut.hasTimedOut()) {\n            log.warn(\"Problem killing daemon \" + daemonName + \": timed out waiting for daemon to stop.\");\n            // proceed anyway\n          }\n        }\n      }\n      // now kill it - it's already stopped, this simply removes its status\n      q.set(\"action\", \"kill\");\n      req = new QueryRequest(q);\n      solrClient.request(req);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#killDaemon(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#killDaemon(String,String).mjava","sourceNew":"  private void killDaemon(String daemonName, String daemonUrl) throws Exception {\n    log.debug(\"-- killing daemon {} at {}\", daemonName, daemonUrl);\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      // we should really use 'kill' here, but then we will never\n      // know when the daemon actually finishes running - 'kill' only\n      // sets a flag that may be noticed much later\n      q.set(\"action\", \"stop\");\n      q.set(CommonParams.ID, daemonName);\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      NamedList<Object> rsp = solrClient.request(req);\n      // /result-set/docs/[0]/DaemonOp : Deamon:id killed on coreName\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- stop daemon response: {}\", Utils.toJSONString(rsp));\n      }\n      Map<String, Object> rs = (Map<String, Object>) rsp.get(\"result-set\");\n      if (rs == null || rs.isEmpty()) {\n        log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n        return;\n      }\n      List<Object> list = (List<Object>) rs.get(\"docs\");\n      if (list == null) {\n        log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n        return;\n      }\n      if (list.isEmpty()) { // already finished?\n        return;\n      }\n      for (Object o : list) {\n        Map<String, Object> map = (Map<String, Object>) o;\n        String op = (String) map.get(\"DaemonOp\");\n        if (op == null) {\n          continue;\n        }\n        if (op.contains(daemonName) && op.contains(\"stopped\")) {\n          // now wait for the daemon to really stop\n          q.set(\"action\", \"list\");\n          req = new QueryRequest(q);\n          TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, ocmh.timeSource);\n          while (!timeOut.hasTimedOut()) {\n            rsp = solrClient.request(req);\n            rs = (Map<String, Object>) rsp.get(\"result-set\");\n            if (rs == null || rs.isEmpty()) {\n              log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n              break;\n            }\n            List<Object> list2 = (List<Object>) rs.get(\"docs\");\n            if (list2 == null) {\n              log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n              break;\n            }\n            if (list2.isEmpty()) { // already finished?\n              break;\n            }\n            Map<String, Object> status2 = null;\n            for (Object o2 : list2) {\n              Map<String, Object> map2 = (Map<String, Object>)o2;\n              if (daemonName.equals(map2.get(\"id\"))) {\n                status2 = map2;\n                break;\n              }\n            }\n            if (status2 == null) { // finished?\n              break;\n            }\n            Number stopTime = (Number)status2.get(\"stopTime\");\n            if (stopTime.longValue() > 0) {\n              break;\n            }\n          }\n          if (timeOut.hasTimedOut()) {\n            log.warn(\"Problem killing daemon {}: timed out waiting for daemon to stop.\", daemonName);\n            // proceed anyway\n          }\n        }\n      }\n      // now kill it - it's already stopped, this simply removes its status\n      q.set(\"action\", \"kill\");\n      req = new QueryRequest(q);\n      solrClient.request(req);\n    }\n  }\n\n","sourceOld":"  private void killDaemon(String daemonName, String daemonUrl) throws Exception {\n    log.debug(\"-- killing daemon \" + daemonName + \" at \" + daemonUrl);\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      // we should really use 'kill' here, but then we will never\n      // know when the daemon actually finishes running - 'kill' only\n      // sets a flag that may be noticed much later\n      q.set(\"action\", \"stop\");\n      q.set(CommonParams.ID, daemonName);\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      NamedList<Object> rsp = solrClient.request(req);\n      // /result-set/docs/[0]/DaemonOp : Deamon:id killed on coreName\n      log.debug(\" -- stop daemon response: \" + Utils.toJSONString(rsp));\n      Map<String, Object> rs = (Map<String, Object>) rsp.get(\"result-set\");\n      if (rs == null || rs.isEmpty()) {\n        log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n        return;\n      }\n      List<Object> list = (List<Object>) rs.get(\"docs\");\n      if (list == null) {\n        log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n        return;\n      }\n      if (list.isEmpty()) { // already finished?\n        return;\n      }\n      for (Object o : list) {\n        Map<String, Object> map = (Map<String, Object>) o;\n        String op = (String) map.get(\"DaemonOp\");\n        if (op == null) {\n          continue;\n        }\n        if (op.contains(daemonName) && op.contains(\"stopped\")) {\n          // now wait for the daemon to really stop\n          q.set(\"action\", \"list\");\n          req = new QueryRequest(q);\n          TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, ocmh.timeSource);\n          while (!timeOut.hasTimedOut()) {\n            rsp = solrClient.request(req);\n            rs = (Map<String, Object>) rsp.get(\"result-set\");\n            if (rs == null || rs.isEmpty()) {\n              log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n              break;\n            }\n            List<Object> list2 = (List<Object>) rs.get(\"docs\");\n            if (list2 == null) {\n              log.warn(\"Problem killing daemon \" + daemonName + \": missing result-set: \" + Utils.toJSONString(rsp));\n              break;\n            }\n            if (list2.isEmpty()) { // already finished?\n              break;\n            }\n            Map<String, Object> status2 = null;\n            for (Object o2 : list2) {\n              Map<String, Object> map2 = (Map<String, Object>)o2;\n              if (daemonName.equals(map2.get(\"id\"))) {\n                status2 = map2;\n                break;\n              }\n            }\n            if (status2 == null) { // finished?\n              break;\n            }\n            Number stopTime = (Number)status2.get(\"stopTime\");\n            if (stopTime.longValue() > 0) {\n              break;\n            }\n          }\n          if (timeOut.hasTimedOut()) {\n            log.warn(\"Problem killing daemon \" + daemonName + \": timed out waiting for daemon to stop.\");\n            // proceed anyway\n          }\n        }\n      }\n      // now kill it - it's already stopped, this simply removes its status\n      q.set(\"action\", \"kill\");\n      req = new QueryRequest(q);\n      solrClient.request(req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#killDaemon(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#killDaemon(String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void killDaemon(String daemonName, String daemonUrl) throws Exception {\n    log.debug(\"-- killing daemon {} at {}\", daemonName, daemonUrl);\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      // we should really use 'kill' here, but then we will never\n      // know when the daemon actually finishes running - 'kill' only\n      // sets a flag that may be noticed much later\n      q.set(\"action\", \"stop\");\n      q.set(CommonParams.ID, daemonName);\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      NamedList<Object> rsp = solrClient.request(req);\n      // /result-set/docs/[0]/DaemonOp : Deamon:id killed on coreName\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- stop daemon response: {}\", Utils.toJSONString(rsp));\n      }\n      Map<String, Object> rs = (Map<String, Object>) rsp.get(\"result-set\");\n      if (rs == null || rs.isEmpty()) {\n        log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n        return;\n      }\n      List<Object> list = (List<Object>) rs.get(\"docs\");\n      if (list == null) {\n        log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n        return;\n      }\n      if (list.isEmpty()) { // already finished?\n        return;\n      }\n      for (Object o : list) {\n        Map<String, Object> map = (Map<String, Object>) o;\n        String op = (String) map.get(\"DaemonOp\");\n        if (op == null) {\n          continue;\n        }\n        if (op.contains(daemonName) && op.contains(\"stopped\")) {\n          // now wait for the daemon to really stop\n          q.set(\"action\", \"list\");\n          req = new QueryRequest(q);\n          TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, ocmh.timeSource);\n          while (!timeOut.hasTimedOut()) {\n            rsp = solrClient.request(req);\n            rs = (Map<String, Object>) rsp.get(\"result-set\");\n            if (rs == null || rs.isEmpty()) {\n              log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n              break;\n            }\n            List<Object> list2 = (List<Object>) rs.get(\"docs\");\n            if (list2 == null) {\n              log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n              break;\n            }\n            if (list2.isEmpty()) { // already finished?\n              break;\n            }\n            Map<String, Object> status2 = null;\n            for (Object o2 : list2) {\n              Map<String, Object> map2 = (Map<String, Object>)o2;\n              if (daemonName.equals(map2.get(\"id\"))) {\n                status2 = map2;\n                break;\n              }\n            }\n            if (status2 == null) { // finished?\n              break;\n            }\n            Number stopTime = (Number)status2.get(\"stopTime\");\n            if (stopTime.longValue() > 0) {\n              break;\n            }\n          }\n          if (timeOut.hasTimedOut()) {\n            log.warn(\"Problem killing daemon {}: timed out waiting for daemon to stop.\", daemonName);\n            // proceed anyway\n          }\n        }\n      }\n      // now kill it - it's already stopped, this simply removes its status\n      q.set(\"action\", \"kill\");\n      req = new QueryRequest(q);\n      solrClient.request(req);\n    }\n  }\n\n","sourceOld":"  private void killDaemon(String daemonName, String daemonUrl) throws Exception {\n    log.debug(\"-- killing daemon {} at {}\", daemonName, daemonUrl);\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      // we should really use 'kill' here, but then we will never\n      // know when the daemon actually finishes running - 'kill' only\n      // sets a flag that may be noticed much later\n      q.set(\"action\", \"stop\");\n      q.set(CommonParams.ID, daemonName);\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      NamedList<Object> rsp = solrClient.request(req);\n      // /result-set/docs/[0]/DaemonOp : Deamon:id killed on coreName\n      if (log.isDebugEnabled()) {\n        log.debug(\" -- stop daemon response: {}\", Utils.toJSONString(rsp));\n      }\n      Map<String, Object> rs = (Map<String, Object>) rsp.get(\"result-set\");\n      if (rs == null || rs.isEmpty()) {\n        log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n        return;\n      }\n      List<Object> list = (List<Object>) rs.get(\"docs\");\n      if (list == null) {\n        log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n        return;\n      }\n      if (list.isEmpty()) { // already finished?\n        return;\n      }\n      for (Object o : list) {\n        Map<String, Object> map = (Map<String, Object>) o;\n        String op = (String) map.get(\"DaemonOp\");\n        if (op == null) {\n          continue;\n        }\n        if (op.contains(daemonName) && op.contains(\"stopped\")) {\n          // now wait for the daemon to really stop\n          q.set(\"action\", \"list\");\n          req = new QueryRequest(q);\n          TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, ocmh.timeSource);\n          while (!timeOut.hasTimedOut()) {\n            rsp = solrClient.request(req);\n            rs = (Map<String, Object>) rsp.get(\"result-set\");\n            if (rs == null || rs.isEmpty()) {\n              log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n              break;\n            }\n            List<Object> list2 = (List<Object>) rs.get(\"docs\");\n            if (list2 == null) {\n              log.warn(\"Problem killing daemon {}: missing result-set: {}\", daemonName, Utils.toJSONString(rsp));\n              break;\n            }\n            if (list2.isEmpty()) { // already finished?\n              break;\n            }\n            Map<String, Object> status2 = null;\n            for (Object o2 : list2) {\n              Map<String, Object> map2 = (Map<String, Object>)o2;\n              if (daemonName.equals(map2.get(\"id\"))) {\n                status2 = map2;\n                break;\n              }\n            }\n            if (status2 == null) { // finished?\n              break;\n            }\n            Number stopTime = (Number)status2.get(\"stopTime\");\n            if (stopTime.longValue() > 0) {\n              break;\n            }\n          }\n          if (timeOut.hasTimedOut()) {\n            log.warn(\"Problem killing daemon {}: timed out waiting for daemon to stop.\", daemonName);\n            // proceed anyway\n          }\n        }\n      }\n      // now kill it - it's already stopped, this simply removes its status\n      q.set(\"action\", \"kill\");\n      req = new QueryRequest(q);\n      solrClient.request(req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4abf821a41a2fdca2a1dea148999931d22e20529":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"]},"commit2Childs":{"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}