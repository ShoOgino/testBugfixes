{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testPhraseQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testPhraseQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testPhraseQuery().mjava","sourceNew":"  public void testPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"a\"));\n    phraseQuery.add(new Term(F, \"b\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a c b\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(ab((0,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void testPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"a\"));\n    phraseQuery.add(new Term(F, \"b\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a c b\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(ab((0,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testPhraseQuery().mjava","sourceNew":"  public void testPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(F, \"a\", \"b\");\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a c b\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(ab((0,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void testPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"a\"));\n    phraseQuery.add(new Term(F, \"b\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a c b\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(phraseQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(ab((0,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}