{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    super(state);\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    super(state);\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35e791a979f62bb7484ccd9f83fa833c1606e8","date":1412164445,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.maxDoc();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.maxDoc();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.maxDoc();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    maxDoc = state.segmentInfo.getDocCount();\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.init(out, state); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["8d35e791a979f62bb7484ccd9f83fa833c1606e8"],"b0267c69e2456a3477a1ad785723f2135da3117e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["99eb4a732d1a908f4636ace52928876136bf1896"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"8d35e791a979f62bb7484ccd9f83fa833c1606e8":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"b06445ae1731e049327712db0454e5643ca9b7fe":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","8d35e791a979f62bb7484ccd9f83fa833c1606e8"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["038e2a9b07e2f8ae58336613cea227bf8b973484","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0267c69e2456a3477a1ad785723f2135da3117e"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["8d35e791a979f62bb7484ccd9f83fa833c1606e8","9bb9a29a5e71a90295f175df8919802993142c9a"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8d35e791a979f62bb7484ccd9f83fa833c1606e8":["99eb4a732d1a908f4636ace52928876136bf1896","9bb9a29a5e71a90295f175df8919802993142c9a"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}