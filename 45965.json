{"path":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seekCeil(BytesRef,boolean).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef term, boolean useCache) {\n        current = term.utf8ToString();\n        it = null;\n        if (ramField.termToDocs.containsKey(current)) {\n          return SeekStatus.FOUND;\n        } else {\n          if (current.compareTo(ramField.termToDocs.lastKey()) > 0) {\n            return SeekStatus.END;\n          } else {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef term, boolean useCache) {\n        current = term.utf8ToString();\n        it = null;\n        if (ramField.termToDocs.containsKey(current)) {\n          return SeekStatus.FOUND;\n        } else {\n          if (current.compareTo(ramField.termToDocs.lastKey()) > 0) {\n            return SeekStatus.END;\n          } else {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef term, boolean useCache) {\n        current = term.utf8ToString();\n        it = null;\n        if (ramField.termToDocs.containsKey(current)) {\n          return SeekStatus.FOUND;\n        } else {\n          if (current.compareTo(ramField.termToDocs.lastKey()) > 0) {\n            return SeekStatus.END;\n          } else {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef term, boolean useCache) {\n        current = term.utf8ToString();\n        it = null;\n        if (ramField.termToDocs.containsKey(current)) {\n          return SeekStatus.FOUND;\n        } else {\n          if (current.compareTo(ramField.termToDocs.lastKey()) > 0) {\n            return SeekStatus.END;\n          } else {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef term, boolean useCache) {\n        current = term.utf8ToString();\n        it = null;\n        if (ramField.termToDocs.containsKey(current)) {\n          return SeekStatus.FOUND;\n        } else {\n          if (current.compareTo(ramField.termToDocs.lastKey()) > 0) {\n            return SeekStatus.END;\n          } else {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.RAMOnlyCodec.RAMTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef term, boolean useCache) {\n        current = term.utf8ToString();\n        it = null;\n        if (ramField.termToDocs.containsKey(current)) {\n          return SeekStatus.FOUND;\n        } else {\n          if (current.compareTo(ramField.termToDocs.lastKey()) > 0) {\n            return SeekStatus.END;\n          } else {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["7b91922b55d15444d554721b352861d028eb8278","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}