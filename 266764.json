{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","commits":[{"id":"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","date":1438774486,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionProcessor.CREATE_NODE_SET_EMPTY, asyncId);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionProcessor.CREATE_NODE_SET_EMPTY, asyncId);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7","date":1445955220,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, random().nextBoolean());\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26fc9c59806c587f9b96f0ea15fa9a0aa8001568","date":1452027155,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, random().nextBoolean());\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        final RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient);\n        assertSame(\"did not see async createCollection completion\", RequestStatusState.COMPLETED, state);\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        assertEquals(\"did not see async createCollection completion\", \"completed\", AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient));\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        final RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient);\n        assertSame(\"did not see async createCollection completion\", RequestStatusState.COMPLETED, state);\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        final RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient);\n        assertSame(\"did not see async createCollection completion\", RequestStatusState.COMPLETED, state);\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        \n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        final RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient);\n        assertSame(\"did not see async createCollection completion\", RequestStatusState.COMPLETED, state);\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n      if (asyncId != null) {\n        final RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient);\n        assertSame(\"did not see async createCollection completion\", RequestStatusState.COMPLETED, state);\n      }\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n        \n        // delete the collection we created earlier\n        miniCluster.deleteCollection(collectionName);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);    \n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState().getSlicesMap(collectionName).entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState()\n              .getCollection(collectionName).getSlicesMap().entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c717efc76ccf2ea435c52fa36a4774056fe8b4d4","date":1501575440,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      assertFalse(miniCluster.getJettySolrRunners().isEmpty());\n\n      // create collection\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      createCollection(miniCluster, collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY, asyncId, null, null);\n\n      try (SolrZkClient zkClient = new SolrZkClient\n          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {\n        zkStateReader.createClusterStateWatchersAndUpdate();\n\n        // wait for collection to appear\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n\n        // check the collection's corelessness\n        {\n          int coreCount = 0; \n          for (Map.Entry<String,Slice> entry : zkStateReader.getClusterState()\n              .getCollection(collectionName).getSlicesMap().entrySet()) {\n            coreCount += entry.getValue().getReplicasMap().entrySet().size();\n          }\n          assertEquals(0, coreCount);\n        }\n\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a52341299179de5479672f7cf518bf4b173f34b3"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["26fc9c59806c587f9b96f0ea15fa9a0aa8001568"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"26fc9c59806c587f9b96f0ea15fa9a0aa8001568":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"]},"commit2Childs":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["936cdd5882761db3b844afd6f84ab81cbb011a75","5719bfb2650ba43855e20564d39873bbbdc7f02c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a52341299179de5479672f7cf518bf4b173f34b3"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"344b0840364d990b29b97467bfcc766ff8325d11":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"26fc9c59806c587f9b96f0ea15fa9a0aa8001568":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"],"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a52341299179de5479672f7cf518bf4b173f34b3":["344b0840364d990b29b97467bfcc766ff8325d11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["26fc9c59806c587f9b96f0ea15fa9a0aa8001568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}