{"path":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","commits":[{"id":"705f33e5fdd5faefb06e318ed968763f66e8a2b0","date":1262624396,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c88212335fad5757eeff8f3c53c500a3ab7e860","date":1266520558,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = end + 1;\n        end = externalVal.indexOf(',', start);\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84ae6c29f97e1e12bd9beb753ae409e1655f1ec2","date":1266521191,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidex = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = end + 1;\n        end = externalVal.indexOf(',', start);\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["fc6e93db4df3c78fb767c8b87a8c5da40080a103"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"460c042a730ca2ca9656a2f2783fff6b30ba1e30","date":1266526512,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidex = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidex = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc6e93db4df3c78fb767c8b87a8c5da40080a103","date":1266527269,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidex = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":["84ae6c29f97e1e12bd9beb753ae409e1655f1ec2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc6e93db4df3c78fb767c8b87a8c5da40080a103":["460c042a730ca2ca9656a2f2783fff6b30ba1e30"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fc6e93db4df3c78fb767c8b87a8c5da40080a103"],"460c042a730ca2ca9656a2f2783fff6b30ba1e30":["84ae6c29f97e1e12bd9beb753ae409e1655f1ec2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84ae6c29f97e1e12bd9beb753ae409e1655f1ec2":["5c88212335fad5757eeff8f3c53c500a3ab7e860"],"5c88212335fad5757eeff8f3c53c500a3ab7e860":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"]},"commit2Childs":{"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["5c88212335fad5757eeff8f3c53c500a3ab7e860"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fc6e93db4df3c78fb767c8b87a8c5da40080a103":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"460c042a730ca2ca9656a2f2783fff6b30ba1e30":["fc6e93db4df3c78fb767c8b87a8c5da40080a103"],"84ae6c29f97e1e12bd9beb753ae409e1655f1ec2":["460c042a730ca2ca9656a2f2783fff6b30ba1e30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c88212335fad5757eeff8f3c53c500a3ab7e860":["84ae6c29f97e1e12bd9beb753ae409e1655f1ec2"]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}