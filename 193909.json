{"path":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#deleteByQuery(int,long,long).mjava","commits":[{"id":"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b","date":1439091488,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#deleteByQuery(int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteByQuery(int id, long nextVal, long version) throws Exception {\n    ifVerbose(\"deleteByQuery id\", id, \"val=\", nextVal, \"version\", version);\n\n    Long returnedVersion = deleteByQueryAndGetVersion(\"id:\" + Integer.toString(id),\n        params(\"_version_\", Long.toString(-version), DISTRIB_UPDATE_PARAM, FROM_LEADER));\n\n    // TODO: returning versions for these types of updates is redundant\n    // but if we do return, they had better be equal\n    if (returnedVersion != null) {\n      assertEquals(-version, returnedVersion.longValue());\n    }\n\n    // only update model if the version is newer\n    synchronized (model) {\n      DocInfo currInfo = model.get(id);\n      if (Math.abs(version) > Math.abs(currInfo.version)) {\n        model.put(id, new DocInfo(version, -nextVal));\n      }\n    }\n\n    ifVerbose(\"deleteByQuery id\", id, \"val=\", nextVal, \"version\", version, \"DONE\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}