{"path":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","commits":[{"id":"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","date":1399457549,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getRawInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getRawInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63029ffae00834539bab8996772b0c75f0810d9b","date":1402943768,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getRawInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getRawInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    try {\n      lockFactory = new SimpleFSLockFactory(new File(snapDir).toPath());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    lockFactory = new SimpleFSLockFactory(snapDir);\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    try {\n      lockFactory = new SimpleFSLockFactory(new File(snapDir).toPath());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d430d59b42be8455e21334e887dea80642775691","date":1423733834,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n      File dir = new File(snapDir);\n      if (!dir.exists())  dir.mkdirs();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      snapDir = Paths.get(core.getCoreDescriptor().getInstanceDir()).resolve(location).toAbsolutePath().toString();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      snapDir = Paths.get(core.getCoreDescriptor().getInstanceDir()).resolve(location).toAbsolutePath().toString();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) snapDir = core.getDataDir();\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae5482d56cf3fa85b2d23070af1f68d86b70bef","date":1429017349,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      snapDir = Paths.get(core.getCoreDescriptor().getInstanceDir()).resolve(location).toAbsolutePath().toString();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      snapDir = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      File base = new File(core.getCoreDescriptor().getInstanceDir());\n      snapDir = org.apache.solr.util.FileUtils.resolvePath(base, location).getAbsolutePath();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName);\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      snapDir = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName, null);\n  }\n\n","sourceOld":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName);\n  }\n\n","bugFix":null,"bugIntro":["af3193c66df8e8324d4bce9f66df967af9e8c602"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName, null);\n  }\n\n","sourceOld":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, Paths.get(snapDirStr).toUri(), snapshotName, null);\n  }\n\n","sourceOld":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName, null);\n  }\n\n","bugFix":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, Paths.get(snapDirStr).toUri(), snapshotName, null);\n  }\n\n","sourceOld":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, Paths.get(snapDirStr).toUri(), snapshotName, null);\n  }\n\n","sourceOld":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, Paths.get(snapDirStr).toUri(), snapshotName, null);\n  }\n\n","sourceOld":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, snapDirStr, snapshotName, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#SnapShooter(SolrCore,String,String).mjava","sourceNew":"  @Deprecated\n  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    String snapDirStr = null;\n    // Note - This logic is only applicable to the usecase where a shared file-system is exposed via\n    // local file-system interface (primarily for backwards compatibility). For other use-cases, users\n    // will be required to specify \"location\" where the backup should be stored.\n    if (location == null) {\n      snapDirStr = core.getDataDir();\n    } else {\n      snapDirStr = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    initialize(new LocalFileSystemRepository(), core, Paths.get(snapDirStr).toUri(), snapshotName, null);\n  }\n\n","sourceOld":"  public SnapShooter(SolrCore core, String location, String snapshotName) {\n    solrCore = core;\n    if (location == null) {\n      snapDir = core.getDataDir();\n    }\n    else  {\n      snapDir = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n    }\n    this.snapshotName = snapshotName;\n\n    if(snapshotName != null) {\n      directoryName = \"snapshot.\" + snapshotName;\n    } else {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","af3193c66df8e8324d4bce9f66df967af9e8c602"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"f4abec28b874149a7223e32cc7a01704c27790de":["63029ffae00834539bab8996772b0c75f0810d9b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","63029ffae00834539bab8996772b0c75f0810d9b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7ae5482d56cf3fa85b2d23070af1f68d86b70bef":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["7ae5482d56cf3fa85b2d23070af1f68d86b70bef"],"d430d59b42be8455e21334e887dea80642775691":["285cdc737de75b7cc7c284a156b20214deb67bca"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["d430d59b42be8455e21334e887dea80642775691","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"63029ffae00834539bab8996772b0c75f0810d9b":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["d430d59b42be8455e21334e887dea80642775691"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"285cdc737de75b7cc7c284a156b20214deb67bca":["d430d59b42be8455e21334e887dea80642775691"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","63029ffae00834539bab8996772b0c75f0810d9b"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7ae5482d56cf3fa85b2d23070af1f68d86b70bef":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"d430d59b42be8455e21334e887dea80642775691":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"63029ffae00834539bab8996772b0c75f0810d9b":["f4abec28b874149a7223e32cc7a01704c27790de","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["7ae5482d56cf3fa85b2d23070af1f68d86b70bef","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}