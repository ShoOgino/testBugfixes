{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","commits":[{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor());\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46df9d682d3407bf67ce2946c9f9267376809bc2","date":1521244495,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            testing_beforeRegisterInZk.test(core.getCoreDescriptor());\n          }\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            testing_beforeRegisterInZk.test(core.getCoreDescriptor());\n          }\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            testing_beforeRegisterInZk.test(cd);\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            testing_beforeRegisterInZk.test(core.getCoreDescriptor());\n          }\n          zkController.register(core.getName(), core.getCoreDescriptor(), skipRecovery);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (Exception e) {\n          try {\n            zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":["d528fd7ae22865015b756e0a03832e2051de2a9c","46df9d682d3407bf67ce2946c9f9267376809bc2","cc69baf14413994ccde897681e5ce1d393cf7156"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            log.debug((didTrigger ? \"Ran\" : \"Skipped\") + \" pre-zk hook\");\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            testing_beforeRegisterInZk.test(cd);\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5005b977107bba28c700351216f1595e7abe4f","date":1585964712,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            log.debug((didTrigger ? \"Ran\" : \"Skipped\") + \" pre-zk hook\");\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            log.debug((didTrigger ? \"Ran\" : \"Skipped\") + \" pre-zk hook\");\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (zkController != null) {\n      if (background) {\n        coreZkRegister.execute(r);\n      } else {\n        MDCLoggingContext.setCore(core);\n        try {\n          r.run();\n        } finally {\n          MDCLoggingContext.clear();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            if (log.isDebugEnabled()) {\n              log.debug((didTrigger ? \"Ran\" : \"Skipped\") + \" pre-zk hook\");\n            }\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            log.debug((didTrigger ? \"Ran\" : \"Skipped\") + \" pre-zk hook\");\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            if (log.isDebugEnabled()) {\n              log.debug(\"{} pre-zk hook\", (didTrigger ? \"Ran\" : \"Skipped\"));\n            }\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            if (log.isDebugEnabled()) {\n              log.debug((didTrigger ? \"Ran\" : \"Skipped\") + \" pre-zk hook\");\n            }\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c0669e43c94d405b0e6681e9373cf3e9752980","date":1588515796,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#registerInZk(SolrCore,boolean,boolean).mjava","sourceNew":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    if (zkController == null) {\n      return;\n    }\n\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            if (log.isDebugEnabled()) {\n              log.debug(\"{} pre-zk hook\", (didTrigger ? \"Ran\" : \"Skipped\"));\n            }\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n  }\n\n","sourceOld":"  public void registerInZk(final SolrCore core, boolean background, boolean skipRecovery) {\n    CoreDescriptor cd = core.getCoreDescriptor(); // save this here - the core may not have it later\n    Runnable r = () -> {\n      MDCLoggingContext.setCore(core);\n      try {\n        try {\n          if (testing_beforeRegisterInZk != null) {\n            boolean didTrigger = testing_beforeRegisterInZk.test(cd);\n            if (log.isDebugEnabled()) {\n              log.debug(\"{} pre-zk hook\", (didTrigger ? \"Ran\" : \"Skipped\"));\n            }\n          }\n          if (!core.getCoreContainer().isShutDown()) {\n            zkController.register(core.getName(), cd, skipRecovery);\n          }\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          SolrException.log(log, \"\", e);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (AlreadyClosedException e) {\n\n        } catch (Exception e) {\n          try {\n            zkController.publish(cd, Replica.State.DOWN);\n          } catch (InterruptedException e1) {\n            Thread.currentThread().interrupt();\n            log.error(\"\", e1);\n          } catch (Exception e1) {\n            log.error(\"\", e1);\n          }\n          SolrException.log(log, \"\", e);\n        }\n      } finally {\n        MDCLoggingContext.clear();\n      }\n    };\n\n    if (background) {\n      coreZkRegister.execute(r);\n    } else {\n      r.run();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42210058b8ae092085fa2658880b69931512e8bf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"140be51d03394488536f4aacedace29f9b318347":["ed5005b977107bba28c700351216f1595e7abe4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed5005b977107bba28c700351216f1595e7abe4f":["42210058b8ae092085fa2658880b69931512e8bf"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["d528fd7ae22865015b756e0a03832e2051de2a9c","46df9d682d3407bf67ce2946c9f9267376809bc2"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46df9d682d3407bf67ce2946c9f9267376809bc2":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15c0669e43c94d405b0e6681e9373cf3e9752980"],"15c0669e43c94d405b0e6681e9373cf3e9752980":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"42210058b8ae092085fa2658880b69931512e8bf":["ed5005b977107bba28c700351216f1595e7abe4f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["42210058b8ae092085fa2658880b69931512e8bf"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ed5005b977107bba28c700351216f1595e7abe4f":["140be51d03394488536f4aacedace29f9b318347"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["15c0669e43c94d405b0e6681e9373cf3e9752980"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["203e3fcf513c02ee2c07015f2ce277e26dc60907","46df9d682d3407bf67ce2946c9f9267376809bc2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"46df9d682d3407bf67ce2946c9f9267376809bc2":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"15c0669e43c94d405b0e6681e9373cf3e9752980":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}