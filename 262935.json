{"path":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","commits":[{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","pathOld":"/dev/null","sourceNew":"    public TestStream() {\n        //Create some nodes\n      List<Tuple> testTuples = new ArrayList();\n      Map m1 = new HashMap();\n\n      List<String> an1 = new ArrayList();\n      an1.add(\"jim\");\n      an1.add(\"max\");\n      m1.put(\"node\", \"bill\");\n      m1.put(\"ancestors\", an1);\n      testTuples.add(new Tuple(m1));\n\n      Map m2 = new HashMap();\n      List<String> an2 = new ArrayList();\n      an2.add(\"max\");\n      m2.put(\"node\", \"jim\");\n      m2.put(\"ancestors\", an2);\n      testTuples.add(new Tuple(m2));\n\n      Map m3 = new HashMap();\n      List<String> an3 = new ArrayList();\n      an3.add(\"jim\");\n      m3.put(\"node\", \"max\");\n      m3.put(\"ancestors\", an3);\n      testTuples.add(new Tuple(m3));\n\n      tuples = testTuples.iterator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","pathOld":"/dev/null","sourceNew":"    public TestStream() {\n        //Create some nodes\n      List<Tuple> testTuples = new ArrayList();\n      Map m1 = new HashMap();\n\n      List<String> an1 = new ArrayList();\n      an1.add(\"jim\");\n      an1.add(\"max\");\n      m1.put(\"node\", \"bill\");\n      m1.put(\"ancestors\", an1);\n      testTuples.add(new Tuple(m1));\n\n      Map m2 = new HashMap();\n      List<String> an2 = new ArrayList();\n      an2.add(\"max\");\n      m2.put(\"node\", \"jim\");\n      m2.put(\"ancestors\", an2);\n      testTuples.add(new Tuple(m2));\n\n      Map m3 = new HashMap();\n      List<String> an3 = new ArrayList();\n      an3.add(\"jim\");\n      m3.put(\"node\", \"max\");\n      m3.put(\"ancestors\", an3);\n      testTuples.add(new Tuple(m3));\n\n      tuples = testTuples.iterator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","pathOld":"/dev/null","sourceNew":"    public TestStream() {\n        //Create some nodes\n      List<Tuple> testTuples = new ArrayList();\n      Map m1 = new HashMap();\n\n      List<String> an1 = new ArrayList();\n      an1.add(\"jim\");\n      an1.add(\"max\");\n      m1.put(\"node\", \"bill\");\n      m1.put(\"ancestors\", an1);\n      testTuples.add(new Tuple(m1));\n\n      Map m2 = new HashMap();\n      List<String> an2 = new ArrayList();\n      an2.add(\"max\");\n      m2.put(\"node\", \"jim\");\n      m2.put(\"ancestors\", an2);\n      testTuples.add(new Tuple(m2));\n\n      Map m3 = new HashMap();\n      List<String> an3 = new ArrayList();\n      an3.add(\"jim\");\n      m3.put(\"node\", \"max\");\n      m3.put(\"ancestors\", an3);\n      testTuples.add(new Tuple(m3));\n\n      tuples = testTuples.iterator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","pathOld":"/dev/null","sourceNew":"    public TestStream() {\n        //Create some nodes\n      List<Tuple> testTuples = new ArrayList();\n      Map m1 = new HashMap();\n\n      List<String> an1 = new ArrayList();\n      an1.add(\"jim\");\n      an1.add(\"max\");\n      m1.put(\"node\", \"bill\");\n      m1.put(\"ancestors\", an1);\n      testTuples.add(new Tuple(m1));\n\n      Map m2 = new HashMap();\n      List<String> an2 = new ArrayList();\n      an2.add(\"max\");\n      m2.put(\"node\", \"jim\");\n      m2.put(\"ancestors\", an2);\n      testTuples.add(new Tuple(m2));\n\n      Map m3 = new HashMap();\n      List<String> an3 = new ArrayList();\n      an3.add(\"jim\");\n      m3.put(\"node\", \"max\");\n      m3.put(\"ancestors\", an3);\n      testTuples.add(new Tuple(m3));\n\n      tuples = testTuples.iterator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter.TestStream#TestStream().mjava","sourceNew":"    public TestStream() {\n        //Create some nodes\n      List<Tuple> testTuples = new ArrayList<>();\n      @SuppressWarnings({\"rawtypes\"})\n      Map m1 = new HashMap();\n\n      List<String> an1 = new ArrayList<>();\n      an1.add(\"jim\");\n      an1.add(\"max\");\n      m1.put(\"node\", \"bill\");\n      m1.put(\"ancestors\", an1);\n      testTuples.add(new Tuple(m1));\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map m2 = new HashMap();\n      List<String> an2 = new ArrayList<>();\n      an2.add(\"max\");\n      m2.put(\"node\", \"jim\");\n      m2.put(\"ancestors\", an2);\n      testTuples.add(new Tuple(m2));\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map m3 = new HashMap();\n      List<String> an3 = new ArrayList<>();\n      an3.add(\"jim\");\n      m3.put(\"node\", \"max\");\n      m3.put(\"ancestors\", an3);\n      testTuples.add(new Tuple(m3));\n\n      tuples = testTuples.iterator();\n    }\n\n","sourceOld":"    public TestStream() {\n        //Create some nodes\n      List<Tuple> testTuples = new ArrayList();\n      Map m1 = new HashMap();\n\n      List<String> an1 = new ArrayList();\n      an1.add(\"jim\");\n      an1.add(\"max\");\n      m1.put(\"node\", \"bill\");\n      m1.put(\"ancestors\", an1);\n      testTuples.add(new Tuple(m1));\n\n      Map m2 = new HashMap();\n      List<String> an2 = new ArrayList();\n      an2.add(\"max\");\n      m2.put(\"node\", \"jim\");\n      m2.put(\"ancestors\", an2);\n      testTuples.add(new Tuple(m2));\n\n      Map m3 = new HashMap();\n      List<String> an3 = new ArrayList();\n      an3.add(\"jim\");\n      m3.put(\"node\", \"max\");\n      m3.put(\"ancestors\", an3);\n      testTuples.add(new Tuple(m3));\n\n      tuples = testTuples.iterator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79728e71d79579147b18f43e27a36e34be4986e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["79728e71d79579147b18f43e27a36e34be4986e2"]},"commit2Childs":{"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54d17c38a2ec6cf529776157e201d539c5c0ff2f","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","79728e71d79579147b18f43e27a36e34be4986e2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"79728e71d79579147b18f43e27a36e34be4986e2":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e98520789adb1d5ad05afb4956eca0944a929688"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}