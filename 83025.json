{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator#doWork(Object,Object).mjava","commits":[{"id":"24d1271894d49e4719d0270f561298462ec278d2","date":1513625507,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Tuple tuple = new Tuple();\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(StreamParams.P_VALUE, pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(StreamParams.P_VALUE, pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["24d1271894d49e4719d0270f561298462ec278d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24d1271894d49e4719d0270f561298462ec278d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24d1271894d49e4719d0270f561298462ec278d2"],"24d1271894d49e4719d0270f561298462ec278d2":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}