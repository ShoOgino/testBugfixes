{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    MutableFieldInfos fieldInfos = new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    MutableFieldInfos fieldInfos = new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap());\n    for (IndexableField field : testDoc) {\n      fieldInfos.addOrUpdate(field.name(), field.fieldType());\n    }\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    MutableFieldInfos fieldInfos = new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57d2758489b06da76bc6a037793d9ba347ce01fd","date":1337351495,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    MutableFieldInfos builder = new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap());\n    for (IndexableField field : testDoc) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    MutableFieldInfos fieldInfos = new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap());\n    for (IndexableField field : testDoc) {\n      fieldInfos.addOrUpdate(field.name(), field.fieldType());\n    }\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    MutableFieldInfos builder = new MutableFieldInfos(new MutableFieldInfos.FieldNumberBiMap());\n    for (IndexableField field : testDoc) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfos.FieldNumberBiMap());\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc.getFields()) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc.getFields()) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc.getFields()) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, \"\", fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc.getFields()) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":null,"sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc.getFields()) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, \"\", fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#createAndWriteFieldInfos(Directory,String).mjava","sourceNew":null,"sourceOld":"  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{\n  //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    for (IndexableField field : testDoc.getFields()) {\n      builder.addOrUpdate(field.name(), field.fieldType());\n    }\n    FieldInfos fieldInfos = builder.finish();\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    \n    \n    IndexOutput output = dir.createOutput(filename, newIOContext(random()));\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n  \n    FieldInfosWriter writer = Codec.getDefault().fieldInfosFormat().getFieldInfosWriter();\n    writer.write(dir, filename, \"\", fieldInfos, IOContext.DEFAULT);\n    output.close();\n    return fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["8435160e9702b19398118ddf76b61c846612b6a4","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"8435160e9702b19398118ddf76b61c846612b6a4":["1d028314cced5858683a1bb4741423d0f934257b"],"57d2758489b06da76bc6a037793d9ba347ce01fd":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"a851824c09818632c94eba41e60ef5e72e323c8e":["57d2758489b06da76bc6a037793d9ba347ce01fd"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"1d028314cced5858683a1bb4741423d0f934257b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","a851824c09818632c94eba41e60ef5e72e323c8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["8435160e9702b19398118ddf76b61c846612b6a4"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8435160e9702b19398118ddf76b61c846612b6a4":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"57d2758489b06da76bc6a037793d9ba347ce01fd":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["57d2758489b06da76bc6a037793d9ba347ce01fd"],"1d028314cced5858683a1bb4741423d0f934257b":["8435160e9702b19398118ddf76b61c846612b6a4"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}