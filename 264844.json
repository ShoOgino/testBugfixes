{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testEdgeInsideness().mjava","commits":[{"id":"a35a7d0e36dd6f5b4f8053ac085490326734d5e4","date":1460739189,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testEdgeInsideness().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests edge case behavior with respect to insideness */\n  public void testEdgeInsideness() {\n    Polygon poly = new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 });\n    assertTrue(poly.contains(-2, -2)); // bottom left corner: true\n    assertFalse(poly.contains(-2, 2));  // bottom right corner: false\n    assertFalse(poly.contains(2, -2));  // top left corner: false\n    assertFalse(poly.contains(2,  2));  // top right corner: false\n    assertTrue(poly.contains(-2, -1)); // bottom side: true\n    assertTrue(poly.contains(-2, 0));  // bottom side: true\n    assertTrue(poly.contains(-2, 1));  // bottom side: true\n    assertFalse(poly.contains(2, -1));  // top side: false\n    assertFalse(poly.contains(2, 0));   // top side: false\n    assertFalse(poly.contains(2, 1));   // top side: false\n    assertFalse(poly.contains(-1, 2));  // right side: false\n    assertFalse(poly.contains(0, 2));   // right side: false\n    assertFalse(poly.contains(1, 2));   // right side: false\n    assertTrue(poly.contains(-1, -2)); // left side: true\n    assertTrue(poly.contains(0, -2));  // left side: true\n    assertTrue(poly.contains(1, -2));  // left side: true\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testEdgeInsideness().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests edge case behavior with respect to insideness */\n  public void testEdgeInsideness() {\n    Polygon poly = new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 });\n    assertTrue(poly.contains(-2, -2)); // bottom left corner: true\n    assertFalse(poly.contains(-2, 2));  // bottom right corner: false\n    assertFalse(poly.contains(2, -2));  // top left corner: false\n    assertFalse(poly.contains(2,  2));  // top right corner: false\n    assertTrue(poly.contains(-2, -1)); // bottom side: true\n    assertTrue(poly.contains(-2, 0));  // bottom side: true\n    assertTrue(poly.contains(-2, 1));  // bottom side: true\n    assertFalse(poly.contains(2, -1));  // top side: false\n    assertFalse(poly.contains(2, 0));   // top side: false\n    assertFalse(poly.contains(2, 1));   // top side: false\n    assertFalse(poly.contains(-1, 2));  // right side: false\n    assertFalse(poly.contains(0, 2));   // right side: false\n    assertFalse(poly.contains(1, 2));   // right side: false\n    assertTrue(poly.contains(-1, -2)); // left side: true\n    assertTrue(poly.contains(0, -2));  // left side: true\n    assertTrue(poly.contains(1, -2));  // left side: true\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testEdgeInsideness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testEdgeInsideness().mjava","sourceNew":"  /** Tests edge case behavior with respect to insideness */\n  public void testEdgeInsideness() {\n    Polygon2D poly = Polygon2D.create(new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 }));\n    assertTrue(poly.contains(-2, -2)); // bottom left corner: true\n    assertFalse(poly.contains(-2, 2));  // bottom right corner: false\n    assertFalse(poly.contains(2, -2));  // top left corner: false\n    assertFalse(poly.contains(2,  2));  // top right corner: false\n    assertTrue(poly.contains(-2, -1)); // bottom side: true\n    assertTrue(poly.contains(-2, 0));  // bottom side: true\n    assertTrue(poly.contains(-2, 1));  // bottom side: true\n    assertFalse(poly.contains(2, -1));  // top side: false\n    assertFalse(poly.contains(2, 0));   // top side: false\n    assertFalse(poly.contains(2, 1));   // top side: false\n    assertFalse(poly.contains(-1, 2));  // right side: false\n    assertFalse(poly.contains(0, 2));   // right side: false\n    assertFalse(poly.contains(1, 2));   // right side: false\n    assertTrue(poly.contains(-1, -2)); // left side: true\n    assertTrue(poly.contains(0, -2));  // left side: true\n    assertTrue(poly.contains(1, -2));  // left side: true\n  }\n\n","sourceOld":"  /** Tests edge case behavior with respect to insideness */\n  public void testEdgeInsideness() {\n    Polygon poly = new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 });\n    assertTrue(poly.contains(-2, -2)); // bottom left corner: true\n    assertFalse(poly.contains(-2, 2));  // bottom right corner: false\n    assertFalse(poly.contains(2, -2));  // top left corner: false\n    assertFalse(poly.contains(2,  2));  // top right corner: false\n    assertTrue(poly.contains(-2, -1)); // bottom side: true\n    assertTrue(poly.contains(-2, 0));  // bottom side: true\n    assertTrue(poly.contains(-2, 1));  // bottom side: true\n    assertFalse(poly.contains(2, -1));  // top side: false\n    assertFalse(poly.contains(2, 0));   // top side: false\n    assertFalse(poly.contains(2, 1));   // top side: false\n    assertFalse(poly.contains(-1, 2));  // right side: false\n    assertFalse(poly.contains(0, 2));   // right side: false\n    assertFalse(poly.contains(1, 2));   // right side: false\n    assertTrue(poly.contains(-1, -2)); // left side: true\n    assertTrue(poly.contains(0, -2));  // left side: true\n    assertTrue(poly.contains(1, -2));  // left side: true\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testEdgeInsideness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testEdgeInsideness().mjava","sourceNew":"  /** Tests edge case behavior with respect to insideness */\n  public void testEdgeInsideness() {\n    Polygon2D poly = Polygon2D.create(new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 }));\n    assertTrue(poly.contains(-2, -2)); // bottom left corner: true\n    assertFalse(poly.contains(-2, 2));  // bottom right corner: false\n    assertFalse(poly.contains(2, -2));  // top left corner: false\n    assertFalse(poly.contains(2,  2));  // top right corner: false\n    assertTrue(poly.contains(-2, -1)); // bottom side: true\n    assertTrue(poly.contains(-2, 0));  // bottom side: true\n    assertTrue(poly.contains(-2, 1));  // bottom side: true\n    assertFalse(poly.contains(2, -1));  // top side: false\n    assertFalse(poly.contains(2, 0));   // top side: false\n    assertFalse(poly.contains(2, 1));   // top side: false\n    assertFalse(poly.contains(-1, 2));  // right side: false\n    assertFalse(poly.contains(0, 2));   // right side: false\n    assertFalse(poly.contains(1, 2));   // right side: false\n    assertTrue(poly.contains(-1, -2)); // left side: true\n    assertTrue(poly.contains(0, -2));  // left side: true\n    assertTrue(poly.contains(1, -2));  // left side: true\n  }\n\n","sourceOld":"  /** Tests edge case behavior with respect to insideness */\n  public void testEdgeInsideness() {\n    Polygon poly = new Polygon(new double[] { -2, -2, 2, 2, -2 }, new double[] { -2, 2, 2, -2, -2 });\n    assertTrue(poly.contains(-2, -2)); // bottom left corner: true\n    assertFalse(poly.contains(-2, 2));  // bottom right corner: false\n    assertFalse(poly.contains(2, -2));  // top left corner: false\n    assertFalse(poly.contains(2,  2));  // top right corner: false\n    assertTrue(poly.contains(-2, -1)); // bottom side: true\n    assertTrue(poly.contains(-2, 0));  // bottom side: true\n    assertTrue(poly.contains(-2, 1));  // bottom side: true\n    assertFalse(poly.contains(2, -1));  // top side: false\n    assertFalse(poly.contains(2, 0));   // top side: false\n    assertFalse(poly.contains(2, 1));   // top side: false\n    assertFalse(poly.contains(-1, 2));  // right side: false\n    assertFalse(poly.contains(0, 2));   // right side: false\n    assertFalse(poly.contains(1, 2));   // right side: false\n    assertTrue(poly.contains(-1, -2)); // left side: true\n    assertTrue(poly.contains(0, -2));  // left side: true\n    assertTrue(poly.contains(1, -2));  // left side: true\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","925fce43f3bac029d912b9b7de03c789e258a333"],"a35a7d0e36dd6f5b4f8053ac085490326734d5e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a35a7d0e36dd6f5b4f8053ac085490326734d5e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a35a7d0e36dd6f5b4f8053ac085490326734d5e4","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a35a7d0e36dd6f5b4f8053ac085490326734d5e4":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}