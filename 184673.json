{"path":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginAffinityReplicaPlacement.CoresAndDiskComparator#CoresAndDiskComparator(AttributeValues,Map[Node,Integer],long).mjava","commits":[{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginAffinityReplicaPlacement.CoresAndDiskComparator#CoresAndDiskComparator(AttributeValues,Map[Node,Integer],long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The data we sort on is not part of the {@link Node} instances but has to be retrieved from the attributes and configuration.\n     * The number of cores per node is passed in a map whereas the free disk is fetched from the attributes due to the\n     * fact that we update the number of cores per node as we do allocations, but we do not update the free disk. The\n     * attrValues correpsonding to the number of cores per node are the initial values, but we want to comapre the actual\n     * value taking into account placement decisions already made during the current execution of the placement plugin.\n     */\n    CoresAndDiskComparator(AttributeValues attrValues, Map<Node, Integer> coresOnNodes, long deprioritizedFreeDiskGB) {\n      this.attrValues = attrValues;\n      this.coresOnNodes = coresOnNodes;\n      this.deprioritizedFreeDiskGB = deprioritizedFreeDiskGB;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":0,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginAffinityReplicaPlacement.CoresAndDiskComparator#CoresAndDiskComparator(AttributeValues,Map[Node,Integer],long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The data we sort on is not part of the {@link Node} instances but has to be retrieved from the attributes and configuration.\n     * The number of cores per node is passed in a map whereas the free disk is fetched from the attributes due to the\n     * fact that we update the number of cores per node as we do allocations, but we do not update the free disk. The\n     * attrValues correpsonding to the number of cores per node are the initial values, but we want to comapre the actual\n     * value taking into account placement decisions already made during the current execution of the placement plugin.\n     */\n    CoresAndDiskComparator(AttributeValues attrValues, Map<Node, Integer> coresOnNodes, long deprioritizedFreeDiskGB) {\n      this.attrValues = attrValues;\n      this.coresOnNodes = coresOnNodes;\n      this.deprioritizedFreeDiskGB = deprioritizedFreeDiskGB;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}