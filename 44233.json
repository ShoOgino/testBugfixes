{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","commits":[{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"/dev/null","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.valueOf(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"/dev/null","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.valueOf(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.valueOf(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.valueOf(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.valueOf(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0]);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0]);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0], 0f);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareHits(IndexReader,IndexReader,TopDocs,Map[Integer,TopDocs]).mjava","sourceNew":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(new TotalHits(0, TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","sourceOld":"  private void compareHits(IndexReader r, IndexReader joinR, TopDocs controlHits, Map<Integer, TopDocs> joinResults) throws Exception {\n    int currentParentID = -1;\n    int childHitSlot = 0;\n    TopDocs childHits = new TopDocs(0, new ScoreDoc[0]);\n    for (ScoreDoc controlHit : controlHits.scoreDocs) {\n      Document controlDoc = r.document(controlHit.doc);\n      int parentID = Integer.parseInt(controlDoc.get(\"parentID\"));\n      if (parentID != currentParentID) {\n        assertEquals(childHitSlot, childHits.scoreDocs.length);\n        currentParentID = parentID;\n        childHitSlot = 0;\n        childHits = joinResults.get(parentID);\n      }\n\n      String controlChildID = controlDoc.get(\"childID\");\n      Document childDoc = joinR.document(childHits.scoreDocs[childHitSlot++].doc);\n      String childID = childDoc.get(\"childID\");\n      assertEquals(controlChildID, childID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}