{"path":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","commits":[{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(String,BytesRef).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes())) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b6a0e3c1c21aac8ecf75706605133012833585c7","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}