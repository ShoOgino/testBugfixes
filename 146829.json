{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","sourceNew":"    /**\n     * Takes arg of prolog file name and index directory.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map<String,List<String>> word2Nums = new TreeMap<String,List<String>>();\n        // maps a group to all the words in it\n        final Map<String,List<String>> num2Words = new TreeMap<String,List<String>>();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.lastIndexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase().replace(\"''\", \"'\");\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List<String> lis = word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList<String>();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList<String>();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","sourceOld":"    /**\n     * Takes arg of prolog file name and index directory.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map<String,List<String>> word2Nums = new TreeMap<String,List<String>>();\n        // maps a group to all the words in it\n        final Map<String,List<String>> num2Words = new TreeMap<String,List<String>>();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.lastIndexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase().replace(\"''\", \"'\");\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List<String> lis = word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList<String>();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList<String>();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Takes arg of prolog file name and index directory.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map<String,List<String>> word2Nums = new TreeMap<String,List<String>>();\n        // maps a group to all the words in it\n        final Map<String,List<String>> num2Words = new TreeMap<String,List<String>>();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.lastIndexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase().replace(\"''\", \"'\");\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List<String> lis = word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList<String>();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList<String>();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}