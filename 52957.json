{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionFailOneDoc().mjava","commits":[{"id":"6be407dee495c09fdba67c96a73858848977cc20","date":1526477959,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptionFailOneDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocumentsWriterExceptionFailOneDoc() throws Exception {\n    Analyzer analyzer = new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n    for (int i = 0; i < 10; i++) {\n      try (Directory dir = newDirectory();\n           final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(analyzer)\n               .setMaxBufferedDocs(-1)\n               .setRAMBufferSizeMB(random().nextBoolean() ? 0.00001 : Integer.MAX_VALUE)\n               .setMergePolicy(new FilterMergePolicy(NoMergePolicy.INSTANCE) {\n                 @Override\n                 public boolean keepFullyDeletedSegment(IOSupplier<CodecReader> readerIOSupplier) {\n                   return true;\n                 }\n               }))) {\n        Document doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n        doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n        expectThrows(IOException.class, () -> {\n          writer.addDocument(doc);\n        });\n        writer.commit();\n        try (IndexReader reader = DirectoryReader.open(dir)) {\n            assertEquals(2, reader.docFreq(new Term(\"contents\", \"here\")));\n            assertEquals(2, reader.maxDoc());\n            assertEquals(1, reader.numDocs());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6be407dee495c09fdba67c96a73858848977cc20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6be407dee495c09fdba67c96a73858848977cc20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6be407dee495c09fdba67c96a73858848977cc20"],"6be407dee495c09fdba67c96a73858848977cc20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}