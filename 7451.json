{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533890d1266aa8169162ec556395d0c5d0377566","date":1337173867,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    \n    int base = 0;\n    int doc = -1;\n    for (AtomicReader r : reader.getSequentialSubReaders()) {\n      DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n          new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n      if (docs != null) {\n        doc = docs.nextDoc() + base;\n        break;\n      }\n      base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119bc02554a192b2954b73d79389ec441257b624","date":1337232699,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      openInternalReader();\n    }\n    \n    int base = 0;\n    int doc = -1;\n    for (AtomicReader r : reader.getSequentialSubReaders()) {\n      DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n          new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n      if (docs != null) {\n        doc = docs.nextDoc() + base;\n        break;\n      }\n      base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    \n    int base = 0;\n    int doc = -1;\n    for (AtomicReader r : reader.getSequentialSubReaders()) {\n      DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n          new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n      if (docs != null) {\n        doc = docs.nextDoc() + base;\n        break;\n      }\n      base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      openInternalReader();\n    }\n    \n    int base = 0;\n    int doc = -1;\n    for (AtomicReader r : reader.getSequentialSubReaders()) {\n      DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n          new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n      if (docs != null) {\n        doc = docs.nextDoc() + base;\n        break;\n      }\n      base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n            new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      openInternalReader();\n    }\n    \n    int base = 0;\n    int doc = -1;\n    for (AtomicReader r : reader.getSequentialSubReaders()) {\n      DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n          new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n      if (docs != null) {\n        doc = docs.nextDoc() + base;\n        break;\n      }\n      base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b52ea8b7f80d4a0600efc9765dc896387008ebd4","date":1340109038,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, false);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, \n            new BytesRef(categoryPath.toString(delimiter, prefixLen)), false);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, false);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, false);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, false);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        DocsEnum docs = ctx.reader().termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + ctx.docBase;\n          break;\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":["02331260bb246364779cb6f04919ca47900d01bb","8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        DocsEnum docs = ctx.reader().termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + ctx.docBase;\n          break;\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        DocsEnum docs = ctx.reader().termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + ctx.docBase;\n          break;\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      int base = 0;\n      for (AtomicReader r : reader.getSequentialSubReaders()) {\n        DocsEnum docs = r.termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + base;\n          break;\n        }\n        base += r.maxDoc(); // we don't have deletions, so it's ok to call maxDoc\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // TODO: is it really ok that null is passed here as liveDocs?\n            DocsEnum docs = termsEnum.docs(null, null, 0);\n            doc = docs.nextDoc() + ctx.docBase;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        DocsEnum docs = ctx.reader().termDocsEnum(null, Consts.FULL, catTerm, 0);\n        if (docs != null) {\n          doc = docs.nextDoc() + ctx.docBase;\n          break;\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // TODO: is it really ok that null is passed here as liveDocs?\n            DocsEnum docs = termsEnum.docs(null, null, 0);\n            doc = docs.nextDoc() + ctx.docBase;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // TODO: is it really ok that null is passed here as liveDocs?\n            DocsEnum docs = termsEnum.docs(null, null, 0);\n            doc = docs.nextDoc() + ctx.docBase;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n      throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n    \n    cacheMisses.incrementAndGet();\n    perhapsFillCache();\n    res = cache.get(categoryPath, prefixLen);\n    if (res >= 0 || cacheIsComplete) {\n      return res;\n    }\n\n    initReaderManager();\n    \n    int doc = -1;\n    DirectoryReader reader = readerManager.acquire();\n    try {\n      TermsEnum termsEnum = null; // reuse\n      DocsEnum docs = null; // reuse\n      final BytesRef catTerm = new BytesRef(categoryPath.toString(delimiter, prefixLen));\n      for (AtomicReaderContext ctx : reader.leaves()) {\n        Terms terms = ctx.reader().terms(Consts.FULL);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n          if (termsEnum.seekExact(catTerm, true)) {\n            // liveDocs=null because the taxonomy has no deletes\n            docs = termsEnum.docs(null, docs, 0 /* freqs not required */);\n            // if the term was found, we know it has exactly one document.\n            doc = docs.nextDoc() + ctx.docBase;\n            break;\n          }\n        }\n      }\n    } finally {\n      readerManager.release(reader);\n    }\n    \n    if (doc > 0) {\n      addToCache(categoryPath, prefixLen, doc);\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"119bc02554a192b2954b73d79389ec441257b624":["533890d1266aa8169162ec556395d0c5d0377566"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b6a0e3c1c21aac8ecf75706605133012833585c7","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d6f074e73200c07d54f242d3880a8da5a35ff97b","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b52ea8b7f80d4a0600efc9765dc896387008ebd4","02331260bb246364779cb6f04919ca47900d01bb"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b52ea8b7f80d4a0600efc9765dc896387008ebd4","02331260bb246364779cb6f04919ca47900d01bb"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["119bc02554a192b2954b73d79389ec441257b624"],"533890d1266aa8169162ec556395d0c5d0377566":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["02331260bb246364779cb6f04919ca47900d01bb"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","119bc02554a192b2954b73d79389ec441257b624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"02331260bb246364779cb6f04919ca47900d01bb":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"119bc02554a192b2954b73d79389ec441257b624":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683","ef0d8a69209261514c5739c770bba706c2308450"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["533890d1266aa8169162ec556395d0c5d0377566","ef0d8a69209261514c5739c770bba706c2308450"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"533890d1266aa8169162ec556395d0c5d0377566":["119bc02554a192b2954b73d79389ec441257b624"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","b6a0e3c1c21aac8ecf75706605133012833585c7"],"ef0d8a69209261514c5739c770bba706c2308450":[],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}