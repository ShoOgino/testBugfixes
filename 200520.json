{"path":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkNoMatchExplanations(Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that all documents up to maxDoc which are *not* in the\n   * expected result set, have an explanation which indicates that \n   * the document does not match\n   */\n  public static void checkNoMatchExplanations(Query q, String defaultFieldName,\n                                              IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    String d = q.toString(defaultFieldName);\n    Set<Integer> ignore = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      ignore.add(Integer.valueOf(results[i]));\n    }\n    \n    int maxDoc = searcher.getIndexReader().maxDoc();\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (ignore.contains(Integer.valueOf(doc))) continue;\n\n      Explanation exp = searcher.explain(q, doc);\n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\",\n                             exp);\n      Assert.assertFalse(\"Explanation of [[\"+d+\"]] for #\"+doc+\n                         \" doesn't indicate non-match: \" + exp.toString(),\n                         exp.isMatch());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}