{"path":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#reset().mjava","sourceNew":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"/dev/null","sourceNew":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","sourceNew":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}