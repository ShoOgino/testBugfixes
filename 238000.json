{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestBlockWriter#testAddMultipleLinesMultiBlock().mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestBlockWriter#testAddMultipleLinesMultiBlock().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddMultipleLinesMultiBlock() throws IOException {\n    String[] terms = new String[]{\n        \"ana\",\n        \"bark\",\n        \"condor\",\n        \"dice\",\n        \"elephant\",\n        \"fork\",\n        \"gain\",\n        \"hyper\",\n        \"identifier\",\n        \"judge\",\n        \"ko\",\n        \"large\",\n    };\n    // in order to build a block a FieldMetadata must be set\n    blockWriter.setField(new FieldMetadata(getMockFieldInfo(\"content\", 0), 0));\n\n    FSTDictionary.Builder dictionaryBuilder = new FSTDictionary.Builder();\n\n    for (String t : terms) {\n      blockWriter.addLine(new BytesRef(t), MockTermStateFactory.create(), dictionaryBuilder);\n    }\n    //at least one block was flushed\n    assertTrue(blockOutput.getFilePointer() > 0);\n\n    // last term is always the last term to be writen\n    assertEquals(new BytesRef(terms[terms.length - 1]), blockWriter.lastTerm);\n\n    // remains 'large' to be flushed\n    assertEquals(1, blockWriter.blockLines.size());\n\n    blockWriter.finishLastBlock(dictionaryBuilder);\n\n    // we release memory\n    assertTrue(blockWriter.blockLines.isEmpty());\n    assertNull(blockWriter.lastTerm);\n    assertEquals(0, blockWriter.blockLinesWriteBuffer.size());\n    assertEquals(0, blockWriter.termStatesWriteBuffer.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}