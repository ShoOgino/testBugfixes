{"path":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","commits":[{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb37680595d3fecd821eaa695beb5c9ced607584","date":1497668271,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.automatonIsBinary = isBinary;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.automatonIsBinary = isBinary;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.automatonIsBinary = isBinary;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.automatonIsBinary = isBinary;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n\n    this.ramBytesUsed = BASE_RAM_BYTES + term.ramBytesUsed() + automaton.ramBytesUsed() + compiled.ramBytesUsed();\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex automata.\n   * @param isBinary if true, this automaton is already binary and\n   *   will not go through the UTF32ToUTF8 conversion\n   */\n  public AutomatonQuery(final Term term, Automaton automaton, int maxDeterminizedStates, boolean isBinary) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.automatonIsBinary = isBinary;\n    // TODO: we could take isFinite too, to save a bit of CPU in CompiledAutomaton ctor?:\n    this.compiled = new CompiledAutomaton(automaton, null, true, maxDeterminizedStates, isBinary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb37680595d3fecd821eaa695beb5c9ced607584":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"fe90d104db258964b96e50418b9caa0c156eafda":["28288370235ed02234a64753cdbf0c6ec096304a"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"28288370235ed02234a64753cdbf0c6ec096304a":["3e8715d826e588419327562287d5d6a8040d63d6","fb37680595d3fecd821eaa695beb5c9ced607584"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3e8715d826e588419327562287d5d6a8040d63d6","fb37680595d3fecd821eaa695beb5c9ced607584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe90d104db258964b96e50418b9caa0c156eafda"]},"commit2Childs":{"fb37680595d3fecd821eaa695beb5c9ced607584":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"fe90d104db258964b96e50418b9caa0c156eafda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["fb37680595d3fecd821eaa695beb5c9ced607584","d2638f781be724518ff6c2263d14a48cf6e68017","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["fe90d104db258964b96e50418b9caa0c156eafda"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}