{"path":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n\r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n\r\n    CloudState cloudState2 = zkController2.getCloudState();\r\n    Map<String,Slice> slices = cloudState2.getSlices(\"testcore\");\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 4; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcf2b43cd182f2795c8255306f74ae02e709afa","date":1287420483,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n\r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n\r\n    CloudState cloudState2 = zkController2.getCloudState();\r\n    Map<String,Slice> slices = cloudState2.getSlices(\"testcore\");\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 10; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n\r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n\r\n    CloudState cloudState2 = zkController2.getCloudState();\r\n    Map<String,Slice> slices = cloudState2.getSlices(\"testcore\");\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 4; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n\r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n\r\n    CloudState cloudState2 = zkController2.getCloudState();\r\n    Map<String,Slice> slices = cloudState2.getSlices(\"testcore\");\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 10; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10073af20ef30dbf21e82f81550dac30de8b926","date":1289598215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 10; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n\r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n\r\n    CloudState cloudState2 = zkController2.getCloudState();\r\n    Map<String,Slice> slices = cloudState2.getSlices(\"testcore\");\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 10; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d3c1cf363bd9411f9c98f1286defa182ca8f8a","date":1289623891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 10; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa99bedba38982ed667772792af094a2c758aa08","date":1289654291,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 100; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 100; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n\r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n\r\n    CloudState cloudState2 = zkController2.getCloudState();\r\n    Map<String,Slice> slices = cloudState2.getSlices(\"testcore\");\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 10; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n\r\n    Thread.sleep(2000);\r\n    \r\n    if (!container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName())) {\r\n      // pause some more\r\n      Thread.sleep(5000);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af8c99d5b7928f4fb0952080cb8207a5a3b330d","date":1289741209,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 100; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d307e775ad729882146213cd34b5a82ea14252","date":1289822714,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 60; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8776d445afb6891d9476ab26bae3c246057fe198","date":1289828818,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 60; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 60; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a6410f8f7c04d2d0d7a980811f9cca5996021d","date":1289874537,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 75; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause (15s timeout) for watch to trigger\r\n    for(int i = 0; i < (5 * 15); i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(200);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 60; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 75; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause (15s timeout) for watch to trigger\r\n    for(int i = 0; i < (5 * 15); i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(200);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    Thread.sleep(5000);\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 30; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause for watch to trigger\r\n    for(int i = 0; i < 30; i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(50);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 100; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 75; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause (15s timeout) for watch to trigger\r\n    for(int i = 0; i < (5 * 15); i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(200);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    \n  }\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 75; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause (15s timeout) for watch to trigger\r\n    for(int i = 0; i < (5 * 15); i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(200);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    \n  }\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 75; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause (15s timeout) for watch to trigger\r\n    for(int i = 0; i < (5 * 15); i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(200);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    \n  }\n\n","sourceOld":"  @Test\r\n  public void testCoreRegistration() throws Exception {\r\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.put(\"configName\", \"conf1\");\r\n    \r\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\r\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\r\n    zkClient.close();\r\n    \r\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\r\n        \"testcore\");\r\n    \r\n    dcore.setDataDir(dataDir4.getAbsolutePath());\r\n\r\n    SolrCore core = container1.create(dcore);\r\n    container1.register(core, false);\r\n    \r\n    ZkController zkController2 = container2.getZkController();\r\n\r\n    String host = zkController2.getHostName();\r\n    \r\n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\r\n    // with almost no delay ...\r\n    CloudState cloudState2 = null;\r\n    Map<String,Slice> slices = null;\r\n    for (int i = 75; i > 0; i--) {\r\n      cloudState2 = zkController2.getCloudState();\r\n      slices = cloudState2.getSlices(\"testcore\");\r\n      \r\n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\r\n        break;\r\n      }\r\n      Thread.sleep(500);\r\n    }\r\n\r\n    assertNotNull(slices);\r\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\r\n\r\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\r\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\r\n\r\n    Map<String,ZkNodeProps> shards = slice.getShards();\r\n\r\n    assertEquals(1, shards.size());\r\n\r\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\r\n\r\n    assertNotNull(zkProps);\r\n\r\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\r\n\r\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\r\n\r\n    Set<String> liveNodes = cloudState2.getLiveNodes();\r\n    assertNotNull(liveNodes);\r\n    assertEquals(3, liveNodes.size());\r\n\r\n    container3.shutdown();\r\n\r\n    // slight pause (15s timeout) for watch to trigger\r\n    for(int i = 0; i < (5 * 15); i++) {\r\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\r\n        break;\r\n      }\r\n      Thread.sleep(200);\r\n    }\r\n\r\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\r\n\r\n    // quickly kill / start client\r\n\r\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\r\n        .disconnect();\r\n    container2.shutdown();\r\n\r\n    container2 = init2.initialize();\r\n    \r\n    // pause for watch to trigger\r\n    for(int i = 0; i < 200; i++) {\r\n      if (container1.getZkController().getCloudState().liveNodesContain(\r\n          container2.getZkController().getNodeName())) {\r\n        break;\r\n      }\r\n      Thread.sleep(100);\r\n    }\r\n\r\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\r\n        container2.getZkController().getNodeName()));\r\n    \r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    core.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c6157ed72d468e7421f9c5e24553ba8e014011","date":1309960108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    core.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8776d445afb6891d9476ab26bae3c246057fe198":["d4d307e775ad729882146213cd34b5a82ea14252"],"b9d3c1cf363bd9411f9c98f1286defa182ca8f8a":["a10073af20ef30dbf21e82f81550dac30de8b926"],"d4d307e775ad729882146213cd34b5a82ea14252":["7af8c99d5b7928f4fb0952080cb8207a5a3b330d"],"2dcf2b43cd182f2795c8255306f74ae02e709afa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["00c6157ed72d468e7421f9c5e24553ba8e014011","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fa99bedba38982ed667772792af094a2c758aa08":["b9d3c1cf363bd9411f9c98f1286defa182ca8f8a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45a6410f8f7c04d2d0d7a980811f9cca5996021d"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00c6157ed72d468e7421f9c5e24553ba8e014011":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","45a6410f8f7c04d2d0d7a980811f9cca5996021d"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","fa99bedba38982ed667772792af094a2c758aa08"],"a10073af20ef30dbf21e82f81550dac30de8b926":["2dcf2b43cd182f2795c8255306f74ae02e709afa"],"7af8c99d5b7928f4fb0952080cb8207a5a3b330d":["fa99bedba38982ed667772792af094a2c758aa08"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["bed62fe6383040eaff2ec720cdc55bb1462c61da","00c6157ed72d468e7421f9c5e24553ba8e014011"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["bed62fe6383040eaff2ec720cdc55bb1462c61da","00c6157ed72d468e7421f9c5e24553ba8e014011"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["45a6410f8f7c04d2d0d7a980811f9cca5996021d"],"45a6410f8f7c04d2d0d7a980811f9cca5996021d":["8776d445afb6891d9476ab26bae3c246057fe198"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["00c6157ed72d468e7421f9c5e24553ba8e014011"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dcf2b43cd182f2795c8255306f74ae02e709afa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"8776d445afb6891d9476ab26bae3c246057fe198":["45a6410f8f7c04d2d0d7a980811f9cca5996021d"],"b9d3c1cf363bd9411f9c98f1286defa182ca8f8a":["fa99bedba38982ed667772792af094a2c758aa08"],"d4d307e775ad729882146213cd34b5a82ea14252":["8776d445afb6891d9476ab26bae3c246057fe198"],"2dcf2b43cd182f2795c8255306f74ae02e709afa":["a10073af20ef30dbf21e82f81550dac30de8b926","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa99bedba38982ed667772792af094a2c758aa08":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","7af8c99d5b7928f4fb0952080cb8207a5a3b330d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["00c6157ed72d468e7421f9c5e24553ba8e014011"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43adc163640856c8b07e4cf1b2046c9af56d3ae7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"00c6157ed72d468e7421f9c5e24553ba8e014011":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["2dcf2b43cd182f2795c8255306f74ae02e709afa"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"a10073af20ef30dbf21e82f81550dac30de8b926":["b9d3c1cf363bd9411f9c98f1286defa182ca8f8a"],"7af8c99d5b7928f4fb0952080cb8207a5a3b330d":["d4d307e775ad729882146213cd34b5a82ea14252"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["7a71a0b2d4be2299a163f60626729852d81a8e02","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"45a6410f8f7c04d2d0d7a980811f9cca5996021d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}