{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","pathOld":"/dev/null","sourceNew":"    void writeAllDocValuesUpdates() throws IOException {\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","pathOld":"/dev/null","sourceNew":"    void writeAllDocValuesUpdates() throws IOException {\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","pathOld":"/dev/null","sourceNew":"    void writeAllDocValuesUpdates() throws IOException {\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","sourceNew":"    void writeAllDocValuesUpdates() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        // this needs to be protected by the reader pool lock otherwise we hit ConcurrentModificationException\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, globalFieldNumberMap, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeAllDocValuesUpdates() throws IOException {\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","sourceNew":"    void writeAllDocValuesUpdates() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        // this needs to be protected by the reader pool lock otherwise we hit ConcurrentModificationException\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, globalFieldNumberMap, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeAllDocValuesUpdates() throws IOException {\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeAllDocValuesUpdates().mjava","sourceNew":null,"sourceOld":"    void writeAllDocValuesUpdates() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      Collection<ReadersAndUpdates> copy;\n      synchronized (this) {\n        // this needs to be protected by the reader pool lock otherwise we hit ConcurrentModificationException\n        copy = new HashSet<>(readerMap.values());\n      }\n      boolean any = false;\n      for (ReadersAndUpdates rld : copy) {\n        any |= rld.writeFieldUpdates(directory, globalFieldNumberMap, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["28288370235ed02234a64753cdbf0c6ec096304a","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1926100d9b67becc9701c54266fee3ba7878a5f0"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}