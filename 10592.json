{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddad85bf1fa8affa47db0bfde7f5412fa84cf2d2","date":1343106680,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    System.out.println(ts.toString());\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create();\n    ((Tokenizer)ts).setReader(new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(\n        new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\")\n    );\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create();\n    ((Tokenizer)ts).setReader(new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create();\n    ((Tokenizer)ts).setReader(new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testPreservePunctuation().mjava","sourceNew":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create(newAttributeFactory());\n    ((Tokenizer)ts).setReader(new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","sourceOld":"  /**\n   * Test preserving punctuation\n   */\n  public void testPreservePunctuation() throws IOException {\n    Map<String,String> args = new HashMap<>();\n    args.put(\"discardPunctuation\", \"false\");\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    TokenStream ts = factory.create();\n    ((Tokenizer)ts).setReader(new StringReader(\"今ノルウェーにいますが、来週の頭日本に戻ります。楽しみにしています！お寿司が食べたいな。。。\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"今\", \"ノルウェー\", \"に\", \"い\", \"ます\", \"が\", \"、\",\n            \"来週\", \"の\", \"頭\", \"日本\", \"に\", \"戻り\", \"ます\", \"。\",\n            \"楽しみ\", \"に\", \"し\", \"て\", \"い\", \"ます\", \"！\",\n            \"お\", \"寿司\", \"が\", \"食べ\", \"たい\", \"な\", \"。\", \"。\", \"。\"}\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddad85bf1fa8affa47db0bfde7f5412fa84cf2d2"],"ddad85bf1fa8affa47db0bfde7f5412fa84cf2d2":["3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"ddad85bf1fa8affa47db0bfde7f5412fa84cf2d2":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3241e06e642196396b80bb293acd9c0814d079e0":["ddad85bf1fa8affa47db0bfde7f5412fa84cf2d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}