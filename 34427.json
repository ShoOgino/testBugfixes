{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getErrorInfo(Throwable,NamedList).mjava","commits":[{"id":"d8d46584d4a299aaed53fdd79f1cd77f222aee1e","date":1331071171,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getErrorInfo(Throwable,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected int getErrorInfo(Throwable ex, NamedList info) {\n    int code=500;\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n    if(msg != null) {\n      info.add(\"msg\", msg);\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    info.add(\"code\", new Integer(code));\n    return code;\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.log(log, null, ex);\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n\n    res.sendError( code, msg + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getErrorInfo(Throwable,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  protected int getErrorInfo(Throwable ex, NamedList info) {\n    int code=500;\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n    if(msg != null) {\n      info.add(\"msg\", msg);\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    info.add(\"code\", new Integer(code));\n    return code;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getErrorInfo(Throwable,NamedList).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p/>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p/>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      code = ((SolrException)ex).code();\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  protected int getErrorInfo(Throwable ex, NamedList info) {\n    int code=500;\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n    if(msg != null) {\n      info.add(\"msg\", msg);\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    info.add(\"code\", new Integer(code));\n    return code;\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"]},"commit2Childs":{"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}