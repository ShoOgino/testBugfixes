{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#initSkip().mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#initSkip().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#initSkip().mjava","sourceNew":"  private void initSkip() {\n    if (!initialized) {\n      super.resetSkip();\n      Arrays.fill(lastSkipDoc, 0);\n      Arrays.fill(lastSkipDocPointer, lastDocFP);\n      if (fieldHasPositions) {\n        Arrays.fill(lastSkipPosPointer, lastPosFP);\n        if (fieldHasPayloads) {\n          Arrays.fill(lastPayloadByteUpto, 0);\n        }\n        if (fieldHasOffsets || fieldHasPayloads) {\n          Arrays.fill(lastSkipPayPointer, lastPayFP);\n        }\n      }\n      // sets of competitive freq,norm pairs should be empty at this point\n      assert Arrays.stream(curCompetitiveFreqNorms)\n          .map(CompetitiveImpactAccumulator::getCompetitiveFreqNormPairs)\n          .mapToInt(Set::size)\n          .sum() == 0;\n      initialized = true;\n    }\n  }\n\n","sourceOld":"  private void initSkip() {\n    if (!initialized) {\n      super.resetSkip();\n      Arrays.fill(lastSkipDoc, 0);\n      Arrays.fill(lastSkipDocPointer, lastDocFP);\n      if (fieldHasPositions) {\n        Arrays.fill(lastSkipPosPointer, lastPosFP);\n        if (fieldHasPayloads) {\n          Arrays.fill(lastPayloadByteUpto, 0);\n        }\n        if (fieldHasOffsets || fieldHasPayloads) {\n          Arrays.fill(lastSkipPayPointer, lastPayFP);\n        }\n      }\n      // sets of competitive freq,norm pairs should be empty at this point\n      assert Arrays.stream(curCompetitiveFreqNorms)\n          .map(CompetitiveImpactAccumulator::getCompetitiveFreqNormPairs)\n          .mapToInt(Set::size)\n          .sum() == 0;\n      initialized = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f50c9e80683584f12bcb862485e917b70cad163f","date":1574765397,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#initSkip().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#initSkip().mjava","sourceNew":"  private void initSkip() {\n    if (!initialized) {\n      super.resetSkip();\n      Arrays.fill(lastSkipDoc, 0);\n      Arrays.fill(lastSkipDocPointer, lastDocFP);\n      if (fieldHasPositions) {\n        Arrays.fill(lastSkipPosPointer, lastPosFP);\n        if (fieldHasPayloads) {\n          Arrays.fill(lastPayloadByteUpto, 0);\n        }\n        if (fieldHasOffsets || fieldHasPayloads) {\n          Arrays.fill(lastSkipPayPointer, lastPayFP);\n        }\n      }\n      // sets of competitive freq,norm pairs should be empty at this point\n      assert Arrays.stream(curCompetitiveFreqNorms)\n          .map(CompetitiveImpactAccumulator::getCompetitiveFreqNormPairs)\n          .mapToInt(Collection::size)\n          .sum() == 0;\n      initialized = true;\n    }\n  }\n\n","sourceOld":"  private void initSkip() {\n    if (!initialized) {\n      super.resetSkip();\n      Arrays.fill(lastSkipDoc, 0);\n      Arrays.fill(lastSkipDocPointer, lastDocFP);\n      if (fieldHasPositions) {\n        Arrays.fill(lastSkipPosPointer, lastPosFP);\n        if (fieldHasPayloads) {\n          Arrays.fill(lastPayloadByteUpto, 0);\n        }\n        if (fieldHasOffsets || fieldHasPayloads) {\n          Arrays.fill(lastSkipPayPointer, lastPayFP);\n        }\n      }\n      // sets of competitive freq,norm pairs should be empty at this point\n      assert Arrays.stream(curCompetitiveFreqNorms)\n          .map(CompetitiveImpactAccumulator::getCompetitiveFreqNormPairs)\n          .mapToInt(Set::size)\n          .sum() == 0;\n      initialized = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f50c9e80683584f12bcb862485e917b70cad163f":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f50c9e80683584f12bcb862485e917b70cad163f"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["f50c9e80683584f12bcb862485e917b70cad163f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"f50c9e80683584f12bcb862485e917b70cad163f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}