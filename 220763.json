{"path":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#add(List[String],List[Token],boolean,boolean).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SlowSynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SlowSynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SlowSynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SlowSynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SlowSynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SlowSynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SlowSynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SlowSynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new InitializationException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SlowSynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SlowSynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SlowSynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SlowSynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SlowSynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SlowSynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SlowSynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SlowSynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new InitializationException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}