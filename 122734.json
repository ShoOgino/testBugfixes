{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testCopyFieldRules().mjava","commits":[{"id":"1aa4053d832bb1d5950f8e19afa8aedb2bcdf215","date":1580832211,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testCopyFieldRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyFieldRules() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    List l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n\n    String payload = \"{\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':'name'\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertFalse(\"'bleh_s' copyField rule doesn't exist\", l.isEmpty());\n    assertEquals(\"bleh_s\", ((Map)l.get(0)).get(\"source\"));\n    assertEquals(\"name\", ((Map)l.get(0)).get(\"dest\"));\n\n    // delete copy field rule\n    payload = \"{\\n\" +\n        \"          'delete-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':'name'\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n\n    // copy and delete with multiple destination\n    payload = \"{\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':['name','bind']\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertEquals(2, l.size());\n\n    payload = \"{\\n\" +\n        \"          'delete-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':['name','bind']\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testCopyFieldRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testCopyFieldRules().mjava","sourceNew":"  public void testCopyFieldRules() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    @SuppressWarnings({\"rawtypes\"})\n    List l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n\n    String payload = \"{\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':'name'\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    String response = harness.post(\"/schema\", json(payload));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertFalse(\"'bleh_s' copyField rule doesn't exist\", l.isEmpty());\n    assertEquals(\"bleh_s\", ((Map)l.get(0)).get(\"source\"));\n    assertEquals(\"name\", ((Map)l.get(0)).get(\"dest\"));\n\n    // delete copy field rule\n    payload = \"{\\n\" +\n        \"          'delete-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':'name'\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n\n    // copy and delete with multiple destination\n    payload = \"{\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':['name','bind']\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertEquals(2, l.size());\n\n    payload = \"{\\n\" +\n        \"          'delete-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':['name','bind']\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n  }\n\n","sourceOld":"  public void testCopyFieldRules() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    List l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n\n    String payload = \"{\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':'name'\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertFalse(\"'bleh_s' copyField rule doesn't exist\", l.isEmpty());\n    assertEquals(\"bleh_s\", ((Map)l.get(0)).get(\"source\"));\n    assertEquals(\"name\", ((Map)l.get(0)).get(\"dest\"));\n\n    // delete copy field rule\n    payload = \"{\\n\" +\n        \"          'delete-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':'name'\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n\n    // copy and delete with multiple destination\n    payload = \"{\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':['name','bind']\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertEquals(2, l.size());\n\n    payload = \"{\\n\" +\n        \"          'delete-copy-field' : {\\n\" +\n        \"                       'source' :'bleh_s',\\n\" +\n        \"                       'dest':['name','bind']\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    l = getSourceCopyFields(harness, \"bleh_s\");\n    assertTrue(\"'bleh_s' copyField rule exists in the schema\", l.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aa4053d832bb1d5950f8e19afa8aedb2bcdf215":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1aa4053d832bb1d5950f8e19afa8aedb2bcdf215"]},"commit2Childs":{"1aa4053d832bb1d5950f8e19afa8aedb2bcdf215":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aa4053d832bb1d5950f8e19afa8aedb2bcdf215"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}