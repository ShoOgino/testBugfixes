{"path":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.FixedIntsEnumImpl#FixedIntsEnumImpl(AttributeSource,IndexInput,ValueType).mjava","commits":[{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.FixedIntsEnumImpl#FixedIntsEnumImpl(AttributeSource,IndexInput,ValueType).mjava","pathOld":"/dev/null","sourceNew":"    private FixedIntsEnumImpl(AttributeSource source, IndexInput dataIn,\n        ValueType type) throws IOException {\n      super(source, type);\n      switch (type) {\n      case FIXED_INTS_16:\n        sizeInByte = 2;\n        break;\n      case FIXED_INTS_32:\n        sizeInByte = 4;\n        break;\n      case FIXED_INTS_64:\n        sizeInByte = 8;\n        break;\n      case FIXED_INTS_8:\n        sizeInByte = 1;\n        break;\n      default:\n        throw new IllegalStateException(\"type \" + type\n            + \" is not a fixed int type\");\n      }\n      intsRef.offset = 0;\n      this.dataIn = dataIn;\n      maxDoc = dataIn.readInt();\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.FixedIntsEnumImpl#FixedIntsEnumImpl(AttributeSource,IndexInput,ValueType,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.FixedIntsEnumImpl#FixedIntsEnumImpl(AttributeSource,IndexInput,ValueType).mjava","sourceNew":"    private FixedIntsEnumImpl(AttributeSource source, IndexInput dataIn,\n        ValueType type, int maxDoc) throws IOException {\n      super(source, type);\n      switch (type) {\n      case FIXED_INTS_16:\n        sizeInByte = 2;\n        break;\n      case FIXED_INTS_32:\n        sizeInByte = 4;\n        break;\n      case FIXED_INTS_64:\n        sizeInByte = 8;\n        break;\n      case FIXED_INTS_8:\n        sizeInByte = 1;\n        break;\n      default:\n        throw new IllegalStateException(\"type \" + type\n            + \" is not a fixed int type\");\n      }\n      intsRef.offset = 0;\n      this.dataIn = dataIn;\n      this.maxDoc = maxDoc;\n\n    }\n\n","sourceOld":"    private FixedIntsEnumImpl(AttributeSource source, IndexInput dataIn,\n        ValueType type) throws IOException {\n      super(source, type);\n      switch (type) {\n      case FIXED_INTS_16:\n        sizeInByte = 2;\n        break;\n      case FIXED_INTS_32:\n        sizeInByte = 4;\n        break;\n      case FIXED_INTS_64:\n        sizeInByte = 8;\n        break;\n      case FIXED_INTS_8:\n        sizeInByte = 1;\n        break;\n      default:\n        throw new IllegalStateException(\"type \" + type\n            + \" is not a fixed int type\");\n      }\n      intsRef.offset = 0;\n      this.dataIn = dataIn;\n      maxDoc = dataIn.readInt();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"]},"commit2Childs":{"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}