{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","commits":[{"id":"8c208fbf3daca3ea1b644a76111fd70256212d50","date":1428090221,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanNearQuery([A B C], N, true) ⊆ SpanNearQuery([A B C], N+1, true) */\n  public void testSpanNearIncreasingOrderedSloppiness3() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2), new SpanTermQuery(t3) };\n    for (int i = 0; i < 10; i++) {\n      SpanNearQuery q1 = new SpanNearQuery(subquery, i, true);\n      SpanNearQuery q2 = new SpanNearQuery(subquery, i+1, true);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanNearQuery([A B C], N, true) ⊆ SpanNearQuery([A B C], N+1, true) */\n  public void testSpanNearIncreasingOrderedSloppiness3() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2), new SpanTermQuery(t3) };\n    for (int i = 0; i < 10; i++) {\n      SpanNearQuery q1 = new SpanNearQuery(subquery, i, true);\n      SpanNearQuery q2 = new SpanNearQuery(subquery, i+1, true);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28b61f1c9cf357a13efbb645d116d056feb80cf6","date":1428863054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","sourceNew":"  /** SpanNearQuery([A B C], N, true) ⊆ SpanNearQuery([A B C], N+1, true) */\n  public void testSpanNearIncreasingOrderedSloppiness3() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             span(new SpanTermQuery(t1)), \n                             span(new SpanTermQuery(t2)), \n                             span(new SpanTermQuery(t3)) \n                           };\n    for (int i = 0; i < 10; i++) {\n      SpanQuery q1 = span(new SpanNearQuery(subquery, i, true));\n      SpanQuery q2 = span(new SpanNearQuery(subquery, i+1, true));\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** SpanNearQuery([A B C], N, true) ⊆ SpanNearQuery([A B C], N+1, true) */\n  public void testSpanNearIncreasingOrderedSloppiness3() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2), new SpanTermQuery(t3) };\n    for (int i = 0; i < 10; i++) {\n      SpanNearQuery q1 = new SpanNearQuery(subquery, i, true);\n      SpanNearQuery q2 = new SpanNearQuery(subquery, i+1, true);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":["8c208fbf3daca3ea1b644a76111fd70256212d50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearIncreasingOrderedSloppiness3().mjava","sourceNew":"  /** SpanNearQuery([A B C], N, true) ⊆ SpanNearQuery([A B C], N+1, true) */\n  public void testSpanNearIncreasingOrderedSloppiness3() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)), \n                             spanQuery(new SpanTermQuery(t3)) \n                           };\n    for (int i = 0; i < 10; i++) {\n      SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, i, true));\n      SpanQuery q2 = spanQuery(new SpanNearQuery(subquery, i+1, true));\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** SpanNearQuery([A B C], N, true) ⊆ SpanNearQuery([A B C], N+1, true) */\n  public void testSpanNearIncreasingOrderedSloppiness3() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             span(new SpanTermQuery(t1)), \n                             span(new SpanTermQuery(t2)), \n                             span(new SpanTermQuery(t3)) \n                           };\n    for (int i = 0; i < 10; i++) {\n      SpanQuery q1 = span(new SpanNearQuery(subquery, i, true));\n      SpanQuery q2 = span(new SpanNearQuery(subquery, i+1, true));\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c208fbf3daca3ea1b644a76111fd70256212d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8c208fbf3daca3ea1b644a76111fd70256212d50"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["8c208fbf3daca3ea1b644a76111fd70256212d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"8c208fbf3daca3ea1b644a76111fd70256212d50":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","28b61f1c9cf357a13efbb645d116d056feb80cf6"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c208fbf3daca3ea1b644a76111fd70256212d50","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}