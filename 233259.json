{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","commits":[{"id":"7cf464adc9721589a2872247d15442e59766e791","date":1327607202,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","pathOld":"/dev/null","sourceNew":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getCloudState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","pathOld":"/dev/null","sourceNew":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getCloudState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","pathOld":"/dev/null","sourceNew":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getCloudState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getCloudState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getCloudState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":["82f063229e39b59c960866c1bc49285b95676491","82f063229e39b59c960866c1bc49285b95676491"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":null,"sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getCloudState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["7cf464adc9721589a2872247d15442e59766e791"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7cf464adc9721589a2872247d15442e59766e791"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["7cf464adc9721589a2872247d15442e59766e791","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7cf464adc9721589a2872247d15442e59766e791"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["7cf464adc9721589a2872247d15442e59766e791","3f767f8c99eaedb984df754fe61f21c5de260f94"],"7cf464adc9721589a2872247d15442e59766e791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","7cf464adc9721589a2872247d15442e59766e791"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"7cf464adc9721589a2872247d15442e59766e791":["3f767f8c99eaedb984df754fe61f21c5de260f94","78a55f24d9b493c2a1cecf79f1d78279062b545b","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","8fd5be977c105554c6a7b68afcdbc511439723ab"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}