{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            try {\n              listener.init(coreContainer, config);\n              listenersPerName.put(config.name, listener);\n            } catch (Exception e) {\n              log.warn(\"Error initializing TriggerListener \" + config, e);\n              try {\n                listener.close();\n              } catch (Exception e1) {\n                // ignore\n              }\n              listener = null;\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (AutoScaling.EventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, AutoScaling.EventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, AutoScaling.EventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            try {\n              listener.init(coreContainer, config);\n              listenersPerName.put(config.name, listener);\n            } catch (Exception e) {\n              log.warn(\"Error initializing TriggerListener \" + config, e);\n              try {\n                listener.close();\n              } catch (Exception e1) {\n                // ignore\n              }\n              listener = null;\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            try {\n              listener.init(coreContainer, config);\n              listenersPerName.put(config.name, listener);\n            } catch (Exception e) {\n              log.warn(\"Error initializing TriggerListener \" + config, e);\n              try {\n                listener.close();\n              } catch (Exception e1) {\n                // ignore\n              }\n              listener = null;\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (AutoScaling.EventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, AutoScaling.EventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, AutoScaling.EventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00bb17df1ec220814696ae9775c553bc6de29317","date":1502711459,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(coreContainer, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            try {\n              listener.init(coreContainer, config);\n              listenersPerName.put(config.name, listener);\n            } catch (Exception e) {\n              log.warn(\"Error initializing TriggerListener \" + config, e);\n              try {\n                listener.close();\n              } catch (Exception e1) {\n                // ignore\n              }\n              listener = null;\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(clusterDataProvider, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(coreContainer, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(coreContainer, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(clusterDataProvider, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(coreContainer, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(coreContainer, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(dataProvider, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = coreContainer.getResourceLoader().newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(coreContainer, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(cloudManager, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(dataProvider, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.configure(loader, cloudManager, config);\n                listener.init();\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.init(cloudManager, config);\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.configure(loader, cloudManager, config);\n                listener.init();\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n        // re-add additional listeners\n        List<TriggerListener> additional = new ArrayList<>(additionalListeners);\n        additionalListeners.clear();\n        for (TriggerListener listener : additional) {\n          addAdditionalListener(listener);\n        }\n\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.configure(loader, cloudManager, config);\n                listener.init();\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener {}\", listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener {}\", oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '{}', skipping...\", clazz, e);\n            }\n            if (listener != null) {\n              try {\n                listener.configure(loader, cloudManager, config);\n                listener.init();\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener {}\", config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n        // re-add additional listeners\n        List<TriggerListener> additional = new ArrayList<>(additionalListeners);\n        additionalListeners.clear();\n        for (TriggerListener listener : additional) {\n          addAdditionalListener(listener);\n        }\n\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener \" + listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener \" + oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '\" + clazz + \"', skipping...\", e);\n            }\n            if (listener != null) {\n              try {\n                listener.configure(loader, cloudManager, config);\n                listener.init();\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener \" + config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n        // re-add additional listeners\n        List<TriggerListener> additional = new ArrayList<>(additionalListeners);\n        additionalListeners.clear();\n        for (TriggerListener listener : additional) {\n          addAdditionalListener(listener);\n        }\n\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers.TriggerListeners#setAutoScalingConfig(AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"    void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {\n      updateLock.lock();\n      // we will recreate this from scratch\n      listenersPerStage.clear();\n      try {\n        Set<String> triggerNames = autoScalingConfig.getTriggerConfigs().keySet();\n        Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n        Set<String> listenerNames = configs.entrySet().stream().map(entry -> entry.getValue().name).collect(Collectors.toSet());\n        // close those for non-existent triggers and nonexistent listener configs\n        for (Iterator<Map.Entry<String, TriggerListener>> it = listenersPerName.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry<String, TriggerListener> entry = it.next();\n          String name = entry.getKey();\n          TriggerListener listener = entry.getValue();\n          if (!triggerNames.contains(listener.getConfig().trigger) || !listenerNames.contains(name)) {\n            try {\n              listener.close();\n            } catch (Exception e) {\n              log.warn(\"Exception closing old listener {}\", listener.getConfig(), e);\n            }\n            it.remove();\n          }\n        }\n        for (Map.Entry<String, AutoScalingConfig.TriggerListenerConfig> entry : configs.entrySet()) {\n          AutoScalingConfig.TriggerListenerConfig config = entry.getValue();\n          if (!triggerNames.contains(config.trigger)) {\n            log.debug(\"-- skipping listener for non-existent trigger: {}\", config);\n            continue;\n          }\n          // find previous instance and reuse if possible\n          TriggerListener oldListener = listenersPerName.get(config.name);\n          TriggerListener listener = null;\n          if (oldListener != null) {\n            if (!oldListener.getConfig().equals(config)) { // changed config\n              try {\n                oldListener.close();\n              } catch (Exception e) {\n                log.warn(\"Exception closing old listener {}\", oldListener.getConfig(), e);\n              }\n            } else {\n              listener = oldListener; // reuse\n            }\n          }\n          if (listener == null) { // create new instance\n            String clazz = config.listenerClass;\n            try {\n              listener = loader.newInstance(clazz, TriggerListener.class);\n            } catch (Exception e) {\n              log.warn(\"Invalid TriggerListener class name '{}', skipping...\", clazz, e);\n            }\n            if (listener != null) {\n              try {\n                listener.configure(loader, cloudManager, config);\n                listener.init();\n                listenersPerName.put(config.name, listener);\n              } catch (Exception e) {\n                log.warn(\"Error initializing TriggerListener {}\", config, e);\n                IOUtils.closeQuietly(listener);\n                listener = null;\n              }\n            }\n          }\n          if (listener == null) {\n            continue;\n          }\n          // add per stage\n          for (TriggerEventProcessorStage stage : config.stages) {\n            addPerStage(config.trigger, stage, listener);\n          }\n          // add also for beforeAction / afterAction TriggerStage\n          if (!config.beforeActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.BEFORE_ACTION, listener);\n          }\n          if (!config.afterActions.isEmpty()) {\n            addPerStage(config.trigger, TriggerEventProcessorStage.AFTER_ACTION, listener);\n          }\n        }\n        // re-add additional listeners\n        List<TriggerListener> additional = new ArrayList<>(additionalListeners);\n        additionalListeners.clear();\n        for (TriggerListener listener : additional) {\n          addAdditionalListener(listener);\n        }\n\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["00bb17df1ec220814696ae9775c553bc6de29317"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"00bb17df1ec220814696ae9775c553bc6de29317":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"00bb17df1ec220814696ae9775c553bc6de29317":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["00bb17df1ec220814696ae9775c553bc6de29317"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c5fd294da67452cd8d116692194908de00eb5209","560c18d71dad43d675158783c3840f8c80d6d39c"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}