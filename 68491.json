{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testRussianPrefixQuery().mjava","commits":[{"id":"46e1d94eff339f485fea1578f61a41eb374073ab","date":1488350334,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testRussianPrefixQuery().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-7717 bug, ordering of MTQ AutomatonQuery detection\n  public void testRussianPrefixQuery() throws IOException {\n    Analyzer analyzer = new StandardAnalyzer();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    String field = \"title\";\n    Document doc = new Document();\n    doc.add(new Field(field, \"я\", fieldType)); // Russian char; uses 2 UTF8 bytes\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Query query = new PrefixQuery(new Term(field, \"я\"));\n    TopDocs topDocs = searcher.search(query, 1);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n    String[] snippets = highlighter.highlight(field, query, topDocs);\n    assertEquals(\"[<b>я</b>]\", Arrays.toString(snippets));\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testRussianPrefixQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testRussianPrefixQuery().mjava","sourceNew":"  // LUCENE-7717 bug, ordering of MTQ AutomatonQuery detection\n  public void testRussianPrefixQuery() throws IOException {\n    Analyzer analyzer = new StandardAnalyzer();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    String field = \"title\";\n    Document doc = new Document();\n    doc.add(new Field(field, \"я\", fieldType)); // Russian char; uses 2 UTF8 bytes\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Query query = new PrefixQuery(new Term(field, \"я\"));\n    TopDocs topDocs = searcher.search(query, 1);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, analyzer);\n    String[] snippets = highlighter.highlight(field, query, topDocs);\n    assertEquals(\"[<b>я</b>]\", Arrays.toString(snippets));\n    ir.close();\n  }\n\n","sourceOld":"  // LUCENE-7717 bug, ordering of MTQ AutomatonQuery detection\n  public void testRussianPrefixQuery() throws IOException {\n    Analyzer analyzer = new StandardAnalyzer();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    String field = \"title\";\n    Document doc = new Document();\n    doc.add(new Field(field, \"я\", fieldType)); // Russian char; uses 2 UTF8 bytes\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Query query = new PrefixQuery(new Term(field, \"я\"));\n    TopDocs topDocs = searcher.search(query, 1);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n    String[] snippets = highlighter.highlight(field, query, topDocs);\n    assertEquals(\"[<b>я</b>]\", Arrays.toString(snippets));\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testRussianPrefixQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testRussianPrefixQuery().mjava","sourceNew":"  // LUCENE-7717 bug, ordering of MTQ AutomatonQuery detection\n  public void testRussianPrefixQuery() throws IOException {\n    Analyzer analyzer = new StandardAnalyzer();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    String field = \"title\";\n    Document doc = new Document();\n    doc.add(new Field(field, \"я\", fieldType)); // Russian char; uses 2 UTF8 bytes\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Query query = new PrefixQuery(new Term(field, \"я\"));\n    TopDocs topDocs = searcher.search(query, 1);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, analyzer);\n    String[] snippets = highlighter.highlight(field, query, topDocs);\n    assertEquals(\"[<b>я</b>]\", Arrays.toString(snippets));\n    ir.close();\n  }\n\n","sourceOld":"  // LUCENE-7717 bug, ordering of MTQ AutomatonQuery detection\n  public void testRussianPrefixQuery() throws IOException {\n    Analyzer analyzer = new StandardAnalyzer();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);\n    String field = \"title\";\n    Document doc = new Document();\n    doc.add(new Field(field, \"я\", fieldType)); // Russian char; uses 2 UTF8 bytes\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Query query = new PrefixQuery(new Term(field, \"я\"));\n    TopDocs topDocs = searcher.search(query, 1);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n    String[] snippets = highlighter.highlight(field, query, topDocs);\n    assertEquals(\"[<b>я</b>]\", Arrays.toString(snippets));\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e1d94eff339f485fea1578f61a41eb374073ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["46e1d94eff339f485fea1578f61a41eb374073ab","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["46e1d94eff339f485fea1578f61a41eb374073ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"46e1d94eff339f485fea1578f61a41eb374073ab":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46e1d94eff339f485fea1578f61a41eb374073ab"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}