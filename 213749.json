{"path":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      FixedBitSet resultSet = (FixedBitSet) scoredDocIds.getDocIDs();\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\", \n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.get(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      FixedBitSet resultSet = (FixedBitSet) scoredDocIds.getDocIDs();\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\", \n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.get(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      FixedBitSet resultSet = (FixedBitSet) scoredDocIds.getDocIDs();\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\", \n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.get(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}