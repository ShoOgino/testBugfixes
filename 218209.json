{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","commits":[{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   *\n   * <p>Note that for a given term-document frequency, greater unsigned norms\n   * must produce scores that are lower or equal, ie. for two encoded norms\n   * {@code n1} and {@code n2} so that\n   * {@code Long.compareUnsigned(n1, n2) &gt; 0} then\n   * {@code SimScorer.score(freq, n1) &lt;= SimScorer.score(freq, n2)}\n   * for any legal {@code freq}.\n   *\n   * <p>{@code 0} is not a legal norm, so {@code 1} is the norm that produces\n   * the highest scores.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   *\n   * <p>Note that for a given term-document frequency, greater unsigned norms\n   * must produce scores that are lower or equal, ie. for two encoded norms\n   * {@code n1} and {@code n2} so that\n   * {@code Long.compareUnsigned(n1, n2) &gt; 0} then\n   * {@code SimScorer.score(freq, n1) &lt;= SimScorer.score(freq, n2)}\n   * for any legal {@code freq}.\n   *\n   * <p>{@code 0} is not a legal norm, so {@code 1} is the norm that produces\n   * the highest scores.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   *\n   * <p>Note that for a given term-document frequency, greater unsigned norms\n   * must produce scores that are lower or equal, ie. for two encoded norms\n   * {@code n1} and {@code n2} so that\n   * {@code Long.compareUnsigned(n1, n2) > 0} then\n   * {@code SimScorer.score(freq, n1) <= SimScorer.score(freq, n2)}\n   * for any legal {@code freq}.\n   *\n   * <p>{@code 0} is not a legal norm, so {@code 1} is the norm that produces\n   * the highest scores.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually set smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   *\n   * <p>Note that for a given term-document frequency, greater unsigned norms\n   * must produce scores that are lower or equal, ie. for two encoded norms\n   * {@code n1} and {@code n2} so that\n   * {@code Long.compareUnsigned(n1, n2) &gt; 0} then\n   * {@code SimScorer.score(freq, n1) &lt;= SimScorer.score(freq, n2)}\n   * for any legal {@code freq}.\n   *\n   * <p>{@code 0} is not a legal norm, so {@code 1} is the norm that produces\n   * the highest scores.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return computed norm value\n   */\n  public abstract long computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c68bfb3354451a11c895b36484af94f27530b79":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b94236357aaa22b76c10629851fe4e376e0cea82":["d4d69c535930b5cce125cff868d40f6373dc27d4","0c68bfb3354451a11c895b36484af94f27530b79"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0c68bfb3354451a11c895b36484af94f27530b79","b94236357aaa22b76c10629851fe4e376e0cea82"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}