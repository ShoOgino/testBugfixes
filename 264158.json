{"path":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","commits":[{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    System.out.println(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94","date":1257897915,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    System.out.println(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["a4df60738409662c962b4ed3201d830cd3c14530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4df60738409662c962b4ed3201d830cd3c14530"],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}