{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45155bce1f2625f94a75296bb8a509d5d3265294","date":1342560816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n\n    if (oldTable.length >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n\n    if (oldTable.length >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n\n    if (oldTable.length >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final GrowableWriter oldTable = table;\n\n    if (oldTable.size() >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new GrowableWriter(oldTable.getBitsPerValue(), 2*oldTable.size(), PackedInts.COMPACT);\n    mask = table.size()-1;\n    for(int idx=0;idx<oldTable.size();idx++) {\n      final long address = oldTable.get(idx);\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n\n    if (oldTable.length >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final GrowableWriter oldTable = table;\n\n    if (oldTable.size() >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new GrowableWriter(oldTable.getBitsPerValue(), 2*oldTable.size(), PackedInts.COMPACT);\n    mask = table.size()-1;\n    for(int idx=0;idx<oldTable.size();idx++) {\n      final long address = oldTable.get(idx);\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final int[] oldTable = table;\n\n    if (oldTable.length >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new int[2*table.length];\n    mask = table.length-1;\n    for(int idx=0;idx<oldTable.length;idx++) {\n      final int address = oldTable[idx];\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5","date":1370275238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#rehash().mjava","sourceNew":"  private void rehash() throws IOException {\n    final PagedGrowableWriter oldTable = table;\n\n    table = new PagedGrowableWriter(2*oldTable.size(), 1<<30, PackedInts.bitsRequired(count), PackedInts.COMPACT);\n    mask = table.size()-1;\n    for(long idx=0;idx<oldTable.size();idx++) {\n      final long address = oldTable.get(idx);\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() throws IOException {\n    final GrowableWriter oldTable = table;\n\n    if (oldTable.size() >= Integer.MAX_VALUE/2) {\n      throw new IllegalStateException(\"FST too large (> 2.1 GB)\");\n    }\n\n    table = new GrowableWriter(oldTable.getBitsPerValue(), 2*oldTable.size(), PackedInts.COMPACT);\n    mask = table.size()-1;\n    for(int idx=0;idx<oldTable.size();idx++) {\n      final long address = oldTable.get(idx);\n      if (address != 0) {\n        addNew(address);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","45155bce1f2625f94a75296bb8a509d5d3265294"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["45155bce1f2625f94a75296bb8a509d5d3265294"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["45155bce1f2625f94a75296bb8a509d5d3265294","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","45155bce1f2625f94a75296bb8a509d5d3265294"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45155bce1f2625f94a75296bb8a509d5d3265294":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5"]},"commit2Childs":{"cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5","8917bfede3b4ca30f4305c1e391e9218959cd723"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","45155bce1f2625f94a75296bb8a509d5d3265294"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"45155bce1f2625f94a75296bb8a509d5d3265294":["aba371508186796cc6151d8223a5b4e16d02e26e","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","8917bfede3b4ca30f4305c1e391e9218959cd723","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}