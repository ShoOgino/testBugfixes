{"path":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases. \n   */\n  @Override\n  protected void setUp() throws Exception {\n          super.setUp();\n          index = getIndex();\n          query = new TermQuery( new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases. \n   */\n  @Override\n  protected void setUp() throws Exception {\n          super.setUp();\n          index = getIndex();\n          query = new TermQuery( new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases. \n   */\n  @Override\n  protected void setUp() throws Exception {\n          super.setUp();\n          index = getIndex();\n          query = new TermQuery( new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases. \n   */\n  @Override\n  protected void setUp() throws Exception {\n          super.setUp();\n          index = getIndex();\n          query = new TermQuery( new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random rand = newRandom();\n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, index);\n    RandomGen random = new RandomGen(rand);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new Field(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(new Field(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(new Field(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5cdad9e745f40d1e174b382bb7d664ca53d9138","date":1310498637,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(),\n            Field.Store.YES, Field.Index.NOT_ANALYZED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", Field.Store.YES,\n            Field.Index.ANALYZED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"a5cdad9e745f40d1e174b382bb7d664ca53d9138":["43b04c27924fe393e38e9f0986e32c634f261859"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a5cdad9e745f40d1e174b382bb7d664ca53d9138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"a5cdad9e745f40d1e174b382bb7d664ca53d9138":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["43b04c27924fe393e38e9f0986e32c634f261859"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"43b04c27924fe393e38e9f0986e32c634f261859":["a5cdad9e745f40d1e174b382bb7d664ca53d9138","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}