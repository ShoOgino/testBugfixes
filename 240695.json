{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory(random);\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory(random);\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cfd641edd796340315609425e9f70819e6d9ef0e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["cfd641edd796340315609425e9f70819e6d9ef0e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["cfd641edd796340315609425e9f70819e6d9ef0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","cfd641edd796340315609425e9f70819e6d9ef0e"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cfd641edd796340315609425e9f70819e6d9ef0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["cfd641edd796340315609425e9f70819e6d9ef0e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}