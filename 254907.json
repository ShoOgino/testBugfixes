{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","89c5555e75149b469a7756e82bd740777cfb584a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1a2de66a6ca88b36d3c1cd11cd3eef257a6ab6f","date":1343563712,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01fd1b091ed72658bf4101ff7d72487b511643ad","date":1343565374,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"}) Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":["e4946500259641951dbd7f8a61956bf14bef3f60"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<String>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so its not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10), occur);\n      s.search(query, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder inner = new BooleanQuery.Builder();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner.build(), Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10), occur);\n      s.search(query.build(), c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10), occur);\n      s.search(query, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder inner = new BooleanQuery.Builder();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner.build(), Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, Integer.MAX_VALUE), occur);\n      s.search(query.build(), c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder inner = new BooleanQuery.Builder();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner.build(), Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    \n    // Only needed in Java6; Java7+ has a @SafeVarargs annotated Arrays#asList()!\n    // see http://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html\n    @SuppressWarnings(\"unchecked\") final Iterable<Set<String>> occurList = Arrays.asList(\n        Collections.singleton(\"MUST\"), \n        new HashSet<>(Arrays.asList(\"MUST\", \"SHOULD\"))\n    );\n    \n    for (final Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10), occur);\n      s.search(query.build(), c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(\"SHOULD\");\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n        }\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        // Y doesnt exist in the index, so it's not in the scorer tree\n        assertEquals(4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional) {\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["01fd1b091ed72658bf4101ff7d72487b511643ad"],"b7605579001505896d48b07160075a5c8b8e128e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"01fd1b091ed72658bf4101ff7d72487b511643ad":["b1a2de66a6ca88b36d3c1cd11cd3eef257a6ab6f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","01fd1b091ed72658bf4101ff7d72487b511643ad"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","01fd1b091ed72658bf4101ff7d72487b511643ad"],"b1a2de66a6ca88b36d3c1cd11cd3eef257a6ab6f":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","b1a2de66a6ca88b36d3c1cd11cd3eef257a6ab6f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"01fd1b091ed72658bf4101ff7d72487b511643ad":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b1a2de66a6ca88b36d3c1cd11cd3eef257a6ab6f":["01fd1b091ed72658bf4101ff7d72487b511643ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7605579001505896d48b07160075a5c8b8e128e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}