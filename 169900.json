{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#writePackedValue(int,byte[]).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#writePackedValue(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  void writePackedValue(int index, byte[] bytes) {\n    assert bytes.length == packedBytesLength;\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    //System.out.println(\"writePackedValue: index=\" + index + \" bytes.length=\" + bytes.length + \" block=\" + block + \" blockIndex=\" + blockIndex + \" valuesPerBlock=\" + valuesPerBlock);\n    while (blocks.size() <= block) {\n      // If this is the last block, only allocate as large as necessary for maxSize:\n      int valuesInBlock = Math.min(valuesPerBlock, maxSize - (blocks.size() * valuesPerBlock));\n      blocks.add(new byte[valuesInBlock*packedBytesLength]);\n    }\n    System.arraycopy(bytes, 0, blocks.get(block), blockIndex * packedBytesLength, packedBytesLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#writePackedValue(int,byte[]).mjava","sourceNew":null,"sourceOld":"  void writePackedValue(int index, byte[] bytes) {\n    assert bytes.length == packedBytesLength;\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    //System.out.println(\"writePackedValue: index=\" + index + \" bytes.length=\" + bytes.length + \" block=\" + block + \" blockIndex=\" + blockIndex + \" valuesPerBlock=\" + valuesPerBlock);\n    while (blocks.size() <= block) {\n      // If this is the last block, only allocate as large as necessary for maxSize:\n      int valuesInBlock = Math.min(valuesPerBlock, maxSize - (blocks.size() * valuesPerBlock));\n      blocks.add(new byte[valuesInBlock*packedBytesLength]);\n    }\n    System.arraycopy(bytes, 0, blocks.get(block), blockIndex * packedBytesLength, packedBytesLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}