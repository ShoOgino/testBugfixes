{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","commits":[{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    CloudState cloudState = this.cloudState;\n    if (cloudState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + cloudState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,ZkNodeProps> shardMap = replicas.getShards();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    String filterNodeName = thisNodeName + \"_\" + coreName;\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      String coreNodeName = nodeProps.getNodeName() + \"_\" + nodeProps.getCoreName();\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(filterNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas - go local\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<ZkCoreNodeProps>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2d2facad861c539d42173b0e4538d64b7fda80","date":1405194900,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection,\n      String shardId, String thisCoreNodeName, String coreName, String mustMatchStateFilter, String mustNotMatchStateFilter) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection + \" \"\n              + clusterState.getCollections());\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet()) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter.equals(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || !mustNotMatchStateFilter.equals(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"be2d2facad861c539d42173b0e4538d64b7fda80":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","3f767f8c99eaedb984df754fe61f21c5de260f94"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a80994db3380cd78c6f65b84515e2e931b6b3da","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c5a558d54519c651068ddb202f03befefb1514a7"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be2d2facad861c539d42173b0e4538d64b7fda80"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["be2d2facad861c539d42173b0e4538d64b7fda80"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"be2d2facad861c539d42173b0e4538d64b7fda80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}