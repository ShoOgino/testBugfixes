{"path":"src/java/org/apache/solr/schema/PointType.PointTypeValueSource#getValues(Map,IndexReader).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/PointType.PointTypeValueSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr1 = new DocValues[dimension];\n    String name = field.getName();\n    String suffix = FieldType.POLY_FIELD_SEPARATOR + subType.typeName;\n    int len = name.length();\n    StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n    bldr.append(name);\n    for (int i = 0; i < dimension; i++) {\n      bldr.append(i).append(suffix);\n      SchemaField sf = schema.getField(bldr.toString());\n      valsArr1[i] = subType.getValueSource(sf, parser).getValues(context, reader);\n      bldr.setLength(len);\n    }\n    return new DocValues() {\n      //TODO: not sure how to handle the other types at this moment\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        //TODO: check whether vals.length == dimension or assume its handled elsewhere?\n        for (int i = 0; i < dimension; i++) {\n          vals[i] = valsArr1[i].doubleVal(doc);\n        }\n      }\n\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder(\"point(\");\n        boolean firstTime = true;\n        for (DocValues docValues : valsArr1) {\n          if (firstTime == false) {\n            sb.append(\",\");\n          } else {\n            firstTime = true;\n          }\n          sb.append(docValues.toString(doc));\n        }\n        sb.append(\")\");\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8d3c8d63c76423bab48b2d19100fe06af755e2c","date":1261667666,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/PointType.PointTypeValueSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/schema/PointType.PointTypeValueSource#getValues(Map,IndexReader).mjava","sourceNew":"    @Override\n    public DocValues getValues(Map context, IndexReader reader) throws IOException {\n      final DocValues[] valsArr1 = new DocValues[dimension];\n      String name = field.getName();\n      String suffix = FieldType.POLY_FIELD_SEPARATOR + subType.typeName;\n      int len = name.length();\n      StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n      bldr.append(name);\n      for (int i = 0; i < dimension; i++) {\n        bldr.append(i).append(suffix);\n        SchemaField sf = schema.getField(bldr.toString());\n        valsArr1[i] = subType.getValueSource(sf, parser).getValues(context, reader);\n        bldr.setLength(len);\n      }\n      return new DocValues() {\n        //TODO: not sure how to handle the other types at this moment\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          //TODO: check whether vals.length == dimension or assume its handled elsewhere?\n          for (int i = 0; i < dimension; i++) {\n            vals[i] = valsArr1[i].doubleVal(doc);\n          }\n        }\n\n\n        @Override\n        public String toString(int doc) {\n          StringBuilder sb = new StringBuilder(\"point(\");\n          boolean firstTime = true;\n          for (DocValues docValues : valsArr1) {\n            if (firstTime == false) {\n              sb.append(\",\");\n            } else {\n              firstTime = true;\n            }\n            sb.append(docValues.toString(doc));\n          }\n          sb.append(\")\");\n          return sb.toString();\n        }\n      };\n    }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr1 = new DocValues[dimension];\n    String name = field.getName();\n    String suffix = FieldType.POLY_FIELD_SEPARATOR + subType.typeName;\n    int len = name.length();\n    StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n    bldr.append(name);\n    for (int i = 0; i < dimension; i++) {\n      bldr.append(i).append(suffix);\n      SchemaField sf = schema.getField(bldr.toString());\n      valsArr1[i] = subType.getValueSource(sf, parser).getValues(context, reader);\n      bldr.setLength(len);\n    }\n    return new DocValues() {\n      //TODO: not sure how to handle the other types at this moment\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        //TODO: check whether vals.length == dimension or assume its handled elsewhere?\n        for (int i = 0; i < dimension; i++) {\n          vals[i] = valsArr1[i].doubleVal(doc);\n        }\n      }\n\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder(\"point(\");\n        boolean firstTime = true;\n        for (DocValues docValues : valsArr1) {\n          if (firstTime == false) {\n            sb.append(\",\");\n          } else {\n            firstTime = true;\n          }\n          sb.append(docValues.toString(doc));\n        }\n        sb.append(\")\");\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c663601756d9e58d4222866f6655485b747d9afa","date":1261691652,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/schema/PointType.PointTypeValueSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocValues getValues(Map context, IndexReader reader) throws IOException {\n      final DocValues[] valsArr1 = new DocValues[dimension];\n      String name = field.getName();\n      String suffix = FieldType.POLY_FIELD_SEPARATOR + subType.typeName;\n      int len = name.length();\n      StringBuilder bldr = new StringBuilder(len + 3 + suffix.length());//should be enough buffer to handle most values of j.\n      bldr.append(name);\n      for (int i = 0; i < dimension; i++) {\n        bldr.append(i).append(suffix);\n        SchemaField sf = schema.getField(bldr.toString());\n        valsArr1[i] = subType.getValueSource(sf, parser).getValues(context, reader);\n        bldr.setLength(len);\n      }\n      return new DocValues() {\n        //TODO: not sure how to handle the other types at this moment\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          //TODO: check whether vals.length == dimension or assume its handled elsewhere?\n          for (int i = 0; i < dimension; i++) {\n            vals[i] = valsArr1[i].doubleVal(doc);\n          }\n        }\n\n\n        @Override\n        public String toString(int doc) {\n          StringBuilder sb = new StringBuilder(\"point(\");\n          boolean firstTime = true;\n          for (DocValues docValues : valsArr1) {\n            if (firstTime == false) {\n              sb.append(\",\");\n            } else {\n              firstTime = true;\n            }\n            sb.append(docValues.toString(doc));\n          }\n          sb.append(\")\");\n          return sb.toString();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c663601756d9e58d4222866f6655485b747d9afa":["c8d3c8d63c76423bab48b2d19100fe06af755e2c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c8d3c8d63c76423bab48b2d19100fe06af755e2c":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["c8d3c8d63c76423bab48b2d19100fe06af755e2c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c663601756d9e58d4222866f6655485b747d9afa":[],"c8d3c8d63c76423bab48b2d19100fe06af755e2c":["c663601756d9e58d4222866f6655485b747d9afa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c663601756d9e58d4222866f6655485b747d9afa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}