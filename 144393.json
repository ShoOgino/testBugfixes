{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TripleThreatTransformer#addDuplicateBackwardsValues(Map[String,Object]).mjava","commits":[{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TripleThreatTransformer#addDuplicateBackwardsValues(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private LinkedHashMap<String,Object> addDuplicateBackwardsValues(Map<String, Object> row) {\n    LinkedHashMap<String,Object> n = new LinkedHashMap<String,Object>();\n    for(Map.Entry<String,Object> entry : row.entrySet()) {\n      String key = entry.getKey();\n      if(!\"id\".equalsIgnoreCase(key)) {\n        String[] vals = new String[2];\n        vals[0] = entry.getValue()==null ? \"null\" : entry.getValue().toString();\n        vals[1] = new StringBuilder(vals[0]).reverse().toString();\n        n.put(key, Arrays.asList(vals));\n      } else {\n        n.put(key, entry.getValue());\n      }\n    }\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TripleThreatTransformer#addDuplicateBackwardsValues(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TripleThreatTransformer#addDuplicateBackwardsValues(Map[String,Object]).mjava","sourceNew":"  private LinkedHashMap<String,Object> addDuplicateBackwardsValues(Map<String, Object> row) {\n    LinkedHashMap<String,Object> n = new LinkedHashMap<>();\n    for(Map.Entry<String,Object> entry : row.entrySet()) {\n      String key = entry.getKey();\n      if(!\"id\".equalsIgnoreCase(key)) {\n        String[] vals = new String[2];\n        vals[0] = entry.getValue()==null ? \"null\" : entry.getValue().toString();\n        vals[1] = new StringBuilder(vals[0]).reverse().toString();\n        n.put(key, Arrays.asList(vals));\n      } else {\n        n.put(key, entry.getValue());\n      }\n    }\n    return n;\n  }\n\n","sourceOld":"  private LinkedHashMap<String,Object> addDuplicateBackwardsValues(Map<String, Object> row) {\n    LinkedHashMap<String,Object> n = new LinkedHashMap<String,Object>();\n    for(Map.Entry<String,Object> entry : row.entrySet()) {\n      String key = entry.getKey();\n      if(!\"id\".equalsIgnoreCase(key)) {\n        String[] vals = new String[2];\n        vals[0] = entry.getValue()==null ? \"null\" : entry.getValue().toString();\n        vals[1] = new StringBuilder(vals[0]).reverse().toString();\n        n.put(key, Arrays.asList(vals));\n      } else {\n        n.put(key, entry.getValue());\n      }\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TripleThreatTransformer#addDuplicateBackwardsValues(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private LinkedHashMap<String,Object> addDuplicateBackwardsValues(Map<String, Object> row) {\n    LinkedHashMap<String,Object> n = new LinkedHashMap<>();\n    for(Map.Entry<String,Object> entry : row.entrySet()) {\n      String key = entry.getKey();\n      if(!\"id\".equalsIgnoreCase(key)) {\n        String[] vals = new String[2];\n        vals[0] = entry.getValue()==null ? \"null\" : entry.getValue().toString();\n        vals[1] = new StringBuilder(vals[0]).reverse().toString();\n        n.put(key, Arrays.asList(vals));\n      } else {\n        n.put(key, entry.getValue());\n      }\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}