{"path":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#makeWithin(Rectangle).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#makeWithin(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents are fully within the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeWithin(Rectangle bbox) {\n\n    // general case\n    // docMinX >= queryExtent.getMinX() AND docMinY >= queryExtent.getMinY() AND docMaxX <= queryExtent.getMaxX() AND docMaxY <= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY >= queryExtent.getMinY() AND docMaxY <= queryExtent.getMaxY()\n    Query qMinY = this.makeNumericRangeQuery(field_minY, bbox.getMinY(), null, true, false);\n    Query qMaxY = this.makeNumericRangeQuery(field_maxY, null, bbox.getMaxY(), false, true);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    if (ctx.isGeo() && bbox.getMinX() == -180.0 && bbox.getMaxX() == 180.0) {\n      //if query world-wraps, only the y condition matters\n      return yConditions;\n\n    } else if (!bbox.getCrossesDateLine()) {\n      // queries that do not cross the date line\n\n      // docMinX >= queryExtent.getMinX() AND docMaxX <= queryExtent.getMaxX()\n      Query qMinX = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qMaxX = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n\n      double edge = 0;//none, otherwise opposite dateline of query\n      if (bbox.getMinX() == -180.0)\n        edge = 180;\n      else if (bbox.getMaxX() == 180.0)\n        edge = -180;\n      if (edge != 0 && ctx.isGeo()) {\n        Query edgeQ = makeQuery(BooleanClause.Occur.MUST,\n            makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        qMinMax = makeQuery(BooleanClause.Occur.SHOULD, qMinMax, edgeQ);\n      }\n\n      xConditions = this.makeXDL(false, qMinMax);\n\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line\n\n      // the document should be within the left portion of the query\n      // docMinX >= queryExtent.getMinX() AND docMaxX <= 180.0\n      Query qMinXLeft = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qMaxXLeft = this.makeNumericRangeQuery(field_maxX, null, 180.0, false, true);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXLeft);\n\n      // the document should be within the right portion of the query\n      // docMinX >= -180.0 AND docMaxX <= queryExtent.getMaxX()\n      Query qMinXRight = this.makeNumericRangeQuery(field_minX, -180.0, null, true, false);\n      Query qMaxXRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXRight, qMaxXRight);\n\n      // either left or right conditions should occur,\n      // apply the left and right conditions to documents that do not cross the date line\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qLeft, qRight);\n      Query qNonXDL = this.makeXDL(false, qLeftRight);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document must be within the left portion of the query,\n      // AND the right portion of the document must be within the right portion of the query\n      // docMinXLeft >= queryExtent.getMinX() AND docMaxXLeft <= 180.0\n      // AND docMinXRight >= -180.0 AND docMaxXRight <= queryExtent.getMaxX()\n      Query qXDLLeft = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qXDLRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#makeWithin(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents are fully within the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeWithin(Rectangle bbox) {\n\n    // general case\n    // docMinX >= queryExtent.getMinX() AND docMinY >= queryExtent.getMinY() AND docMaxX <= queryExtent.getMaxX() AND docMaxY <= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY >= queryExtent.getMinY() AND docMaxY <= queryExtent.getMaxY()\n    Query qMinY = this.makeNumericRangeQuery(field_minY, bbox.getMinY(), null, true, false);\n    Query qMaxY = this.makeNumericRangeQuery(field_maxY, null, bbox.getMaxY(), false, true);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    if (ctx.isGeo() && bbox.getMinX() == -180.0 && bbox.getMaxX() == 180.0) {\n      //if query world-wraps, only the y condition matters\n      return yConditions;\n\n    } else if (!bbox.getCrossesDateLine()) {\n      // queries that do not cross the date line\n\n      // docMinX >= queryExtent.getMinX() AND docMaxX <= queryExtent.getMaxX()\n      Query qMinX = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qMaxX = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n\n      double edge = 0;//none, otherwise opposite dateline of query\n      if (bbox.getMinX() == -180.0)\n        edge = 180;\n      else if (bbox.getMaxX() == 180.0)\n        edge = -180;\n      if (edge != 0 && ctx.isGeo()) {\n        Query edgeQ = makeQuery(BooleanClause.Occur.MUST,\n            makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        qMinMax = makeQuery(BooleanClause.Occur.SHOULD, qMinMax, edgeQ);\n      }\n\n      xConditions = this.makeXDL(false, qMinMax);\n\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line\n\n      // the document should be within the left portion of the query\n      // docMinX >= queryExtent.getMinX() AND docMaxX <= 180.0\n      Query qMinXLeft = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qMaxXLeft = this.makeNumericRangeQuery(field_maxX, null, 180.0, false, true);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXLeft);\n\n      // the document should be within the right portion of the query\n      // docMinX >= -180.0 AND docMaxX <= queryExtent.getMaxX()\n      Query qMinXRight = this.makeNumericRangeQuery(field_minX, -180.0, null, true, false);\n      Query qMaxXRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXRight, qMaxXRight);\n\n      // either left or right conditions should occur,\n      // apply the left and right conditions to documents that do not cross the date line\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qLeft, qRight);\n      Query qNonXDL = this.makeXDL(false, qLeftRight);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document must be within the left portion of the query,\n      // AND the right portion of the document must be within the right portion of the query\n      // docMinXLeft >= queryExtent.getMinX() AND docMaxXLeft <= 180.0\n      // AND docMinXRight >= -180.0 AND docMaxXRight <= queryExtent.getMaxX()\n      Query qXDLLeft = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qXDLRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/BBoxStrategy#makeWithin(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents are fully within the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeWithin(Rectangle bbox) {\n\n    // general case\n    // docMinX >= queryExtent.getMinX() AND docMinY >= queryExtent.getMinY() AND docMaxX <= queryExtent.getMaxX() AND docMaxY <= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY >= queryExtent.getMinY() AND docMaxY <= queryExtent.getMaxY()\n    Query qMinY = this.makeNumericRangeQuery(field_minY, bbox.getMinY(), null, true, false);\n    Query qMaxY = this.makeNumericRangeQuery(field_maxY, null, bbox.getMaxY(), false, true);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    if (ctx.isGeo() && bbox.getMinX() == -180.0 && bbox.getMaxX() == 180.0) {\n      //if query world-wraps, only the y condition matters\n      return yConditions;\n\n    } else if (!bbox.getCrossesDateLine()) {\n      // queries that do not cross the date line\n\n      // docMinX >= queryExtent.getMinX() AND docMaxX <= queryExtent.getMaxX()\n      Query qMinX = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qMaxX = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n\n      double edge = 0;//none, otherwise opposite dateline of query\n      if (bbox.getMinX() == -180.0)\n        edge = 180;\n      else if (bbox.getMaxX() == 180.0)\n        edge = -180;\n      if (edge != 0 && ctx.isGeo()) {\n        Query edgeQ = makeQuery(BooleanClause.Occur.MUST,\n            makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        qMinMax = makeQuery(BooleanClause.Occur.SHOULD, qMinMax, edgeQ);\n      }\n\n      xConditions = this.makeXDL(false, qMinMax);\n\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line\n\n      // the document should be within the left portion of the query\n      // docMinX >= queryExtent.getMinX() AND docMaxX <= 180.0\n      Query qMinXLeft = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qMaxXLeft = this.makeNumericRangeQuery(field_maxX, null, 180.0, false, true);\n      Query qLeft = this.makeQuery(BooleanClause.Occur.MUST, qMinXLeft, qMaxXLeft);\n\n      // the document should be within the right portion of the query\n      // docMinX >= -180.0 AND docMaxX <= queryExtent.getMaxX()\n      Query qMinXRight = this.makeNumericRangeQuery(field_minX, -180.0, null, true, false);\n      Query qMaxXRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qRight = this.makeQuery(BooleanClause.Occur.MUST, qMinXRight, qMaxXRight);\n\n      // either left or right conditions should occur,\n      // apply the left and right conditions to documents that do not cross the date line\n      Query qLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qLeft, qRight);\n      Query qNonXDL = this.makeXDL(false, qLeftRight);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document must be within the left portion of the query,\n      // AND the right portion of the document must be within the right portion of the query\n      // docMinXLeft >= queryExtent.getMinX() AND docMaxXLeft <= 180.0\n      // AND docMinXRight >= -180.0 AND docMaxXRight <= queryExtent.getMaxX()\n      Query qXDLLeft = this.makeNumericRangeQuery(field_minX, bbox.getMinX(), null, true, false);\n      Query qXDLRight = this.makeNumericRangeQuery(field_maxX, null, bbox.getMaxX(), false, true);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}