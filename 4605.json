{"path":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), StandardCharsets.UTF_8);\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), StandardCharsets.UTF_8);\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","date":1528751370,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   */\n  private void writeOutput() throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n        (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    try (Writer writer = new OutputStreamWriter(new FileOutputStream(outputFile), StandardCharsets.UTF_8)) {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n\n      for (int i = 0; i < TLDsBySuffixLength.size(); ++i) {\n        String macroName = getMacroName(i);\n        writer.write(\"// LUCENE-8278: \");\n        if (i == 0) {\n          writer.write(\"None of the TLDs in {\" + macroName + \"} is a 1-character-shorter prefix of another TLD\");\n        } else {\n          writer.write(\"Each TLD in {\" + macroName + \"} is a prefix of another TLD by\");\n          writer.write(\" \" + i + \" character\");\n          if (i > 1) {\n            writer.write(\"s\");\n          }\n        }\n        writer.write(NL);\n        writeTLDmacro(writer, macroName, TLDsBySuffixLength.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), StandardCharsets.UTF_8);\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), StandardCharsets.UTF_8);\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.ROOT);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), StandardCharsets.UTF_8);\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7d89d7e4e5101347833eea558851bf4209218619","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7d89d7e4e5101347833eea558851bf4209218619","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","5eb2511ababf862ea11e10761c70ee560cd84510","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}