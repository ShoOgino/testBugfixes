{"path":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","sourceOld":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9ff635e6838a2facda02727dec5b77d9e64dc4c","date":1316672863,"type":4,"author":"Doron Cohen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","sourceNew":null,"sourceOld":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}