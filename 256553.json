{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key refered to.  Throws an error if the key didn't refer \n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  private static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb12132f7aef3ad5be4b300f3cea59aa03b6820","date":1339628268,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","sourceNew":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key refered to.  Throws an error if the key didn't refer \n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key refered to.  Throws an error if the key didn't refer \n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  private static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5203c3894d8232a33e363270d08d2e5fb20966e8","date":1357728978,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","sourceNew":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key referred to.  Throws an error if the key didn't refer\n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key refered to.  Throws an error if the key didn't refer \n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","sourceNew":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key referred to.  Throws an error if the key didn't refer\n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key refered to.  Throws an error if the key didn't refer \n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","sourceNew":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key referred to.  Throws an error if the key didn't refer\n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   * @deprecated Replaced by {@link NamedList#removeConfigArgs(String)}.  Will be\n   * removed in version 5.0.\n   */\n  @Deprecated\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key referred to.  Throws an error if the key didn't refer\n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   */\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b8ae656166cbdcd61153d4f50516ddb292f3bfb","date":1380764320,"type":4,"author":"Shawn Heisey","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#oneOrMany(NamedList,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Removes all instance of the key from NamedList, returning the Set of \n   * Strings that key referred to.  Throws an error if the key didn't refer\n   * to one or more strings (or arrays of strings)\n   * @exception SolrException invalid arr/str structure.\n   * @deprecated Replaced by {@link NamedList#removeConfigArgs(String)}.  Will be\n   * removed in version 5.0.\n   */\n  @Deprecated\n  public static Collection<String> oneOrMany(final NamedList args, final String key) {\n    List<String> result = new ArrayList<String>(args.size() / 2);\n    final String err = \"init arg '\" + key + \"' must be a string \"\n      + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o = args.remove(key); null != o; o = args.remove(key)) {\n      if (o instanceof String) {\n        result.add((String)o);\n        continue;\n      }\n      \n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      if (o instanceof Collection) {\n        for (Object item : (Collection)o) {\n          if (! (item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          result.add((String)item);\n        }\n        continue;\n      }\n      \n      // who knows what the hell we have\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b8ae656166cbdcd61153d4f50516ddb292f3bfb":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820","5203c3894d8232a33e363270d08d2e5fb20966e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b8ae656166cbdcd61153d4f50516ddb292f3bfb"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["5203c3894d8232a33e363270d08d2e5fb20966e8"],"5203c3894d8232a33e363270d08d2e5fb20966e8":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"]},"commit2Childs":{"8b8ae656166cbdcd61153d4f50516ddb292f3bfb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["4e6354dd7c71fe122926fc53d7d29f715b1283db","5203c3894d8232a33e363270d08d2e5fb20966e8"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["8b8ae656166cbdcd61153d4f50516ddb292f3bfb"],"5203c3894d8232a33e363270d08d2e5fb20966e8":["4e6354dd7c71fe122926fc53d7d29f715b1283db","3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}