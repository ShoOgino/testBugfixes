{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb38e04906cc704c95b1bb9cdc7a960017b0cc25","date":1288942385,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":["e09a4dc614e8287732862ee5edf64d7199909c1e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(index)));\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb54925ca44e8bf7c336c1850d3e98132ec4fa46","date":1298214107,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(index)));\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(index)));\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(index)));\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(index)));\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(index)));\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["85a883878c0af761245ab048babc63d099f835f3","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["70ad682703b8585f5d0a637efec044d57ec05efb","eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"b0d06946f61921459f43309f86ed621ebe67eebe":["fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"85a883878c0af761245ab048babc63d099f835f3":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"fb38e04906cc704c95b1bb9cdc7a960017b0cc25":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"eb54925ca44e8bf7c336c1850d3e98132ec4fa46":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["b0d06946f61921459f43309f86ed621ebe67eebe"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"b0d06946f61921459f43309f86ed621ebe67eebe":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"85a883878c0af761245ab048babc63d099f835f3":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"fb38e04906cc704c95b1bb9cdc7a960017b0cc25":["b0d06946f61921459f43309f86ed621ebe67eebe","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"eb54925ca44e8bf7c336c1850d3e98132ec4fa46":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a3a0403b45dfe384fae4a1b6e96c3265d000c498","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","81ea17596392ebd5d12741eb9e3b2516258b9413","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}