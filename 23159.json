{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a snapshot of all node and replica tag values available from the original source, per the original\n   * autoscaling configuration. Note:\n   */\n  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new LinkedHashMap<>();\n    snapshot.put(\"nodeValues\", nodeValues);\n    Map<String, Map<String, Map<String, List<Map<String, Object>>>>> replicaInfosMap = new LinkedHashMap<>();\n    snapshot.put(\"replicaInfos\", replicaInfosMap);\n    replicaInfos.forEach((node, perNode) -> {\n      perNode.forEach((collection, shards) -> {\n        shards.forEach((shard, replicas) -> {\n          replicas.forEach(r -> {\n            List<Map<String, Object>> myReplicas = replicaInfosMap\n                .computeIfAbsent(node, n -> new LinkedHashMap<>())\n                .computeIfAbsent(collection, c -> new LinkedHashMap<>())\n                .computeIfAbsent(shard, s -> new ArrayList<>());\n            Map<String, Object> rMap = new LinkedHashMap<>();\n            r.toMap(rMap);\n            if (r.isLeader) { // ReplicaInfo.toMap doesn't write this!!!\n              ((Map<String, Object>)rMap.values().iterator().next()).put(\"leader\", \"true\");\n            }\n            myReplicas.add(rMap);\n          });\n        });\n      });\n    });\n    return snapshot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","sourceNew":"  /**\n   * Create a snapshot of all node and replica tag values available from the original source, per the original\n   * autoscaling configuration. Note:\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new LinkedHashMap<>();\n    snapshot.put(\"nodeValues\", nodeValues);\n    Map<String, Map<String, Map<String, List<Map<String, Object>>>>> replicaInfosMap = new LinkedHashMap<>();\n    snapshot.put(\"replicaInfos\", replicaInfosMap);\n    replicaInfos.forEach((node, perNode) -> {\n      perNode.forEach((collection, shards) -> {\n        shards.forEach((shard, replicas) -> {\n          replicas.forEach(r -> {\n            List<Map<String, Object>> myReplicas = replicaInfosMap\n                .computeIfAbsent(node, n -> new LinkedHashMap<>())\n                .computeIfAbsent(collection, c -> new LinkedHashMap<>())\n                .computeIfAbsent(shard, s -> new ArrayList<>());\n            Map<String, Object> rMap = new LinkedHashMap<>();\n            r.toMap(rMap);\n            if (r.isLeader) { // ReplicaInfo.toMap doesn't write this!!!\n              ((Map<String, Object>)rMap.values().iterator().next()).put(\"leader\", \"true\");\n            }\n            myReplicas.add(rMap);\n          });\n        });\n      });\n    });\n    return snapshot;\n  }\n\n","sourceOld":"  /**\n   * Create a snapshot of all node and replica tag values available from the original source, per the original\n   * autoscaling configuration. Note:\n   */\n  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new LinkedHashMap<>();\n    snapshot.put(\"nodeValues\", nodeValues);\n    Map<String, Map<String, Map<String, List<Map<String, Object>>>>> replicaInfosMap = new LinkedHashMap<>();\n    snapshot.put(\"replicaInfos\", replicaInfosMap);\n    replicaInfos.forEach((node, perNode) -> {\n      perNode.forEach((collection, shards) -> {\n        shards.forEach((shard, replicas) -> {\n          replicas.forEach(r -> {\n            List<Map<String, Object>> myReplicas = replicaInfosMap\n                .computeIfAbsent(node, n -> new LinkedHashMap<>())\n                .computeIfAbsent(collection, c -> new LinkedHashMap<>())\n                .computeIfAbsent(shard, s -> new ArrayList<>());\n            Map<String, Object> rMap = new LinkedHashMap<>();\n            r.toMap(rMap);\n            if (r.isLeader) { // ReplicaInfo.toMap doesn't write this!!!\n              ((Map<String, Object>)rMap.values().iterator().next()).put(\"leader\", \"true\");\n            }\n            myReplicas.add(rMap);\n          });\n        });\n      });\n    });\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","sourceNew":"  /**\n   * Create a snapshot of all node and replica tag values available from the original source, per the original\n   * autoscaling configuration. Note:\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new LinkedHashMap<>();\n    snapshot.put(\"nodeValues\", nodeValues);\n    Map<String, Map<String, Map<String, List<Map<String, Object>>>>> replicaInfosMap = new LinkedHashMap<>();\n    snapshot.put(\"replicaInfos\", replicaInfosMap);\n    replicaInfos.forEach((node, perNode) -> {\n      perNode.forEach((collection, shards) -> {\n        shards.forEach((shard, replicas) -> {\n          replicas.forEach(r -> {\n            List<Map<String, Object>> myReplicas = replicaInfosMap\n                .computeIfAbsent(node, n -> new LinkedHashMap<>())\n                .computeIfAbsent(collection, c -> new LinkedHashMap<>())\n                .computeIfAbsent(shard, s -> new ArrayList<>());\n            Map<String, Object> rMap = new LinkedHashMap<>();\n            r.toMap(rMap);\n            if (r.isLeader()) { // ReplicaInfo.toMap doesn't write this!!!\n              ((Map<String, Object>)rMap.values().iterator().next()).put(\"leader\", \"true\");\n            }\n            myReplicas.add(rMap);\n          });\n        });\n      });\n    });\n    return snapshot;\n  }\n\n","sourceOld":"  /**\n   * Create a snapshot of all node and replica tag values available from the original source, per the original\n   * autoscaling configuration. Note:\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new LinkedHashMap<>();\n    snapshot.put(\"nodeValues\", nodeValues);\n    Map<String, Map<String, Map<String, List<Map<String, Object>>>>> replicaInfosMap = new LinkedHashMap<>();\n    snapshot.put(\"replicaInfos\", replicaInfosMap);\n    replicaInfos.forEach((node, perNode) -> {\n      perNode.forEach((collection, shards) -> {\n        shards.forEach((shard, replicas) -> {\n          replicas.forEach(r -> {\n            List<Map<String, Object>> myReplicas = replicaInfosMap\n                .computeIfAbsent(node, n -> new LinkedHashMap<>())\n                .computeIfAbsent(collection, c -> new LinkedHashMap<>())\n                .computeIfAbsent(shard, s -> new ArrayList<>());\n            Map<String, Object> rMap = new LinkedHashMap<>();\n            r.toMap(rMap);\n            if (r.isLeader) { // ReplicaInfo.toMap doesn't write this!!!\n              ((Map<String, Object>)rMap.values().iterator().next()).put(\"leader\", \"true\");\n            }\n            myReplicas.add(rMap);\n          });\n        });\n      });\n    });\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getSnapshot().mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a snapshot of all node and replica tag values available from the original source, per the original\n   * autoscaling configuration. Note:\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, Object> getSnapshot() {\n    Map<String, Object> snapshot = new LinkedHashMap<>();\n    snapshot.put(\"nodeValues\", nodeValues);\n    Map<String, Map<String, Map<String, List<Map<String, Object>>>>> replicaInfosMap = new LinkedHashMap<>();\n    snapshot.put(\"replicaInfos\", replicaInfosMap);\n    replicaInfos.forEach((node, perNode) -> {\n      perNode.forEach((collection, shards) -> {\n        shards.forEach((shard, replicas) -> {\n          replicas.forEach(r -> {\n            List<Map<String, Object>> myReplicas = replicaInfosMap\n                .computeIfAbsent(node, n -> new LinkedHashMap<>())\n                .computeIfAbsent(collection, c -> new LinkedHashMap<>())\n                .computeIfAbsent(shard, s -> new ArrayList<>());\n            Map<String, Object> rMap = new LinkedHashMap<>();\n            r.toMap(rMap);\n            if (r.isLeader()) { // ReplicaInfo.toMap doesn't write this!!!\n              ((Map<String, Object>)rMap.values().iterator().next()).put(\"leader\", \"true\");\n            }\n            myReplicas.add(rMap);\n          });\n        });\n      });\n    });\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}