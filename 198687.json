{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","commits":[{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","sourceNew":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      Arrays.fill(arr, off, off + len, 0);\n      return len;\n    }\n\n","sourceOld":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","sourceNew":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      Arrays.fill(arr, off, off + len, 0);\n      return len;\n    }\n\n","sourceOld":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","sourceNew":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      Arrays.fill(arr, off, off + len, 0);\n      return len;\n    }\n\n","sourceOld":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      Arrays.fill(arr, off, off + len, 0);\n      return len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.NullReader#get(int,long[],int,int).mjava","sourceNew":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      Arrays.fill(arr, off, off + len, 0);\n      return len;\n    }\n\n","sourceOld":"    @Override\n    public int get(int index, long[] arr, int off, int len) {\n      Arrays.fill(arr, off, off + len, 0);\n      return len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb240aebd5a347d79f642127ad9255dd9a979f06"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cb240aebd5a347d79f642127ad9255dd9a979f06"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}