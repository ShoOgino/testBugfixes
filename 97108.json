{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testSortableTextGrouping().mjava","commits":[{"id":"bd66051e8d8d59ae300cec8b60f56810394a7511","date":1559669226,"type":0,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testSortableTextGrouping().mjava","pathOld":"/dev/null","sourceNew":"  private void testSortableTextGrouping() throws Exception {\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.add(\"group\", \"true\");\n    query.add(\"group.field\", tsort);\n    QueryResponse resp = queryServer(query);\n    GroupResponse groupResp = resp.getGroupResponse();\n    List<GroupCommand> grpCmds = groupResp.getValues();\n    for (GroupCommand grpCmd : grpCmds) {\n      if (grpCmd.getName().equals(tsort) == false) continue;\n      for (Group grp : grpCmd.getValues()) {\n        long count = grp.getResult().getNumFound();\n        if (grp.getGroupValue() == null) continue; // Don't count the groups without an entry as the numnber is variable\n        switch (grp.getGroupValue()) {\n          case \"all the kings horses and all the kings men\":\n          case \"An eye for eye only ends up making the whole world blind.\":\n          case \"Great works are performed, not by strength, but by perseverance.\":\n          case \"how now brown cow\":\n          case \"no eggs on wall, lesson learned\":\n          case \"now is the time for all good men\":\n          case \"this too shall pass\":\n          case \"to come to the aid of their country.\":\n            assertEquals(\"Should have exactly one facet count for field \" + grpCmd.getName(), 1, count);\n            break;\n          case \"the quick fox jumped over the lazy dog\":\n            assertEquals(\"Should have 5 docs for the lazy dog\", 5, count);\n            break;\n          default:\n            fail(\"No case for facet '\" + grpCmd.getName() + \"'\");\n\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd66051e8d8d59ae300cec8b60f56810394a7511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd66051e8d8d59ae300cec8b60f56810394a7511"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd66051e8d8d59ae300cec8b60f56810394a7511"],"bd66051e8d8d59ae300cec8b60f56810394a7511":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}