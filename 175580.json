{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","sourceNew":"  protected Map<String, Object> getNext() {\n    try {\n      if (rowIterator == null)\n        return null;\n      if (rowIterator.hasNext())\n        return rowIterator.next();\n      query = null;\n      rowIterator = null;\n      return null;\n    } catch (Exception e) {\n      SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n      query = null;\n      rowIterator = null;\n      wrapAndThrow(DataImportHandlerException.WARN, e);\n      return null;\n    }\n  }\n\n","sourceOld":"  protected Map<String, Object> getNext() {\n    try {\n      if (rowIterator == null)\n        return null;\n      if (rowIterator.hasNext())\n        return rowIterator.next();\n      query = null;\n      rowIterator = null;\n      return null;\n    } catch (Exception e) {\n      SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n      query = null;\n      rowIterator = null;\n      wrapAndThrow(DataImportHandlerException.WARN, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","sourceNew":"  protected Map<String, Object> getNext() {\n    try {\n      if (rowIterator == null)\n        return null;\n      if (rowIterator.hasNext())\n        return rowIterator.next();\n      query = null;\n      rowIterator = null;\n      return null;\n    } catch (Exception e) {\n      SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n      query = null;\n      rowIterator = null;\n      wrapAndThrow(DataImportHandlerException.WARN, e);\n      return null;\n    }\n  }\n\n","sourceOld":"  protected Map<String, Object> getNext() {\n    try {\n      if (rowIterator == null)\n        return null;\n      if (rowIterator.hasNext())\n        return rowIterator.next();\n      query = null;\n      rowIterator = null;\n      return null;\n    } catch (Exception e) {\n      SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n      query = null;\n      rowIterator = null;\n      wrapAndThrow(DataImportHandlerException.WARN, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","sourceNew":"  protected Map<String, Object> getNext() {\n    if(cacheSupport==null) {\n      try {\n        if (rowIterator == null)\n          return null;\n        if (rowIterator.hasNext())\n          return rowIterator.next();\n        query = null;\n        rowIterator = null;\n        return null;\n      } catch (Exception e) {\n        SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n        query = null;\n        rowIterator = null;\n        wrapAndThrow(DataImportHandlerException.WARN, e);\n        return null;\n      }\n    } else  {\n      return cacheSupport.getCacheData(context, query, rowIterator);\n    }      \n  }\n\n","sourceOld":"  protected Map<String, Object> getNext() {\n    try {\n      if (rowIterator == null)\n        return null;\n      if (rowIterator.hasNext())\n        return rowIterator.next();\n      query = null;\n      rowIterator = null;\n      return null;\n    } catch (Exception e) {\n      SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n      query = null;\n      rowIterator = null;\n      wrapAndThrow(DataImportHandlerException.WARN, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae7b4adfa274da5f5fdc865e127928b25e5e929","date":1417607786,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","sourceNew":"  protected Map<String, Object> getNext() {\n    if(zipper!=null){\n      return zipper.supplyNextChild(rowIterator);\n    }else{\n      if(cacheSupport==null) {\n        try {\n          if (rowIterator == null)\n            return null;\n          if (rowIterator.hasNext())\n            return rowIterator.next();\n          query = null;\n          rowIterator = null;\n          return null;\n        } catch (Exception e) {\n          SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n          query = null;\n          rowIterator = null;\n          wrapAndThrow(DataImportHandlerException.WARN, e);\n          return null;\n        }\n      } else  {\n        return cacheSupport.getCacheData(context, query, rowIterator);\n      }  \n    }\n  }\n\n","sourceOld":"  protected Map<String, Object> getNext() {\n    if(cacheSupport==null) {\n      try {\n        if (rowIterator == null)\n          return null;\n        if (rowIterator.hasNext())\n          return rowIterator.next();\n        query = null;\n        rowIterator = null;\n        return null;\n      } catch (Exception e) {\n        SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n        query = null;\n        rowIterator = null;\n        wrapAndThrow(DataImportHandlerException.WARN, e);\n        return null;\n      }\n    } else  {\n      return cacheSupport.getCacheData(context, query, rowIterator);\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getNext().mjava","sourceNew":null,"sourceOld":"  protected Map<String, Object> getNext() {\n    if(zipper!=null){\n      return zipper.supplyNextChild(rowIterator);\n    }else{\n      if(cacheSupport==null) {\n        try {\n          if (rowIterator == null)\n            return null;\n          if (rowIterator.hasNext())\n            return rowIterator.next();\n          query = null;\n          rowIterator = null;\n          return null;\n        } catch (Exception e) {\n          SolrException.log(log, \"getNext() failed for query '\" + query + \"'\", e);\n          query = null;\n          rowIterator = null;\n          wrapAndThrow(DataImportHandlerException.WARN, e);\n          return null;\n        }\n      } else  {\n        return cacheSupport.getCacheData(context, query, rowIterator);\n      }  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["3337b86edd36607f0208321f1deee79c55e5fd21"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3337b86edd36607f0208321f1deee79c55e5fd21":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3337b86edd36607f0208321f1deee79c55e5fd21"],"3337b86edd36607f0208321f1deee79c55e5fd21":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}