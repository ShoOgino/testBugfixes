{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","sourceNew":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random().nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random().nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random()));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","sourceOld":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random().nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random().nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random()));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","sourceNew":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random().nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random().nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random()));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","sourceOld":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random().nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random().nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random()));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#testSparseWrite().mjava","sourceNew":null,"sourceOld":"    public void testSparseWrite() throws IOException {\n      Directory d = newDirectory();\n      final int numBits = 10240;\n      BitVector bv = new BitVector(numBits);\n      bv.invertAll();\n      int numToClear = random().nextInt(5);\n      for(int i=0;i<numToClear;i++) {\n        bv.clear(random().nextInt(numBits));\n      }\n      bv.write(d, \"test\", newIOContext(random()));\n      final long size = d.fileLength(\"test\");\n      assertTrue(\"size=\" + size, size < 100);\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}