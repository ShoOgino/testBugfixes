{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. As a side-effect, <code>a2</code> is determinized if\n   * not already marked as deterministic.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1 == a2) return true;\n    if (a1.isSingleton()) {\n      if (a2.isSingleton()) return a1.singleton.equals(a2.singleton);\n      return BasicOperations.run(a2, a1.singleton);\n    }\n    a2.determinize();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>();\n    HashSet<StatePair> visited = new HashSet<StatePair>();\n    StatePair p = new StatePair(a1.initial, a2.initial);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (p.s1.accept && !p.s2.accept) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) min1 = t2[n2].max + 1;\n          else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. As a side-effect, <code>a2</code> is determinized if\n   * not already marked as deterministic.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1 == a2) return true;\n    if (a1.isSingleton()) {\n      if (a2.isSingleton()) return a1.singleton.equals(a2.singleton);\n      return BasicOperations.run(a2, a1.singleton);\n    }\n    a2.determinize();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>();\n    HashSet<StatePair> visited = new HashSet<StatePair>();\n    StatePair p = new StatePair(a1.initial, a2.initial);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (p.s1.accept && !p.s2.accept) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) min1 = t2[n2].max + 1;\n          else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. As a side-effect, <code>a2</code> is determinized if\n   * not already marked as deterministic.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1 == a2) return true;\n    if (a1.isSingleton()) {\n      if (a2.isSingleton()) return a1.singleton.equals(a2.singleton);\n      return BasicOperations.run(a2, a1.singleton);\n    }\n    a2.determinize();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashSet<StatePair> visited = new HashSet<>();\n    StatePair p = new StatePair(a1.initial, a2.initial);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (p.s1.accept && !p.s2.accept) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) min1 = t2[n2].max + 1;\n          else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. As a side-effect, <code>a2</code> is determinized if\n   * not already marked as deterministic.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1 == a2) return true;\n    if (a1.isSingleton()) {\n      if (a2.isSingleton()) return a1.singleton.equals(a2.singleton);\n      return BasicOperations.run(a2, a1.singleton);\n    }\n    a2.determinize();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>();\n    HashSet<StatePair> visited = new HashSet<StatePair>();\n    StatePair p = new StatePair(a1.initial, a2.initial);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (p.s1.accept && !p.s2.accept) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) min1 = t2[n2].max + 1;\n          else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. As a side-effect, <code>a2</code> is determinized if\n   * not already marked as deterministic.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1 == a2) return true;\n    if (a1.isSingleton()) {\n      if (a2.isSingleton()) return a1.singleton.equals(a2.singleton);\n      return BasicOperations.run(a2, a1.singleton);\n    }\n    a2.determinize();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashSet<StatePair> visited = new HashSet<>();\n    StatePair p = new StatePair(a1.initial, a2.initial);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (p.s1.accept && !p.s2.accept) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) min1 = t2[n2].max + 1;\n          else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#subsetOf(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#subsetOf(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. Both automata must be determinized and must have no dead\n   * states.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a1 must be deterministic\");\n    }\n    if (a2.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"a2 must be deterministic\");\n    }\n    assert hasDeadStatesFromInitial(a1) == false;\n    assert hasDeadStatesFromInitial(a2) == false;\n    if (a1.getNumStates() == 0) {\n      // Empty language is alwyas a subset of any other language\n      return true;\n    } else if (a2.getNumStates() == 0) {\n      return isEmpty(a1);\n    }\n\n    // TODO: cutover to iterators instead\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashSet<StatePair> visited = new HashSet<>();\n    StatePair p = new StatePair(0, 0);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min) {\n          b2++;\n        }\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) {\n            min1 = t2[n2].max + 1;\n          } else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].dest, t2[n2].dest);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the language of <code>a1</code> is a subset of the language\n   * of <code>a2</code>. As a side-effect, <code>a2</code> is determinized if\n   * not already marked as deterministic.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  public static boolean subsetOf(Automaton a1, Automaton a2) {\n    if (a1 == a2) return true;\n    if (a1.isSingleton()) {\n      if (a2.isSingleton()) return a1.singleton.equals(a2.singleton);\n      return BasicOperations.run(a2, a1.singleton);\n    }\n    a2.determinize();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashSet<StatePair> visited = new HashSet<>();\n    StatePair p = new StatePair(a1.initial, a2.initial);\n    worklist.add(p);\n    visited.add(p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      if (p.s1.accept && !p.s2.accept) {\n        return false;\n      }\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        int min1 = t1[n1].min, max1 = t1[n1].max;\n\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {\n          if (t2[n2].min > min1) {\n            return false;\n          }\n          if (t2[n2].max < Character.MAX_CODE_POINT) min1 = t2[n2].max + 1;\n          else {\n            min1 = Character.MAX_CODE_POINT;\n            max1 = Character.MIN_CODE_POINT;\n          }\n          StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n          if (!visited.contains(q)) {\n            worklist.add(q);\n            visited.add(q);\n          }\n        }\n        if (min1 <= max1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}