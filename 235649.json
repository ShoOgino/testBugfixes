{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          FST.BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          FST.BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          FST.BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader(0);\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\"\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE &&\n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);; \n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\"\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE &&\n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\"\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE &&\n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":["1ec890fad2ea96317f4429e0aa0085bb25673641","66a31a416e3550794ff2e245570885b7193952b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE &&\n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\"\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE &&\n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                (depth <= FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH &&\n                    children >= FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS) ||\n                 children >= FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS,\n                expanded);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS < FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS);\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE &&\n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          fstCompiler.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return fstCompiler.compile();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                (depth <= FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH &&\n                    children >= FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS) ||\n                 children >= FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS,\n                expanded);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS < FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS);\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                (depth <= FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH &&\n                    children >= FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS) ||\n                 children >= FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS,\n                expanded);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS < FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS);\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          fstCompiler.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return fstCompiler.compile();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                (depth <= FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH &&\n                    children >= FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS) ||\n                 children >= FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS,\n                expanded);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS < FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS);\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/LUCENE-2933\">LUCENE-2933</a>\n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRefBuilder term = new BytesRefBuilder();\n        final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term.get(), scratchIntsRef), nothing);\n        }\n\n        return b.finish();\n      }\n\n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth)\n        throws IOException {\n        if (FST.targetHasArcs(arc)) {\n          int childCount = 0;\n          BytesReader fstReader = fst.getBytesReader();\n          for (arc = fst.readFirstTargetArc(arc, arc, fstReader);;\n               arc = fst.readNextArc(arc, fstReader), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc, fstReader);\n            int children = verifyStateAndBelow(fst, new FST.Arc<>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                (depth <= FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH &&\n                    children >= FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS) ||\n                 children >= FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS,\n                expanded);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS < FST.FIXED_LENGTH_ARC_DEEP_NUM_ARCS);\n    assertTrue(FST.FIXED_LENGTH_ARC_SHALLOW_DEPTH >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"71d31a7d5773508492505519bb5230b87c8937ad":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["71d31a7d5773508492505519bb5230b87c8937ad"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["82557a475db3e0849171dc0be5b02e3ae0745ddb","8917bfede3b4ca30f4305c1e391e9218959cd723"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}