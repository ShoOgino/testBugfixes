{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetEventListener#execute(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetEventListener#execute(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String trigger = params.required().get(AutoScalingParams.TRIGGER);\n      Map<String, Object> cfgMap = new HashMap<>();\n      String name = \".sim_wait_event_\" + trigger;\n      cfgMap.put(AutoScalingParams.NAME, name);\n      cfgMap.put(AutoScalingParams.TRIGGER, trigger);\n\n      String[] beforeActions = params.getParams(AutoScalingParams.BEFORE_ACTION);\n      String[] afterActions = params.getParams(AutoScalingParams.AFTER_ACTION);\n      if (beforeActions != null) {\n        for (String beforeAction : beforeActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.BEFORE_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(beforeAction);\n        }\n      }\n      if (afterActions != null) {\n        for (String afterAction : afterActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.AFTER_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(afterAction);\n        }\n      }\n      String[] stages = params.required().getParams(AutoScalingParams.STAGE);\n      for (String stage : stages) {\n        String[] lst = stage.split(\"[,\\\\s]+\");\n        for (String val : lst) {\n          try {\n            TriggerEventProcessorStage.valueOf(val);\n            ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.STAGE, Utils.NEW_ARRAYLIST_FUN)).add(val);\n          } catch (IllegalArgumentException e) {\n            throw new IOException(\"Invalid stage name '\" + val + \"'\");\n          }\n        }\n      }\n      final AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(name, cfgMap);\n      TriggerListener listener = new SimWaitListener(scenario.cluster.getTimeSource(), listenerConfig);\n      if (scenario.context.containsKey(\"_sim_waitListener_\" + trigger)) {\n        throw new IOException(\"currently only one listener can be set per trigger. Trigger name: \" + trigger);\n      }\n      scenario.context.put(\"_sim_waitListener_\" + trigger, listener);\n      scenario.cluster.getOverseerTriggerThread().getScheduledTriggers().addAdditionalListener(listener);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e01fcbda8c04bde654f99836a2f8813f9444f3","date":1589564391,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetEventListener#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetEventListener#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String trigger = params.required().get(AutoScalingParams.TRIGGER);\n      Map<String, Object> cfgMap = new HashMap<>();\n      String name = \".sim_wait_event_\" + trigger;\n      cfgMap.put(AutoScalingParams.NAME, name);\n      cfgMap.put(AutoScalingParams.TRIGGER, trigger);\n\n      String[] beforeActions = params.getParams(AutoScalingParams.BEFORE_ACTION);\n      String[] afterActions = params.getParams(AutoScalingParams.AFTER_ACTION);\n      if (beforeActions != null) {\n        for (String beforeAction : beforeActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.BEFORE_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(beforeAction);\n        }\n      }\n      if (afterActions != null) {\n        for (String afterAction : afterActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.AFTER_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(afterAction);\n        }\n      }\n      String[] stages = params.required().getParams(AutoScalingParams.STAGE);\n      for (String stage : stages) {\n        String[] lst = stage.split(\"[,\\\\s]+\");\n        for (String val : lst) {\n          try {\n            TriggerEventProcessorStage.valueOf(val);\n            ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.STAGE, Utils.NEW_ARRAYLIST_FUN)).add(val);\n          } catch (IllegalArgumentException e) {\n            throw new IOException(\"Invalid stage name '\" + val + \"'\");\n          }\n        }\n      }\n      final AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(name, cfgMap);\n      if (scenario.context.containsKey(\"_sim_waitListener_\" + trigger)) {\n        throw new IOException(\"currently only one listener can be set per trigger. Trigger name: \" + trigger);\n      }\n      TriggerListener listener = new SimWaitListener(scenario.cluster.getTimeSource(), listenerConfig);\n      scenario.context.put(\"_sim_waitListener_\" + trigger, listener);\n      scenario.cluster.getOverseerTriggerThread().getScheduledTriggers().addAdditionalListener(listener);\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String trigger = params.required().get(AutoScalingParams.TRIGGER);\n      Map<String, Object> cfgMap = new HashMap<>();\n      String name = \".sim_wait_event_\" + trigger;\n      cfgMap.put(AutoScalingParams.NAME, name);\n      cfgMap.put(AutoScalingParams.TRIGGER, trigger);\n\n      String[] beforeActions = params.getParams(AutoScalingParams.BEFORE_ACTION);\n      String[] afterActions = params.getParams(AutoScalingParams.AFTER_ACTION);\n      if (beforeActions != null) {\n        for (String beforeAction : beforeActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.BEFORE_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(beforeAction);\n        }\n      }\n      if (afterActions != null) {\n        for (String afterAction : afterActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.AFTER_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(afterAction);\n        }\n      }\n      String[] stages = params.required().getParams(AutoScalingParams.STAGE);\n      for (String stage : stages) {\n        String[] lst = stage.split(\"[,\\\\s]+\");\n        for (String val : lst) {\n          try {\n            TriggerEventProcessorStage.valueOf(val);\n            ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.STAGE, Utils.NEW_ARRAYLIST_FUN)).add(val);\n          } catch (IllegalArgumentException e) {\n            throw new IOException(\"Invalid stage name '\" + val + \"'\");\n          }\n        }\n      }\n      final AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(name, cfgMap);\n      TriggerListener listener = new SimWaitListener(scenario.cluster.getTimeSource(), listenerConfig);\n      if (scenario.context.containsKey(\"_sim_waitListener_\" + trigger)) {\n        throw new IOException(\"currently only one listener can be set per trigger. Trigger name: \" + trigger);\n      }\n      scenario.context.put(\"_sim_waitListener_\" + trigger, listener);\n      scenario.cluster.getOverseerTriggerThread().getScheduledTriggers().addAdditionalListener(listener);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetEventListener#execute(SimScenario).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String trigger = params.required().get(AutoScalingParams.TRIGGER);\n      Map<String, Object> cfgMap = new HashMap<>();\n      String name = \".sim_wait_event_\" + trigger;\n      cfgMap.put(AutoScalingParams.NAME, name);\n      cfgMap.put(AutoScalingParams.TRIGGER, trigger);\n\n      String[] beforeActions = params.getParams(AutoScalingParams.BEFORE_ACTION);\n      String[] afterActions = params.getParams(AutoScalingParams.AFTER_ACTION);\n      if (beforeActions != null) {\n        for (String beforeAction : beforeActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.BEFORE_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(beforeAction);\n        }\n      }\n      if (afterActions != null) {\n        for (String afterAction : afterActions) {\n          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.AFTER_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(afterAction);\n        }\n      }\n      String[] stages = params.required().getParams(AutoScalingParams.STAGE);\n      for (String stage : stages) {\n        String[] lst = stage.split(\"[,\\\\s]+\");\n        for (String val : lst) {\n          try {\n            TriggerEventProcessorStage.valueOf(val);\n            ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.STAGE, Utils.NEW_ARRAYLIST_FUN)).add(val);\n          } catch (IllegalArgumentException e) {\n            throw new IOException(\"Invalid stage name '\" + val + \"'\");\n          }\n        }\n      }\n      final AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(name, cfgMap);\n      if (scenario.context.containsKey(\"_sim_waitListener_\" + trigger)) {\n        throw new IOException(\"currently only one listener can be set per trigger. Trigger name: \" + trigger);\n      }\n      TriggerListener listener = new SimWaitListener(scenario.cluster.getTimeSource(), listenerConfig);\n      scenario.context.put(\"_sim_waitListener_\" + trigger, listener);\n      scenario.cluster.getOverseerTriggerThread().getScheduledTriggers().addAdditionalListener(listener);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}