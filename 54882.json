{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}