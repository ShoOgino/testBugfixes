{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","commits":[{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","sourceNew":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    expect(request.getAttribute(EasyMock.anyObject(String.class))).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","sourceNew":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    expect(request.getAttribute(EasyMock.anyObject(String.class))).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#doAutoDetect(String,String,String,String,String,String).mjava","sourceNew":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    when(request.getHeader(\"User-Agent\")).thenReturn(userAgent);\n    when(request.getRequestURI()).thenReturn(uri);\n    when(request.getContentType()).thenReturn(contentType);\n    when(request.getContentLength()).thenReturn(contentLength);\n\n    when(request.getMethod()).thenReturn(method);\n    // we dont pass a content-length to let the security mechanism limit it:\n    when(request.getQueryString()).thenReturn(\"foo=1&bar=2\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n    verify(request).getInputStream();\n  }\n\n","sourceOld":"  public void doAutoDetect(String userAgent, String method, final String body, String expectedContentType, String expectedKey, String expectedValue) throws Exception {\n    String uri = \"/solr/select\";\n    String contentType = \"application/x-www-form-urlencoded\";\n    int contentLength = -1;  // does this mean auto-detect?\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getHeader(\"User-Agent\")).andReturn(userAgent).anyTimes();\n    expect(request.getHeader(\"Content-Length\")).andReturn(null).anyTimes();\n    expect(request.getRequestURI()).andReturn(uri).anyTimes();\n    expect(request.getContentType()).andReturn(contentType).anyTimes();\n    expect(request.getContentLength()).andReturn(contentLength).anyTimes();\n    expect(request.getAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE)).andReturn(null).anyTimes();\n\n    expect(request.getMethod()).andReturn(method).anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getQueryString()).andReturn(\"foo=1&bar=2\").anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(body.getBytes(StandardCharsets.US_ASCII)));\n    expect(request.getAttribute(EasyMock.anyObject(String.class))).andReturn(null).anyTimes();\n    replay(request);\n\n    SolrRequestParsers parsers = new SolrRequestParsers(h.getCore().getSolrConfig());\n    SolrQueryRequest req = parsers.parse(h.getCore(), \"/select\", request);\n    int num=0;\n    if (expectedContentType != null) {\n      for (ContentStream cs : req.getContentStreams()) {\n        num++;\n        assertTrue(cs.getContentType().startsWith(expectedContentType));\n        String returnedBody = IOUtils.toString(cs.getReader());\n        assertEquals(body, returnedBody);\n      }\n      assertEquals(1, num);\n    }\n\n    assertEquals(\"1\", req.getParams().get(\"foo\"));\n    assertEquals(\"2\", req.getParams().get(\"bar\"));\n\n    if (expectedKey != null) {\n      assertEquals(expectedValue, req.getParams().get(expectedKey));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d17ec5164debc23076db7fd11d0331f201583b5"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["0d17ec5164debc23076db7fd11d0331f201583b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["0d17ec5164debc23076db7fd11d0331f201583b5","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}