{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacets#verifyDim(String).mjava","sourceNew":"  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","sourceOld":"  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b656cbf28fe2a4be7de3f0e561623ca39d06884","date":1388622204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","sourceNew":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","sourceOld":"  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8b2bc4b8b503cc0b5743b19445798c62069e4d","date":1477390943,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","sourceNew":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName + \"\\\"\");\n    }\n    return dimConfig;\n  }\n\n","sourceOld":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","sourceNew":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName + \"\\\"\");\n    }\n    return dimConfig;\n  }\n\n","sourceOld":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacets#verifyDim(String).mjava","sourceNew":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName + \"\\\"\");\n    }\n    return dimConfig;\n  }\n\n","sourceOld":"  /** Throws {@code IllegalArgumentException} if the\n   *  dimension is not recognized.  Otherwise, returns the\n   *  {@link DimConfig} for this dimension. */\n  protected FacetsConfig.DimConfig verifyDim(String dim) {\n    FacetsConfig.DimConfig dimConfig = config.getDimConfig(dim);\n    if (!dimConfig.indexFieldName.equals(indexFieldName)) {\n      throw new IllegalArgumentException(\"dimension \\\"\" + dim + \"\\\" was not indexed into field \\\"\" + indexFieldName);\n    }\n    return dimConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["3cc728b07df73b197e6d940d27f9b08b63918f13","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["3cc728b07df73b197e6d940d27f9b08b63918f13","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"4b8b2bc4b8b503cc0b5743b19445798c62069e4d":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","4b8b2bc4b8b503cc0b5743b19445798c62069e4d"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}