{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":null,"sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d642cf6c3908f27d1932b67fbd6c01cf4668d15d","date":1296754913,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      Reader reader = c.getReader();\n                      try {\n                        IOUtils.copy(reader, out);\n                      } finally {\n                        reader.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","date":1310073081,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  PartSource source = new PartSource() {\n                    @Override\n                    public long getLength() {\n                      return c.getSize();\n                    }\n                      \n                    public String getFileName() {\n                      return c.getName();\n                    }\n\n                    @Override\n                    public InputStream createInputStream() throws IOException {\n                      return c.getStream();\n                    }\n                  };\n                \n                  parts.add(new FilePart(c.getName(), source, \n                                         c.getContentType(), charSet));\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de","d642cf6c3908f27d1932b67fbd6c01cf4668d15d","0a12d3c6475f1b99b086e4ca6b9ba34e65081859","dbf8bf15546966c2999be987d32191fc1ef495ef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  PartSource source = new PartSource() {\n                    @Override\n                    public long getLength() {\n                      return c.getSize();\n                    }\n                      \n                    public String getFileName() {\n                      return c.getName();\n                    }\n\n                    @Override\n                    public InputStream createInputStream() throws IOException {\n                      return c.getStream();\n                    }\n                  };\n                \n                  parts.add(new FilePart(c.getName(), source, \n                                         c.getContentType(), charSet));\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  PartSource source = new PartSource() {\n                    @Override\n                    public long getLength() {\n                      return c.getSize();\n                    }\n                      \n                    public String getFileName() {\n                      return c.getName();\n                    }\n\n                    @Override\n                    public InputStream createInputStream() throws IOException {\n                      return c.getStream();\n                    }\n                  };\n                \n                  parts.add(new FilePart(c.getName(), source, \n                                         c.getContentType(), charSet));\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  PartSource source = new PartSource() {\n                    @Override\n                    public long getLength() {\n                      return c.getSize();\n                    }\n                      \n                    public String getFileName() {\n                      return c.getName();\n                    }\n\n                    @Override\n                    public InputStream createInputStream() throws IOException {\n                      return c.getStream();\n                    }\n                  };\n                \n                  parts.add(new FilePart(c.getName(), source, \n                                         c.getContentType(), charSet));\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      InputStream in = c.getStream();\n                      try {\n                        IOUtils.copy(in, out);\n                      } finally {\n                        in.close();\n                      }\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  PartSource source = new PartSource() {\n                    @Override\n                    public long getLength() {\n                      return c.getSize();\n                    }\n                      \n                    public String getFileName() {\n                      return c.getName();\n                    }\n\n                    @Override\n                    public InputStream createInputStream() throws IOException {\n                      return c.getStream();\n                    }\n                  };\n                \n                  parts.add(new FilePart(c.getName(), source, \n                                         c.getContentType(), charSet));\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException {\n    HttpMethod method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion());\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  PartSource source = new PartSource() {\n                    @Override\n                    public long getLength() {\n                      return c.getSize();\n                    }\n                      \n                    public String getFileName() {\n                      return c.getName();\n                    }\n\n                    @Override\n                    public InputStream createInputStream() throws IOException {\n                      return c.getStream();\n                    }\n                  };\n                \n                  parts.add(new FilePart(c.getName(), source, \n                                         c.getContentType(), charSet));\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(params, false);\n              PostMethod post = new PostMethod(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                post.setRequestEntity(new RequestEntity() {\n                  public long getContentLength() {\n                    return -1;\n                  }\n\n                  public String getContentType() {\n                    return contentStream[0].getContentType();\n                  }\n\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n\n                  public void writeRequest(OutputStream outputStream) throws IOException {\n                    ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream);\n                  }\n                }\n                );\n\n              } else {\n                is = contentStream[0].getStream();\n                post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()));\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n      if(is != null) {\n        is.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d642cf6c3908f27d1932b67fbd6c01cf4668d15d","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d642cf6c3908f27d1932b67fbd6c01cf4668d15d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","d642cf6c3908f27d1932b67fbd6c01cf4668d15d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda":["d642cf6c3908f27d1932b67fbd6c01cf4668d15d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","d642cf6c3908f27d1932b67fbd6c01cf4668d15d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"d642cf6c3908f27d1932b67fbd6c01cf4668d15d":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","d642cf6c3908f27d1932b67fbd6c01cf4668d15d"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda":["c26f00b574427b55127e869b935845554afde1fa","1291e4568eb7d9463d751627596ef14baf4c1603","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"d642cf6c3908f27d1932b67fbd6c01cf4668d15d":["1291e4568eb7d9463d751627596ef14baf4c1603","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}