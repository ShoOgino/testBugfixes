{"path":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f29422e9f6dee3a86a66bbc626eeb8228a1c2f1","date":1330446905,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n    }\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        shardHandlerFactory.close();\n      }\n      @Override\n      public void postClose(SolrCore core) {\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"212912761d471e5bfe06cf8027bad27e60a37695","date":1335188643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"469779ab5be8ae82c45e0e2a86bfa6d3b30ce0c8","date":1428845063,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.debug(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.debug(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    Set<String> missing = new HashSet<>(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    Set<String> missing = new HashSet<>(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    Set<String> missing = new HashSet<>();\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    Set<String> missing = new HashSet<>(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    if (core.getCoreContainer().isZooKeeperAware()) {\n      core.getPackageListeners().addListener(new PackageListeners.Listener() {\n        @Override\n        public String packageName() {\n          return null;\n        }\n\n        @Override\n        public PluginInfo pluginInfo() {\n          return null;\n        }\n\n        @Override\n        public void changed(PackageLoader.Package pkg) {\n          //we could optimize this by listening to only relevant packages,\n          // but it is not worth optimizing as these are lightweight objects\n          components = null;\n        }\n\n        @Override\n        public PackageLoader.Package.Version getPackageVersion() {\n          return null;\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    this.core = core;\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    Set<String> missing = new HashSet<>(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    Set<String> missing = new HashSet<>(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    if (core.getCoreContainer().isZooKeeperAware()) {\n      core.getPackageListeners().addListener(new PackageListeners.Listener() {\n        @Override\n        public String packageName() {\n          return null;\n        }\n\n        @Override\n        public PluginInfo pluginInfo() {\n          return null;\n        }\n\n        @Override\n        public void changed(PackageLoader.Package pkg, Ctx ctx) {\n          //we could optimize this by listening to only relevant packages,\n          // but it is not worth optimizing as these are lightweight objects\n          components = null;\n        }\n      });\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using <code>INIT_FIRST_COMPONENTS</code> or <code>INIT_LAST_COMPONENTS</code>,\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the <code>INIT_COMPONENTS</code> syntax.\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    List<String> c = (List<String>) initArgs.get(INIT_COMPONENTS);\n    Set<String> missing = new HashSet<>(core.getSearchComponents().checkContains(c));\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(first));\n    List<String> last = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n    missing.addAll(core.getSearchComponents().checkContains(last));\n    if (!missing.isEmpty()) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Missing SearchComponents named : \" + missing);\n    if (c != null && (first != null || last != null)) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"First/Last components only valid if you do not declare 'components'\");\n\n    if (shfInfo == null) {\n      shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n    } else {\n      shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          shardHandlerFactory.close();\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n\n    if (core.getCoreContainer().isZooKeeperAware()) {\n      core.getPackageListeners().addListener(new PackageListeners.Listener() {\n        @Override\n        public String packageName() {\n          return null;\n        }\n\n        @Override\n        public PluginInfo pluginInfo() {\n          return null;\n        }\n\n        @Override\n        public void changed(PackageLoader.Package pkg) {\n          //we could optimize this by listening to only relevant packages,\n          // but it is not worth optimizing as these are lightweight objects\n          components = null;\n        }\n\n        @Override\n        public PackageLoader.Package.Version getPackageVersion() {\n          return null;\n        }\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["469779ab5be8ae82c45e0e2a86bfa6d3b30ce0c8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["212912761d471e5bfe06cf8027bad27e60a37695","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6f29422e9f6dee3a86a66bbc626eeb8228a1c2f1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"469779ab5be8ae82c45e0e2a86bfa6d3b30ce0c8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6f29422e9f6dee3a86a66bbc626eeb8228a1c2f1":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"212912761d471e5bfe06cf8027bad27e60a37695":["6f29422e9f6dee3a86a66bbc626eeb8228a1c2f1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["469779ab5be8ae82c45e0e2a86bfa6d3b30ce0c8"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["212912761d471e5bfe06cf8027bad27e60a37695"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"b0b597c65628ca9e73913a07e81691f8229bae35":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["954ae83b7dfacaa33d48ea056448ae11f7745a93","b0b597c65628ca9e73913a07e81691f8229bae35"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["469779ab5be8ae82c45e0e2a86bfa6d3b30ce0c8"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["6f29422e9f6dee3a86a66bbc626eeb8228a1c2f1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"469779ab5be8ae82c45e0e2a86bfa6d3b30ce0c8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"6f29422e9f6dee3a86a66bbc626eeb8228a1c2f1":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","212912761d471e5bfe06cf8027bad27e60a37695"],"212912761d471e5bfe06cf8027bad27e60a37695":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}