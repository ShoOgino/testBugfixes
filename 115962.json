{"path":"src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","commits":[{"id":"fcd62a924d6c6f9124f71118cd52cf1ffb27bc72","date":1233905013,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicateAfterStartup() throws Exception{\n    //stop slave\n    slaveJetty.stop();\n    \n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"solrconfig-master2.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master, 9999);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    //start slave\n    slaveJetty = createJetty(slave, 0);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","0b11f32acac13cc087cc735808dfe19c2b52673b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efab8c7286516f937e01cc69275841cfb09d90b9","date":1233948104,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","sourceNew":"  public void testReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master2.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  public void testReplicateAfterStartup() throws Exception{\n    //stop slave\n    slaveJetty.stop();\n    \n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    copyFile(new File(\".\" + File.separator +\n            \"solr\" + File.separator +\n            \"conf\" + File.separator + \"solrconfig-master2.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master, 9999);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    //start slave\n    slaveJetty = createJetty(slave, 0);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","sourceNew":"  public void testReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master2.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  public void testReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    copyFile(new File(CONF_DIR + \"solrconfig-master2.xml\"),\n            new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    copyFile(new File(SLAVE_CONFIG), new File(slave.getConfDir(), \"solrconfig.xml\"), masterJetty.getLocalPort());\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["efab8c7286516f937e01cc69275841cfb09d90b9"],"fcd62a924d6c6f9124f71118cd52cf1ffb27bc72":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efab8c7286516f937e01cc69275841cfb09d90b9":["fcd62a924d6c6f9124f71118cd52cf1ffb27bc72"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fcd62a924d6c6f9124f71118cd52cf1ffb27bc72"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fcd62a924d6c6f9124f71118cd52cf1ffb27bc72":["efab8c7286516f937e01cc69275841cfb09d90b9"],"efab8c7286516f937e01cc69275841cfb09d90b9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}