{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","84b590669deb3d3a471cec6cb13b104b2ee94418"],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b590669deb3d3a471cec6cb13b104b2ee94418"]},"commit2Childs":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}