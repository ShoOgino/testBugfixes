{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}