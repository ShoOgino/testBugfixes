{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","commits":[{"id":"7d7203a8194ca217ec527231120df075e9bec237","date":1219055463,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void xxxtestBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void xxxtestBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["7d7203a8194ca217ec527231120df075e9bec237"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"7d7203a8194ca217ec527231120df075e9bec237":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7d7203a8194ca217ec527231120df075e9bec237":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d7203a8194ca217ec527231120df075e9bec237"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}