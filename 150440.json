{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":null,"sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}