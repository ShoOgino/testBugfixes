{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29e66165c8c36fbd9967747d27b165761c55081","date":1542486027,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e29e66165c8c36fbd9967747d27b165761c55081":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29e66165c8c36fbd9967747d27b165761c55081"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e29e66165c8c36fbd9967747d27b165761c55081":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["e29e66165c8c36fbd9967747d27b165761c55081"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}