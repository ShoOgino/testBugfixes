{"path":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5892bdf887aeb6dcc06096dd9b4a7363513eff7","date":1327699677,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":["b8ad81f99cac0805cb57c4d47963d87d4a722a62"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9926a3b6bdadc8e8a8c97721ce4d60dd3431634b","date":1338838491,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    assertEquals(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(\"UTF-8\"));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["9d3d365762604952e436b51980101dfc84cc1b3e"],"5eb2511ababf862ea11e10761c70ee560cd84510":["9926a3b6bdadc8e8a8c97721ce4d60dd3431634b","9d3d365762604952e436b51980101dfc84cc1b3e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["c26f00b574427b55127e869b935845554afde1fa","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9d3d365762604952e436b51980101dfc84cc1b3e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["c26f00b574427b55127e869b935845554afde1fa","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"c5892bdf887aeb6dcc06096dd9b4a7363513eff7":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d3d365762604952e436b51980101dfc84cc1b3e":["9926a3b6bdadc8e8a8c97721ce4d60dd3431634b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9d3d365762604952e436b51980101dfc84cc1b3e","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9926a3b6bdadc8e8a8c97721ce4d60dd3431634b":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"c26f00b574427b55127e869b935845554afde1fa":["fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[],"c5892bdf887aeb6dcc06096dd9b4a7363513eff7":["fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","9926a3b6bdadc8e8a8c97721ce4d60dd3431634b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"9d3d365762604952e436b51980101dfc84cc1b3e":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9926a3b6bdadc8e8a8c97721ce4d60dd3431634b":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fd92b8bcc88e969302510acf77bd6970da3994c4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}