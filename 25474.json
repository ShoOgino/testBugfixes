{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      op.addError(\"No trigger exists with name: \" + triggerName);\n      return currentConfig;\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      op.addError(\"No trigger exists with name: \" + triggerName);\n      return currentConfig;\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      op.addError(\"No trigger exists with name: \" + triggerName);\n      return currentConfig;\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      op.addError(\"No trigger exists with name: \" + triggerName);\n      return currentConfig;\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      op.addError(\"No trigger exists with name: \" + triggerName);\n      return currentConfig;\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleResumeTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleResumeTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      op.addError(\"No trigger exists with name: \" + triggerName);\n      return currentConfig;\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (!trigger.enabled) {\n          trigger = trigger.withEnabled(true);\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(entry.getKey());\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3590d254d013266ac3849fae45974e747f7f576"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e3590d254d013266ac3849fae45974e747f7f576"],"e3590d254d013266ac3849fae45974e747f7f576":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}