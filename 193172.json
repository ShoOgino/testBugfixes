{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByArrayUIF#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorUIF[FacetField]#findStartAndEndOrds().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void findStartAndEndOrds() throws IOException {\n    uif = UnInvertedField.getUnInvertedField(freq.field, fcontext.searcher);\n    te = uif.getOrdTermsEnum( fcontext.searcher.getLeafReader() );    // \"te\" can be null\n\n    startTermIndex = 0;\n    endTermIndex = uif.numTerms();  // one past the end\n\n    if (prefixRef != null && te != null) {\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        startTermIndex = uif.numTerms();\n      } else {\n        startTermIndex = (int) te.ord();\n      }\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      if (te.seekCeil(prefixRef.get()) == TermsEnum.SeekStatus.END) {\n        endTermIndex = uif.numTerms();\n      } else {\n        endTermIndex = (int) te.ord();\n      }\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}