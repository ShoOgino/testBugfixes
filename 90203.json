{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValued() throws IOException {\n    indexWriter.addDocument(newDoc(\"one bravo three\", \"four bravo six\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"one bravo\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"four bravo\"), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"br\")), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n\n    assertArrayEquals(new String[]{\"<b>one</b> <b>bravo</b> three... <b>four</b> <b>bravo</b> six\"},\n        snippets);\n\n\n    // now test phraseQuery won't span across values\n    assert indexAnalyzer.getPositionIncrementGap(\"body\") > 0;\n\n    PhraseQuery phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    // 1 too little; won't span\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\") - 1);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .build();\n\n    topDocs = searcher.search(query, 10);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> three... four <b>bravo</b> six\", snippets[0]);\n\n    // and add just enough slop to cross the values:\n    phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\")); // just enough to span\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.MUST) // must match and it will\n        .build();\n    topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> <b>three</b>... <b>four</b> <b>bravo</b> six\", snippets[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValued() throws IOException {\n    indexWriter.addDocument(newDoc(\"one bravo three\", \"four bravo six\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"one bravo\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"four bravo\"), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"br\")), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n\n    assertArrayEquals(new String[]{\"<b>one</b> <b>bravo</b> three... <b>four</b> <b>bravo</b> six\"},\n        snippets);\n\n\n    // now test phraseQuery won't span across values\n    assert indexAnalyzer.getPositionIncrementGap(\"body\") > 0;\n\n    PhraseQuery phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    // 1 too little; won't span\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\") - 1);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .build();\n\n    topDocs = searcher.search(query, 10);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> three... four <b>bravo</b> six\", snippets[0]);\n\n    // and add just enough slop to cross the values:\n    phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\")); // just enough to span\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.MUST) // must match and it will\n        .build();\n    topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> <b>three</b>... <b>four</b> <b>bravo</b> six\", snippets[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws IOException {\n    indexWriter.addDocument(newDoc(\"one bravo three\", \"four bravo six\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"one bravo\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"four bravo\"), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"br\")), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n\n    assertArrayEquals(new String[]{\"<b>one</b> <b>bravo</b> three... <b>four</b> <b>bravo</b> six\"},\n        snippets);\n\n\n    // now test phraseQuery won't span across values\n    assert indexAnalyzer.getPositionIncrementGap(\"body\") > 0;\n\n    PhraseQuery phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    // 1 too little; won't span\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\") - 1);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .build();\n\n    topDocs = searcher.search(query, 10);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> three... four <b>bravo</b> six\", snippets[0]);\n\n    // and add just enough slop to cross the values:\n    phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\")); // just enough to span\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.MUST) // must match and it will\n        .build();\n    topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits.value);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> <b>three</b>... <b>four</b> <b>bravo</b> six\", snippets[0]);\n  }\n\n","sourceOld":"  public void testMultiValued() throws IOException {\n    indexWriter.addDocument(newDoc(\"one bravo three\", \"four bravo six\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"one bravo\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"four bravo\"), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"br\")), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n\n    assertArrayEquals(new String[]{\"<b>one</b> <b>bravo</b> three... <b>four</b> <b>bravo</b> six\"},\n        snippets);\n\n\n    // now test phraseQuery won't span across values\n    assert indexAnalyzer.getPositionIncrementGap(\"body\") > 0;\n\n    PhraseQuery phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    // 1 too little; won't span\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\") - 1);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .build();\n\n    topDocs = searcher.search(query, 10);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> three... four <b>bravo</b> six\", snippets[0]);\n\n    // and add just enough slop to cross the values:\n    phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\")); // just enough to span\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.MUST) // must match and it will\n        .build();\n    topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> <b>three</b>... <b>four</b> <b>bravo</b> six\", snippets[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws IOException {\n    indexWriter.addDocument(newDoc(\"one bravo three\", \"four bravo six\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"one bravo\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"four bravo\"), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"br\")), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n\n    if (highlighter.getFlags(\"body\").contains(HighlightFlag.WEIGHT_MATCHES)) {\n      assertArrayEquals(new String[]{\"<b>one bravo</b> three... <b>four bravo</b> six\"}, snippets);\n    } else {\n      assertArrayEquals(new String[]{\"<b>one</b> <b>bravo</b> three... <b>four</b> <b>bravo</b> six\"}, snippets);\n    }\n\n    // now test phraseQuery won't span across values\n    assert indexAnalyzer.getPositionIncrementGap(\"body\") > 0;\n\n    PhraseQuery phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    // 1 too little; won't span\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\") - 1);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .build();\n\n    topDocs = searcher.search(query, 10);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> three... four <b>bravo</b> six\", snippets[0]);\n\n    // and add just enough slop to cross the values:\n    phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\")); // just enough to span\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.MUST) // must match and it will\n        .build();\n    topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits.value);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    if (highlighter.getFlags(\"body\").contains(HighlightFlag.WEIGHT_MATCHES)) {\n      assertEquals(\"one <b>bravo</b> <b>three</b>... four <b>bravo</b> six\", snippets[0]);\n    } else {\n      assertEquals(\"one <b>bravo</b> <b>three</b>... <b>four</b> <b>bravo</b> six\", snippets[0]);\n    }\n  }\n\n","sourceOld":"  public void testMultiValued() throws IOException {\n    indexWriter.addDocument(newDoc(\"one bravo three\", \"four bravo six\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"one bravo\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"four bravo\"), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"br\")), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n\n    assertArrayEquals(new String[]{\"<b>one</b> <b>bravo</b> three... <b>four</b> <b>bravo</b> six\"},\n        snippets);\n\n\n    // now test phraseQuery won't span across values\n    assert indexAnalyzer.getPositionIncrementGap(\"body\") > 0;\n\n    PhraseQuery phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    // 1 too little; won't span\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\") - 1);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .build();\n\n    topDocs = searcher.search(query, 10);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> three... four <b>bravo</b> six\", snippets[0]);\n\n    // and add just enough slop to cross the values:\n    phraseQuery = newPhraseQuery(\"body\", \"three four\");\n    phraseQuery = setSlop(phraseQuery, indexAnalyzer.getPositionIncrementGap(\"body\")); // just enough to span\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"bravo\")), BooleanClause.Occur.MUST)\n        .add(phraseQuery, BooleanClause.Occur.MUST) // must match and it will\n        .build();\n    topDocs = searcher.search(query, 10);\n    assertEquals(1, topDocs.totalHits.value);\n    snippets = highlighter.highlight(\"body\", query, topDocs, 2);\n    assertEquals(\"one <b>bravo</b> <b>three</b>... <b>four</b> <b>bravo</b> six\", snippets[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}