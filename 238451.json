{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    // TestTV tests for this in testBadParams... but is this\n    // really guaranteed by the API?\n    if (doc < 0 || doc >= offsets.size()) {\n      throw new IllegalArgumentException(\"doc id out of range\");\n    }\n\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets.get(doc));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    // TestTV tests for this in testBadParams... but is this\n    // really guaranteed by the API?\n    if (doc < 0 || doc >= offsets.size()) {\n      throw new IllegalArgumentException(\"doc id out of range\");\n    }\n\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets.get(doc));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e784d2742d5536b6fceba16c6d032d4b2e38e320","date":1349724693,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    // TestTV tests for this in testBadParams... but is this\n    // really guaranteed by the API?\n    if (doc < 0 || doc >= offsets.length) {\n      throw new IllegalArgumentException(\"doc id out of range\");\n    }\n\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    // TestTV tests for this in testBadParams... but is this\n    // really guaranteed by the API?\n    if (doc < 0 || doc >= offsets.size()) {\n      throw new IllegalArgumentException(\"doc id out of range\");\n    }\n\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets.get(doc));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":null,"bugIntro":["4d0ee734a67ae20fd4c683458847aebde606bb02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d0ee734a67ae20fd4c683458847aebde606bb02","date":1352490740,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    // TestTV tests for this in testBadParams... but is this\n    // really guaranteed by the API?\n    if (doc < 0 || doc >= offsets.length) {\n      throw new IllegalArgumentException(\"doc id out of range\");\n    }\n\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":["e784d2742d5536b6fceba16c6d032d4b2e38e320","3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    // TestTV tests for this in testBadParams... but is this\n    // really guaranteed by the API?\n    if (doc < 0 || doc >= offsets.length) {\n      throw new IllegalArgumentException(\"doc id out of range\");\n    }\n\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<String,SimpleTVTerms>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      BytesRefBuilder term = new BytesRefBuilder();\n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch.get(), TERMTEXT);\n        int termLength = scratch.length() - TERMTEXT.length;\n        term.grow(termLength);\n        term.setLength(termLength);\n        System.arraycopy(scratch.bytes(), TERMTEXT.length, term.bytes(), 0, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term.toBytesRef(), postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch.get(), TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch.get(), PAYLOAD);\n                if (scratch.length() - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length() - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes(), PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch.get(), ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch, NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch, FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch, TERMTEXT);\n        BytesRef term = new BytesRef();\n        int termLength = scratch.length - TERMTEXT.length;\n        term.grow(termLength);\n        term.length = termLength;\n        System.arraycopy(scratch.bytes, scratch.offset+TERMTEXT.length, term.bytes, term.offset, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term, postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch, TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch, POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch, PAYLOAD);\n                if (scratch.length - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes, scratch.offset+PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch, STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch, ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":["0935c850ea562932997b72c69d93e345f21d7f45","3cc749c053615f5871f3b95715fe292f34e70a53","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n\n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n\n      BytesRefBuilder term = new BytesRefBuilder();\n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch.get(), TERMTEXT);\n        int termLength = scratch.length() - TERMTEXT.length;\n        term.grow(termLength);\n        term.setLength(termLength);\n        System.arraycopy(scratch.bytes(), TERMTEXT.length, term.bytes(), 0, termLength);\n\n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term.toBytesRef(), postings);\n\n        readLine();\n        assert StringHelper.startsWith(scratch.get(), TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n\n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n\n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n\n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch.get(), PAYLOAD);\n                if (scratch.length() - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length() - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes(), PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n\n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int doc) throws IOException {\n    SortedMap<String,SimpleTVTerms> fields = new TreeMap<>();\n    in.seek(offsets[doc]);\n    readLine();\n    assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n    int numFields = parseIntAt(NUMFIELDS.length);\n    if (numFields == 0) {\n      return null; // no vectors for this doc\n    }\n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELD);\n      // skip fieldNumber:\n      parseIntAt(FIELD.length);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDNAME);\n      String fieldName = readString(FIELDNAME.length, scratch);\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDPOSITIONS);\n      boolean positions = Boolean.parseBoolean(readString(FIELDPOSITIONS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDOFFSETS);\n      boolean offsets = Boolean.parseBoolean(readString(FIELDOFFSETS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDPAYLOADS);\n      boolean payloads = Boolean.parseBoolean(readString(FIELDPAYLOADS.length, scratch));\n      \n      readLine();\n      assert StringHelper.startsWith(scratch.get(), FIELDTERMCOUNT);\n      int termCount = parseIntAt(FIELDTERMCOUNT.length);\n      \n      SimpleTVTerms terms = new SimpleTVTerms(offsets, positions, payloads);\n      fields.put(fieldName, terms);\n      \n      BytesRefBuilder term = new BytesRefBuilder();\n      for (int j = 0; j < termCount; j++) {\n        readLine();\n        assert StringHelper.startsWith(scratch.get(), TERMTEXT);\n        int termLength = scratch.length() - TERMTEXT.length;\n        term.grow(termLength);\n        term.setLength(termLength);\n        System.arraycopy(scratch.bytes(), TERMTEXT.length, term.bytes(), 0, termLength);\n        \n        SimpleTVPostings postings = new SimpleTVPostings();\n        terms.terms.put(term.toBytesRef(), postings);\n        \n        readLine();\n        assert StringHelper.startsWith(scratch.get(), TERMFREQ);\n        postings.freq = parseIntAt(TERMFREQ.length);\n        \n        if (positions || offsets) {\n          if (positions) {\n            postings.positions = new int[postings.freq];\n            if (payloads) {\n              postings.payloads = new BytesRef[postings.freq];\n            }\n          }\n        \n          if (offsets) {\n            postings.startOffsets = new int[postings.freq];\n            postings.endOffsets = new int[postings.freq];\n          }\n          \n          for (int k = 0; k < postings.freq; k++) {\n            if (positions) {\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), POSITION);\n              postings.positions[k] = parseIntAt(POSITION.length);\n              if (payloads) {\n                readLine();\n                assert StringHelper.startsWith(scratch.get(), PAYLOAD);\n                if (scratch.length() - PAYLOAD.length == 0) {\n                  postings.payloads[k] = null;\n                } else {\n                  byte payloadBytes[] = new byte[scratch.length() - PAYLOAD.length];\n                  System.arraycopy(scratch.bytes(), PAYLOAD.length, payloadBytes, 0, payloadBytes.length);\n                  postings.payloads[k] = new BytesRef(payloadBytes);\n                }\n              }\n            }\n            \n            if (offsets) {\n              readLine();\n              assert StringHelper.startsWith(scratch.get(), STARTOFFSET);\n              postings.startOffsets[k] = parseIntAt(STARTOFFSET.length);\n              \n              readLine();\n              assert StringHelper.startsWith(scratch.get(), ENDOFFSET);\n              postings.endOffsets[k] = parseIntAt(ENDOFFSET.length);\n            }\n          }\n        }\n      }\n    }\n    return new SimpleTVFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e784d2742d5536b6fceba16c6d032d4b2e38e320":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d0ee734a67ae20fd4c683458847aebde606bb02"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["e784d2742d5536b6fceba16c6d032d4b2e38e320","4d0ee734a67ae20fd4c683458847aebde606bb02"],"4d0ee734a67ae20fd4c683458847aebde606bb02":["e784d2742d5536b6fceba16c6d032d4b2e38e320"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"51f5280f31484820499077f41fcdfe92d527d9dc":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"e784d2742d5536b6fceba16c6d032d4b2e38e320":["407687e67faf6e1f02a211ca078d8e3eed631027","4d0ee734a67ae20fd4c683458847aebde606bb02"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["e784d2742d5536b6fceba16c6d032d4b2e38e320"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4d0ee734a67ae20fd4c683458847aebde606bb02":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}