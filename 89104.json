{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#_encodeTerm(DataOutput,FieldInfo,IntBlockTermState).mjava","commits":[{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#_encodeTerm(DataOutput,FieldInfo,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  public void _encodeTerm(DataOutput out, FieldInfo fieldInfo, IntBlockTermState state) throws IOException {\n    if (state.singletonDocID == -1) {\n      out.writeVLong(state.docTermStartFP - lastState.docTermStartFP);\n      lastState.docTermStartFP = state.docTermStartFP;\n    } else {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      out.writeVLong(state.posTermStartFP - lastState.posTermStartFP);\n      lastState.posTermStartFP = state.posTermStartFP;\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && state.payTermStartFP != -1) {\n        out.writeVLong(state.payTermStartFP - lastState.payTermStartFP);\n        lastState.payTermStartFP = state.payTermStartFP;\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"871d0195bf88f0db53758cb00eb1f793103216c4","date":1378053137,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#_encodeTerm(DataOutput,FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#_encodeTerm(DataOutput,FieldInfo,IntBlockTermState).mjava","sourceNew":"  private void _encodeTerm(DataOutput out, FieldInfo fieldInfo, IntBlockTermState state) throws IOException {\n    if (state.singletonDocID == -1) {\n      out.writeVLong(state.docTermStartFP - lastState.docTermStartFP);\n      lastState.docTermStartFP = state.docTermStartFP;\n    } else {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      out.writeVLong(state.posTermStartFP - lastState.posTermStartFP);\n      lastState.posTermStartFP = state.posTermStartFP;\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && state.payTermStartFP != -1) {\n        out.writeVLong(state.payTermStartFP - lastState.payTermStartFP);\n        lastState.payTermStartFP = state.payTermStartFP;\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n  }\n\n","sourceOld":"  public void _encodeTerm(DataOutput out, FieldInfo fieldInfo, IntBlockTermState state) throws IOException {\n    if (state.singletonDocID == -1) {\n      out.writeVLong(state.docTermStartFP - lastState.docTermStartFP);\n      lastState.docTermStartFP = state.docTermStartFP;\n    } else {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      out.writeVLong(state.posTermStartFP - lastState.posTermStartFP);\n      lastState.posTermStartFP = state.posTermStartFP;\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && state.payTermStartFP != -1) {\n        out.writeVLong(state.payTermStartFP - lastState.payTermStartFP);\n        lastState.payTermStartFP = state.payTermStartFP;\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"563ccede63f326b5dfd37df2341608ce1a80075d","date":1378480344,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#_encodeTerm(DataOutput,FieldInfo,IntBlockTermState).mjava","sourceNew":null,"sourceOld":"  private void _encodeTerm(DataOutput out, FieldInfo fieldInfo, IntBlockTermState state) throws IOException {\n    if (state.singletonDocID == -1) {\n      out.writeVLong(state.docTermStartFP - lastState.docTermStartFP);\n      lastState.docTermStartFP = state.docTermStartFP;\n    } else {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      out.writeVLong(state.posTermStartFP - lastState.posTermStartFP);\n      lastState.posTermStartFP = state.posTermStartFP;\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && state.payTermStartFP != -1) {\n        out.writeVLong(state.payTermStartFP - lastState.payTermStartFP);\n        lastState.payTermStartFP = state.payTermStartFP;\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"563ccede63f326b5dfd37df2341608ce1a80075d":["871d0195bf88f0db53758cb00eb1f793103216c4"],"871d0195bf88f0db53758cb00eb1f793103216c4":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"563ccede63f326b5dfd37df2341608ce1a80075d":[],"871d0195bf88f0db53758cb00eb1f793103216c4":["563ccede63f326b5dfd37df2341608ce1a80075d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e3263230f04a1aa8d431d722fdfce583a9542c18"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["871d0195bf88f0db53758cb00eb1f793103216c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["563ccede63f326b5dfd37df2341608ce1a80075d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}