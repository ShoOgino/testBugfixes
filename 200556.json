{"path":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","commits":[{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(PayloadSpans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (Iterator iterator = payload.iterator(); iterator.hasNext();) {\n           byte[] thePayload = (byte[]) iterator.next();\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","sourceOld":"  private void checkSpans(PayloadSpans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (Iterator iterator = payload.iterator(); iterator.hasNext();) {\n           byte[] thePayload = (byte[]) iterator.next();\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (Iterator iterator = payload.iterator(); iterator.hasNext();) {\n           byte[] thePayload = (byte[]) iterator.next();\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}