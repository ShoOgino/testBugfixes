{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = node.getLeft().toString();\n      String value = node.getRight().toString();\n      buf.append('(').append(stripQuotes(field) + \":\" + stripSingleQuotes(value)).append(')');\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","sourceNew":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = node.getLeft().toString();\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(stripQuotes(field) + \":\" + value).append(')');\n      return null;\n    }\n\n","sourceOld":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = node.getLeft().toString();\n      String value = node.getRight().toString();\n      buf.append('(').append(stripQuotes(field) + \":\" + stripSingleQuotes(value)).append(')');\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","sourceNew":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = node.getLeft().toString();\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(stripQuotes(stripSingleQuotes(field)) + \":\" + value).append(')');\n      return null;\n    }\n\n","sourceOld":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = node.getLeft().toString();\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(stripQuotes(field) + \":\" + value).append(')');\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","sourceNew":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = getPredicateField(node.getLeft());\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(field + \":\" + value).append(')');\n      return null;\n    }\n\n","sourceOld":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = node.getLeft().toString();\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(stripQuotes(stripSingleQuotes(field)) + \":\" + value).append(')');\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","sourceNew":null,"sourceOld":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = getPredicateField(node.getLeft());\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(field + \":\" + value).append(')');\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77ace774184b7fdbf04c66d1e206b8ff368dfb6c","date":1475777393,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","sourceNew":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      if (!(node.getLeft() instanceof StringLiteral || node.getLeft() instanceof QualifiedNameReference)) {\n        throw new RuntimeException(\"Left side of comparison must be a literal.\");\n      }\n\n      String field = getPredicateField(node.getLeft());\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      String lowerBound;\n      String upperBound;\n      String lowerValue;\n      String upperValue;\n\n      ComparisonExpression.Type t = node.getType();\n      switch(t) {\n        case NOT_EQUAL:\n          buf.append('(').append('-').append(field).append(\":\").append(value).append(')');\n          return null;\n        case EQUAL:\n          buf.append('(').append(field).append(\":\").append(value).append(')');\n          return null;\n        case LESS_THAN:\n          lowerBound = \"[\";\n          upperBound = \"}\";\n          lowerValue = \"*\";\n          upperValue = value;\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n        case LESS_THAN_OR_EQUAL:\n          lowerBound = \"[\";\n          upperBound = \"]\";\n          lowerValue = \"*\";\n          upperValue = value;\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n        case GREATER_THAN:\n          lowerBound = \"{\";\n          upperBound = \"]\";\n          lowerValue = value;\n          upperValue = \"*\";\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n        case GREATER_THAN_OR_EQUAL:\n          lowerBound = \"[\";\n          upperBound = \"]\";\n          lowerValue = value;\n          upperValue = \"*\";\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n      }\n\n      return null;\n    }\n\n","sourceOld":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      String field = getPredicateField(node.getLeft());\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      buf.append('(').append(field + \":\" + value).append(')');\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.ExpressionVisitor#visitComparisonExpression(ComparisonExpression,StringBuilder).mjava","sourceNew":null,"sourceOld":"    protected Void visitComparisonExpression(ComparisonExpression node, StringBuilder buf) {\n      if (!(node.getLeft() instanceof StringLiteral || node.getLeft() instanceof QualifiedNameReference)) {\n        throw new RuntimeException(\"Left side of comparison must be a literal.\");\n      }\n\n      String field = getPredicateField(node.getLeft());\n      String value = node.getRight().toString();\n      value = stripSingleQuotes(value);\n\n      if(!value.startsWith(\"(\") && !value.startsWith(\"[\")) {\n        //If no parens default to a phrase search.\n        value = '\"'+value+'\"';\n      }\n\n      String lowerBound;\n      String upperBound;\n      String lowerValue;\n      String upperValue;\n\n      ComparisonExpression.Type t = node.getType();\n      switch(t) {\n        case NOT_EQUAL:\n          buf.append('(').append('-').append(field).append(\":\").append(value).append(')');\n          return null;\n        case EQUAL:\n          buf.append('(').append(field).append(\":\").append(value).append(')');\n          return null;\n        case LESS_THAN:\n          lowerBound = \"[\";\n          upperBound = \"}\";\n          lowerValue = \"*\";\n          upperValue = value;\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n        case LESS_THAN_OR_EQUAL:\n          lowerBound = \"[\";\n          upperBound = \"]\";\n          lowerValue = \"*\";\n          upperValue = value;\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n        case GREATER_THAN:\n          lowerBound = \"{\";\n          upperBound = \"]\";\n          lowerValue = value;\n          upperValue = \"*\";\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n        case GREATER_THAN_OR_EQUAL:\n          lowerBound = \"[\";\n          upperBound = \"]\";\n          lowerValue = value;\n          upperValue = \"*\";\n          buf.append('(').append(field).append(\":\").append(lowerBound).append(lowerValue).append(\" TO \").append(upperValue).append(upperBound).append(')');\n          return null;\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["77ace774184b7fdbf04c66d1e206b8ff368dfb6c","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["3ec71d4701edbd96cfea97384101d13611393552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"77ace774184b7fdbf04c66d1e206b8ff368dfb6c":["3ec71d4701edbd96cfea97384101d13611393552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"3ec71d4701edbd96cfea97384101d13611393552":["d984627825732e682759c22df7a3b171a80f3812","77ace774184b7fdbf04c66d1e206b8ff368dfb6c"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["36479872320bb00635cb97ca6757614c88562e1b"],"77ace774184b7fdbf04c66d1e206b8ff368dfb6c":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}