{"path":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"9e2656623e57ced6c16aae473bab02019c951802","date":1342126181,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      Reader scriptSrc = scriptFile.openReader(resourceLoader);\n\n      try {\n        engine.eval(scriptSrc);\n      } catch (ScriptException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                \"Unable to evaluate script: \" + \n                                scriptFile.getFileName(), e);\n      } finally {\n        IOUtils.closeQuietly(scriptSrc);\n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      Reader scriptSrc = scriptFile.openReader(resourceLoader);\n\n      try {\n        engine.eval(scriptSrc);\n      } catch (ScriptException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                \"Unable to evaluate script: \" + \n                                scriptFile.getFileName(), e);\n      } finally {\n        IOUtils.closeQuietly(scriptSrc);\n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e72e661a57246fd5412d682d707d9dbdf81e555","date":1343303474,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      Reader scriptSrc = scriptFile.openReader(resourceLoader);\n\n      try {\n        engine.eval(scriptSrc);\n      } catch (ScriptException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                \"Unable to evaluate script: \" + \n                                scriptFile.getFileName(), e);\n      } finally {\n        IOUtils.closeQuietly(scriptSrc);\n      }\n    }\n    return scriptEngines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      Reader scriptSrc = scriptFile.openReader(resourceLoader);\n\n      try {\n        engine.eval(scriptSrc);\n      } catch (ScriptException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                \"Unable to evaluate script: \" + \n                                scriptFile.getFileName(), e);\n      } finally {\n        IOUtils.closeQuietly(scriptSrc);\n      }\n    }\n    return scriptEngines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<EngineInfo>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2","date":1576668624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      final ScriptEngine engine;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          try {\n            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n              @Override\n              public Void run() throws ScriptException  {\n                engine.eval(scriptSrc);\n                return null;\n              }\n            }, SCRIPT_SANDBOX);\n          } catch (PrivilegedActionException e) {\n            throw (ScriptException) e.getException();\n          }\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21970a18a53245a65302f031a590db9d78d08b4c","date":1576678204,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#initEngines(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      final ScriptEngine engine;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          try {\n            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n              @Override\n              public Void run() throws ScriptException  {\n                engine.eval(scriptSrc);\n                return null;\n              }\n            }, SCRIPT_SANDBOX);\n          } catch (PrivilegedActionException e) {\n            throw (ScriptException) e.getException();\n          }\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","sourceOld":"  /**\n   * Initializes a list of script engines - an engine per script file.\n   *\n   * @param req The solr request.\n   * @param rsp The solr response\n   * @return The list of initialized script engines.\n   */\n  private List<EngineInfo> initEngines(SolrQueryRequest req, \n                                       SolrQueryResponse rsp) \n    throws SolrException {\n    \n    List<EngineInfo> scriptEngines = new ArrayList<>();\n\n    ScriptEngineManager scriptEngineManager \n      = new ScriptEngineManager(resourceLoader.getClassLoader());\n\n    scriptEngineManager.put(\"logger\", log);\n    scriptEngineManager.put(\"req\", req);\n    scriptEngineManager.put(\"rsp\", rsp);\n    if (params != null) {\n      scriptEngineManager.put(\"params\", params);\n    }\n\n    for (ScriptFile scriptFile : scriptFiles) {\n      ScriptEngine engine = null;\n      if (null != engineName) {\n        engine = scriptEngineManager.getEngineByName(engineName);\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, false);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by name: \"\n                                  + engineName + \n                                  (null != details ? \n                                   \" -- supported names: \" + details : \"\"));\n        }\n      } else {\n        engine = scriptEngineManager.getEngineByExtension\n          (scriptFile.getExtension());\n        if (engine == null) {\n          String details = getSupportedEngines(scriptEngineManager, true);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"No ScriptEngine found by file extension: \"\n                                  + scriptFile.getFileName() + \n                                  (null != details ? \n                                   \" -- supported extensions: \" + details : \"\"));\n                                  \n        }\n      }\n\n      if (! (engine instanceof Invocable)) {\n        String msg = \n          \"Engine \" + ((null != engineName) ? engineName : \n                       (\"for script \" + scriptFile.getFileName())) +\n          \" does not support function invocation (via Invocable): \" +\n          engine.getClass().toString() + \" (\" +\n          engine.getFactory().getEngineName() + \")\";\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n      if (scriptEngineCustomizer != null) {\n        scriptEngineCustomizer.customize(engine);\n      }\n\n      scriptEngines.add(new EngineInfo((Invocable)engine, scriptFile));\n      try {\n        Reader scriptSrc = scriptFile.openReader(resourceLoader);\n  \n        try {\n          engine.eval(scriptSrc);\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to evaluate script: \" + \n                                  scriptFile.getFileName(), e);\n        } finally {\n          IOUtils.closeQuietly(scriptSrc);\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Unable to evaluate script: \" + \n            scriptFile.getFileName(), ioe);        \n      }\n    }\n    return scriptEngines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6e72e661a57246fd5412d682d707d9dbdf81e555"],"9e2656623e57ced6c16aae473bab02019c951802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21970a18a53245a65302f031a590db9d78d08b4c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e72e661a57246fd5412d682d707d9dbdf81e555"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["9e2656623e57ced6c16aae473bab02019c951802"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","6e72e661a57246fd5412d682d707d9dbdf81e555"],"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["21970a18a53245a65302f031a590db9d78d08b4c","f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"9e2656623e57ced6c16aae473bab02019c951802":["6e72e661a57246fd5412d682d707d9dbdf81e555","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"21970a18a53245a65302f031a590db9d78d08b4c":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6e72e661a57246fd5412d682d707d9dbdf81e555":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e2656623e57ced6c16aae473bab02019c951802","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2":["21970a18a53245a65302f031a590db9d78d08b4c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21970a18a53245a65302f031a590db9d78d08b4c","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}