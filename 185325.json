{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n              \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8677448a186f4abd32218787f7ae73ad38f575cf","date":1477484362,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            if (log.isWarnEnabled()) {\n              log.warn(\"Request to \" + getUrl + \" failed due to: {}, sleeping for 5 seconds before re-trying the request ...\"\n                  , exc.getMessage());\n            }\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            if (log.isWarnEnabled()) {\n              log.warn(\"Request to {} failed due to: {}, sleeping for 5 seconds before re-trying the request ...\"\n                  , getUrl, exc.getMessage());\n            }\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            if (log.isWarnEnabled()) {\n              log.warn(\"Request to \" + getUrl + \" failed due to: {}, sleeping for 5 seconds before re-trying the request ...\"\n                  , exc.getMessage());\n            }\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to {} failed due to: {}, sleeping for 5 seconds before re-trying the request ...\"\n                , getUrl, exc.getMessage());\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            if (log.isWarnEnabled()) {\n              log.warn(\"Request to {} failed due to: {}, sleeping for 5 seconds before re-trying the request ...\"\n                  , getUrl, exc.getMessage());\n            }\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to {} failed, sleeping for 5 seconds before re-trying the request ...\", getUrl, exc);\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (exceptionIsAuthRelated(exc)) {\n          throw exc;\n        }\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to {} failed due to: {}, sleeping for 5 seconds before re-trying the request ...\"\n                , getUrl, exc.getMessage());\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n\n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n\n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c238f5fb83803b49b37b3a1a12224a64d47542":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["8677448a186f4abd32218787f7ae73ad38f575cf"],"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8677448a186f4abd32218787f7ae73ad38f575cf","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"8677448a186f4abd32218787f7ae73ad38f575cf":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4ca20be81c9284c840498143264e583ccbb8525a","8677448a186f4abd32218787f7ae73ad38f575cf"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"9df8125ba9193a2e2e285ed92157810b1952a244":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8677448a186f4abd32218787f7ae73ad38f575cf","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["8677448a186f4abd32218787f7ae73ad38f575cf","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["9df8125ba9193a2e2e285ed92157810b1952a244"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8677448a186f4abd32218787f7ae73ad38f575cf":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}