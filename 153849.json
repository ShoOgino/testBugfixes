{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,IndexReader[],Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,IndexReader[],Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,IndexReader[],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, IndexReader[] readers, Bits bits) throws IOException {\n    if (random.nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers[random.nextInt(readers.length)];\n    return indexReader.termDocsEnum(bits, field, term, random.nextBoolean());\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, IndexReader[] readers, Bits bits) throws IOException {\n    if (random.nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers[random.nextInt(readers.length)];\n    return indexReader.termDocsEnum(bits, field, term, random.nextBoolean());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,IndexReader[],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,IndexReader[],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, IndexReader[] readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers[random().nextInt(readers.length)];\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean());\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, IndexReader[] readers, Bits bits) throws IOException {\n    if (random.nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers[random.nextInt(readers.length)];\n    return indexReader.termDocsEnum(bits, field, term, random.nextBoolean());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,List[#-extends-AtomicReader],Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestReuseDocsEnum#randomDocsEnum(String,BytesRef,IndexReader[],Bits).mjava","sourceNew":"  public DocsEnum randomDocsEnum(String field, BytesRef term, List<? extends AtomicReader> readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers.get(random().nextInt(readers.size()));\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean());\n  }\n\n","sourceOld":"  public DocsEnum randomDocsEnum(String field, BytesRef term, IndexReader[] readers, Bits bits) throws IOException {\n    if (random().nextInt(10) == 0) {\n      return null;\n    }\n    AtomicReader indexReader = (AtomicReader) readers[random().nextInt(readers.length)];\n    return indexReader.termDocsEnum(bits, field, term, random().nextBoolean());\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}