{"path":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","commits":[{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","pathOld":"/dev/null","sourceNew":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"\\n\");\n    writer.write(\"<multicore adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    if (this.libDir != null) {\n      writer.write(\" libDir='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    \n    // for all cores...(synchronized on cores by caller)\n    for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n      persist(writer, entry.getValue());\n    }\n    writer.write(\"</multicore>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0323fcfcacbfb8242fbf70eb58498551b2018c67","date":1206721690,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","sourceNew":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"\\n\");\n    writer.write(\"<multicore adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    if (this.libDir != null) {\n      writer.write(\" libDir='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</multicore>\\n\");\n  }\n\n","sourceOld":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"\\n\");\n    writer.write(\"<multicore adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    if (this.libDir != null) {\n      writer.write(\" libDir='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    \n    // for all cores...(synchronized on cores by caller)\n    for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n      persist(writer, entry.getValue());\n    }\n    writer.write(\"</multicore>\\n\");\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c2a843c4b86e32cb6299bdd2f2a588a52886e79","date":1215015291,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","sourceNew":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"\\n\");\n    writer.write(\"<multicore adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</multicore>\\n\");\n  }\n\n","sourceOld":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"\\n\");\n    writer.write(\"<multicore adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    if (this.libDir != null) {\n      writer.write(\" libDir='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</multicore>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d262ab35a1389f4ad912bfa8b61a202c61cc475a","date":1218563685,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","sourceNew":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"\\n\");\n    writer.write(\"<multicore adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</multicore>\\n\");\n  }\n\n","bugFix":null,"bugIntro":["8fa04ebb8371b3585c0b085fe1f768dcb5becf03"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","sourceNew":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8c2a843c4b86e32cb6299bdd2f2a588a52886e79":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"d262ab35a1389f4ad912bfa8b61a202c61cc475a":["8c2a843c4b86e32cb6299bdd2f2a588a52886e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["6dc6ab6902f8f70ae43365947ccf44c25986906d"]},"commit2Childs":{"8c2a843c4b86e32cb6299bdd2f2a588a52886e79":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"d262ab35a1389f4ad912bfa8b61a202c61cc475a":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":[],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["8c2a843c4b86e32cb6299bdd2f2a588a52886e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}