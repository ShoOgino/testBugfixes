{"path":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","commits":[{"id":"8d0c1d69778439d99fc635727129e99480e64f06","date":1232050859,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    JavaBinCodec codec = new JavaBinCodec();\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    List<List<NamedList>> doclist = new ArrayList<List<NamedList>>();\n    if (updateRequest.getDocuments() != null) {\n      for (SolrInputDocument doc : updateRequest.getDocuments()) {\n        doclist.add(solrInputDocumentToList(doc));\n      }\n\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", doclist.iterator());\n    codec.marshal(nl, os);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed6d8c5d4a7a15ca41307188b42215913e14922b","date":1237454110,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    JavaBinCodec codec = new JavaBinCodec();\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    List<List<NamedList>> doclist = new ArrayList<List<NamedList>>();\n    if (updateRequest.getDocuments() != null) {\n      for (SolrInputDocument doc : updateRequest.getDocuments()) {\n        doclist.add(solrInputDocumentToList(doc));\n      }\n\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", doclist.iterator());\n    codec.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d0c1d69778439d99fc635727129e99480e64f06":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ed6d8c5d4a7a15ca41307188b42215913e14922b":["8d0c1d69778439d99fc635727129e99480e64f06"],"ad94625fb8d088209f46650c8097196fec67f00c":["ed6d8c5d4a7a15ca41307188b42215913e14922b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d0c1d69778439d99fc635727129e99480e64f06":["ed6d8c5d4a7a15ca41307188b42215913e14922b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8d0c1d69778439d99fc635727129e99480e64f06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ed6d8c5d4a7a15ca41307188b42215913e14922b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}