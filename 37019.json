{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}