{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}