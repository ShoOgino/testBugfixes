{"path":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer#addUpdate(Term,long,int).mjava","commits":[{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer#addUpdate(Term,long,int).mjava","pathOld":"/dev/null","sourceNew":"  void addUpdate(Term term, long value, int docUpTo) {\n    assert isNumeric;\n    final int ord = append(term);\n    String field = term.field;\n    add(field, docUpTo, ord, true);\n    if (numericValues[0] != value || numericValues.length != 1) {\n      if (numericValues.length <= ord) {\n        long[] array = ArrayUtil.grow(numericValues, ord+1);\n        if (numericValues.length == 1) {\n          Arrays.fill(array, 1, ord, numericValues[0]);\n        }\n        bytesUsed.addAndGet((array.length-numericValues.length) * Long.BYTES);\n        numericValues = array;\n      }\n      numericValues[ord] = value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9","date":1544461568,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer#addUpdate(Term,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer#addUpdate(Term,long,int).mjava","sourceNew":"  void addUpdate(Term term, long value, int docUpTo) {\n    assert isNumeric;\n    final int ord = append(term);\n    String field = term.field;\n    add(field, docUpTo, ord, true);\n    minNumeric = Math.min(minNumeric, value);\n    maxNumeric = Math.max(maxNumeric, value);\n    if (numericValues[0] != value || numericValues.length != 1) {\n      if (numericValues.length <= ord) {\n        long[] array = ArrayUtil.grow(numericValues, ord+1);\n        if (numericValues.length == 1) {\n          Arrays.fill(array, 1, ord, numericValues[0]);\n        }\n        bytesUsed.addAndGet((array.length-numericValues.length) * Long.BYTES);\n        numericValues = array;\n      }\n      numericValues[ord] = value;\n    }\n  }\n\n","sourceOld":"  void addUpdate(Term term, long value, int docUpTo) {\n    assert isNumeric;\n    final int ord = append(term);\n    String field = term.field;\n    add(field, docUpTo, ord, true);\n    if (numericValues[0] != value || numericValues.length != 1) {\n      if (numericValues.length <= ord) {\n        long[] array = ArrayUtil.grow(numericValues, ord+1);\n        if (numericValues.length == 1) {\n          Arrays.fill(array, 1, ord, numericValues[0]);\n        }\n        bytesUsed.addAndGet((array.length-numericValues.length) * Long.BYTES);\n        numericValues = array;\n      }\n      numericValues[ord] = value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28211671436f185419b3f7e53ccfc3911441ab65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9":["28211671436f185419b3f7e53ccfc3911441ab65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9"]},"commit2Childs":{"28211671436f185419b3f7e53ccfc3911441ab65":["6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9"],"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28211671436f185419b3f7e53ccfc3911441ab65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}