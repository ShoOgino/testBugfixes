{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","commits":[{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the given properties file, performing non-recursive Ant-like\n   * property value interpolation, and return the resulting Properties.\n   */\n  private Properties loadPropertiesFile(File file) {\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Properties file does not exist: \" + file.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, Charset.forName(\"ISO-8859-1\"));\n    final Properties properties = new Properties(); \n    try {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading properties file \" + file, e);\n    } finally {\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // do nothing\n      }\n    }\n    // Perform non-recursive Ant-like property value interpolation\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : properties.entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher((String)entry.getValue());\n      while (matcher.find()) {\n        String interpolatedValue = properties.getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      properties.setProperty((String)entry.getKey(), buffer.toString());\n    }\n    return properties;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","sourceNew":"  /**\n   * Parse the given properties file, performing non-recursive Ant-like\n   * property value interpolation, and return the resulting Properties.\n   */\n  private Properties loadPropertiesFile(File file) {\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Properties file does not exist: \" + file.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n    final Properties properties = new Properties(); \n    try {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading properties file \" + file, e);\n    } finally {\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // do nothing\n      }\n    }\n    // Perform non-recursive Ant-like property value interpolation\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : properties.entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher((String)entry.getValue());\n      while (matcher.find()) {\n        String interpolatedValue = properties.getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      properties.setProperty((String)entry.getKey(), buffer.toString());\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Parse the given properties file, performing non-recursive Ant-like\n   * property value interpolation, and return the resulting Properties.\n   */\n  private Properties loadPropertiesFile(File file) {\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Properties file does not exist: \" + file.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, Charset.forName(\"ISO-8859-1\"));\n    final Properties properties = new Properties(); \n    try {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading properties file \" + file, e);\n    } finally {\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // do nothing\n      }\n    }\n    // Perform non-recursive Ant-like property value interpolation\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : properties.entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher((String)entry.getValue());\n      while (matcher.find()) {\n        String interpolatedValue = properties.getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      properties.setProperty((String)entry.getKey(), buffer.toString());\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","sourceNew":"  /**\n   * Parse the given properties file, performing non-recursive Ant-like\n   * property value interpolation, and return the resulting Properties.\n   */\n  private Properties loadPropertiesFile(File file) {\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Properties file does not exist: \" + file.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n    final Properties properties = new Properties(); \n    try {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading properties file \" + file, e);\n    } finally {\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // do nothing\n      }\n    }\n    // Perform non-recursive Ant-like property value interpolation\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : properties.entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher((String)entry.getValue());\n      while (matcher.find()) {\n        String interpolatedValue = properties.getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      properties.setProperty((String)entry.getKey(), buffer.toString());\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Parse the given properties file, performing non-recursive Ant-like\n   * property value interpolation, and return the resulting Properties.\n   */\n  private Properties loadPropertiesFile(File file) {\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Properties file does not exist: \" + file.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, Charset.forName(\"ISO-8859-1\"));\n    final Properties properties = new Properties(); \n    try {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading properties file \" + file, e);\n    } finally {\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // do nothing\n      }\n    }\n    // Perform non-recursive Ant-like property value interpolation\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : properties.entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher((String)entry.getValue());\n      while (matcher.find()) {\n        String interpolatedValue = properties.getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      properties.setProperty((String)entry.getKey(), buffer.toString());\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#loadPropertiesFile(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parse the given properties file, performing non-recursive Ant-like\n   * property value interpolation, and return the resulting Properties.\n   */\n  private Properties loadPropertiesFile(File file) {\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(file);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Properties file does not exist: \" + file.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n    final Properties properties = new Properties(); \n    try {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading properties file \" + file, e);\n    } finally {\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // do nothing\n      }\n    }\n    // Perform non-recursive Ant-like property value interpolation\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : properties.entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher((String)entry.getValue());\n      while (matcher.find()) {\n        String interpolatedValue = properties.getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      properties.setProperty((String)entry.getKey(), buffer.toString());\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c","7d89d7e4e5101347833eea558851bf4209218619"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}