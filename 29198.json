{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsReader#Lucene41StoredFieldsReader(Directory,SegmentInfo,String,FieldInfos,IOContext,String,CompressionMode).mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsReader#Lucene41StoredFieldsReader(Directory,SegmentInfo,String,FieldInfos,IOContext,String,CompressionMode).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public Lucene41StoredFieldsReader(Directory d, SegmentInfo si, String segmentSuffix, FieldInfos fn,\n      IOContext context, String formatName, CompressionMode compressionMode) throws IOException {\n    this.compressionMode = compressionMode;\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    ChecksumIndexInput indexStream = null;\n    try {\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION);\n      final String fieldsStreamFN = IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION);\n      // Load the index into memory\n      indexStream = d.openChecksumInput(indexStreamFN, context);\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      version = CodecUtil.checkHeader(indexStream, codecNameIdx, VERSION_START, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n      indexReader = new Lucene41StoredFieldsIndexReader(indexStream, si);\n\n      long maxPointer = -1;\n      \n      if (version >= VERSION_CHECKSUM) {\n        maxPointer = indexStream.readVLong();\n        CodecUtil.checkFooter(indexStream);\n      } else {\n        CodecUtil.checkEOF(indexStream);\n      }\n      indexStream.close();\n      indexStream = null;\n\n      // Open the data file and read metadata\n      fieldsStream = d.openInput(fieldsStreamFN, context);\n      if (version >= VERSION_CHECKSUM) {\n        if (maxPointer + CodecUtil.footerLength() != fieldsStream.length()) {\n          throw new CorruptIndexException(\"Invalid fieldsStream maxPointer (file truncated?): maxPointer=\" + maxPointer + \", length=\" + fieldsStream.length(), fieldsStream);\n        }\n      } else {\n        maxPointer = fieldsStream.length();\n      }\n      this.maxPointer = maxPointer;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      final int fieldsVersion = CodecUtil.checkHeader(fieldsStream, codecNameDat, VERSION_START, VERSION_CURRENT);\n      if (version != fieldsVersion) {\n        throw new CorruptIndexException(\"Version mismatch between stored fields index and data: \" + version + \" != \" + fieldsVersion, fieldsStream);\n      }\n      assert CodecUtil.headerLength(codecNameDat) == fieldsStream.getFilePointer();\n\n      if (version >= VERSION_BIG_CHUNKS) {\n        chunkSize = fieldsStream.readVInt();\n      } else {\n        chunkSize = -1;\n      }\n      packedIntsVersion = fieldsStream.readVInt();\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(fieldsStream);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsReader#Lucene41StoredFieldsReader(Directory,SegmentInfo,String,FieldInfos,IOContext,String,CompressionMode).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public Lucene41StoredFieldsReader(Directory d, SegmentInfo si, String segmentSuffix, FieldInfos fn,\n      IOContext context, String formatName, CompressionMode compressionMode) throws IOException {\n    this.compressionMode = compressionMode;\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    ChecksumIndexInput indexStream = null;\n    try {\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION);\n      final String fieldsStreamFN = IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION);\n      // Load the index into memory\n      indexStream = d.openChecksumInput(indexStreamFN, context);\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      version = CodecUtil.checkHeader(indexStream, codecNameIdx, VERSION_START, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n      indexReader = new Lucene41StoredFieldsIndexReader(indexStream, si);\n\n      long maxPointer = -1;\n      \n      if (version >= VERSION_CHECKSUM) {\n        maxPointer = indexStream.readVLong();\n        CodecUtil.checkFooter(indexStream);\n      } else {\n        CodecUtil.checkEOF(indexStream);\n      }\n      indexStream.close();\n      indexStream = null;\n\n      // Open the data file and read metadata\n      fieldsStream = d.openInput(fieldsStreamFN, context);\n      if (version >= VERSION_CHECKSUM) {\n        if (maxPointer + CodecUtil.footerLength() != fieldsStream.length()) {\n          throw new CorruptIndexException(\"Invalid fieldsStream maxPointer (file truncated?): maxPointer=\" + maxPointer + \", length=\" + fieldsStream.length(), fieldsStream);\n        }\n      } else {\n        maxPointer = fieldsStream.length();\n      }\n      this.maxPointer = maxPointer;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      final int fieldsVersion = CodecUtil.checkHeader(fieldsStream, codecNameDat, VERSION_START, VERSION_CURRENT);\n      if (version != fieldsVersion) {\n        throw new CorruptIndexException(\"Version mismatch between stored fields index and data: \" + version + \" != \" + fieldsVersion, fieldsStream);\n      }\n      assert CodecUtil.headerLength(codecNameDat) == fieldsStream.getFilePointer();\n\n      if (version >= VERSION_BIG_CHUNKS) {\n        chunkSize = fieldsStream.readVInt();\n      } else {\n        chunkSize = -1;\n      }\n      packedIntsVersion = fieldsStream.readVInt();\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(fieldsStream);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsReader#Lucene41StoredFieldsReader(Directory,SegmentInfo,String,FieldInfos,IOContext,String,CompressionMode).mjava","sourceNew":null,"sourceOld":"  /** Sole constructor. */\n  public Lucene41StoredFieldsReader(Directory d, SegmentInfo si, String segmentSuffix, FieldInfos fn,\n      IOContext context, String formatName, CompressionMode compressionMode) throws IOException {\n    this.compressionMode = compressionMode;\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    ChecksumIndexInput indexStream = null;\n    try {\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION);\n      final String fieldsStreamFN = IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION);\n      // Load the index into memory\n      indexStream = d.openChecksumInput(indexStreamFN, context);\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      version = CodecUtil.checkHeader(indexStream, codecNameIdx, VERSION_START, VERSION_CURRENT);\n      assert CodecUtil.headerLength(codecNameIdx) == indexStream.getFilePointer();\n      indexReader = new Lucene41StoredFieldsIndexReader(indexStream, si);\n\n      long maxPointer = -1;\n      \n      if (version >= VERSION_CHECKSUM) {\n        maxPointer = indexStream.readVLong();\n        CodecUtil.checkFooter(indexStream);\n      } else {\n        CodecUtil.checkEOF(indexStream);\n      }\n      indexStream.close();\n      indexStream = null;\n\n      // Open the data file and read metadata\n      fieldsStream = d.openInput(fieldsStreamFN, context);\n      if (version >= VERSION_CHECKSUM) {\n        if (maxPointer + CodecUtil.footerLength() != fieldsStream.length()) {\n          throw new CorruptIndexException(\"Invalid fieldsStream maxPointer (file truncated?): maxPointer=\" + maxPointer + \", length=\" + fieldsStream.length(), fieldsStream);\n        }\n      } else {\n        maxPointer = fieldsStream.length();\n      }\n      this.maxPointer = maxPointer;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      final int fieldsVersion = CodecUtil.checkHeader(fieldsStream, codecNameDat, VERSION_START, VERSION_CURRENT);\n      if (version != fieldsVersion) {\n        throw new CorruptIndexException(\"Version mismatch between stored fields index and data: \" + version + \" != \" + fieldsVersion, fieldsStream);\n      }\n      assert CodecUtil.headerLength(codecNameDat) == fieldsStream.getFilePointer();\n\n      if (version >= VERSION_BIG_CHUNKS) {\n        chunkSize = fieldsStream.readVInt();\n      } else {\n        chunkSize = -1;\n      }\n      packedIntsVersion = fieldsStream.readVInt();\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n      \n      if (version >= VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(fieldsStream);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}