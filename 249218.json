{"path":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap#remove(K).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap#remove(K).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(K key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap#remove(K).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(K key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap#remove(K).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(K key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap#remove(K).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap#remove(K).mjava","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(K key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(K key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}