{"path":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","commits":[{"id":"70aa49bffe8257a0135ed4eea2633937e92e99a6","date":1032144718,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd07a421953319d10081b50e7083bd19680615be","date":1092482077,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","sourceNew":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the side effect of\n            // adjectival() or verb(), if adjectival() does nothing etc.:\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","sourceOld":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d75a2aec6b469da7d12a35bfaa36b73d23492a9","date":1092492885,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","sourceNew":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the flow that gets\n            // created by logical expression: apply adjectival(); if that fails,\n            // apply verb() etc\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","sourceOld":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the side effect of\n            // adjectival() or verb(), if adjectival() does nothing etc.:\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/ru/RussianStemmer#stem(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Finds the stem for given Russian word.\n     * Creation date: (16/03/2002 3:36:48 PM)\n     * @return java.lang.String\n     * @param input java.lang.String\n     */\n    public String stem(String input)\n    {\n        markPositions(input);\n        if (RV == 0)\n            return input; //RV wasn't detected, nothing to stem\n        StringBuffer stemmingZone = new StringBuffer(input.substring(RV));\n        // stemming goes on in RV\n        // Step 1\n\n        if (!perfectiveGerund(stemmingZone))\n        {\n            reflexive(stemmingZone);\n            // variable r is unused, we are just interested in the flow that gets\n            // created by logical expression: apply adjectival(); if that fails,\n            // apply verb() etc\n            boolean r =\n                adjectival(stemmingZone)\n                || verb(stemmingZone)\n                || noun(stemmingZone);\n        }\n        // Step 2\n        removeI(stemmingZone);\n        // Step 3\n        derivational(stemmingZone);\n        // Step 4\n        superlative(stemmingZone);\n        undoubleN(stemmingZone);\n        removeSoft(stemmingZone);\n        // return result\n        return input.substring(0, RV) + stemmingZone.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d75a2aec6b469da7d12a35bfaa36b73d23492a9":["dd07a421953319d10081b50e7083bd19680615be"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["8d75a2aec6b469da7d12a35bfaa36b73d23492a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd07a421953319d10081b50e7083bd19680615be":["70aa49bffe8257a0135ed4eea2633937e92e99a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"70aa49bffe8257a0135ed4eea2633937e92e99a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d75a2aec6b469da7d12a35bfaa36b73d23492a9":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70aa49bffe8257a0135ed4eea2633937e92e99a6"],"dd07a421953319d10081b50e7083bd19680615be":["8d75a2aec6b469da7d12a35bfaa36b73d23492a9"],"70aa49bffe8257a0135ed4eea2633937e92e99a6":["dd07a421953319d10081b50e7083bd19680615be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}