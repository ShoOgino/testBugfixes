{"path":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b50c1c2a0759631f795331625c5e27716a1f2db4","date":1496267048,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n\n    // The configset created via an API should be mutable.\n    props.put(\"immutable\", \"false\");\n\n    return props;\n  }\n\n","sourceOld":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n\n    // The configset created via an API should be mutable.\n    props.put(\"immutable\", \"false\");\n\n    return props;\n  }\n\n","sourceOld":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n\n    // The configset created via an API should be mutable.\n    props.put(\"immutable\", \"false\");\n\n    return props;\n  }\n\n","sourceOld":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n\n    // The configset created via an API should be mutable.\n    props.put(\"immutable\", \"false\");\n\n    return props;\n  }\n\n","sourceOld":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29778bfb04e9115636606cb8f74e23ecba15c7b","date":1536084166,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#copyPropertiesWithPrefix(SolrParams,Map[String,Object],String).mjava","sourceNew":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter = params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n\n    // The configset created via an API should be mutable.\n    props.put(\"immutable\", \"false\");\n\n    return props;\n  }\n\n","sourceOld":"  private static Map<String, Object> copyPropertiesWithPrefix(SolrParams params, Map<String, Object> props, String prefix) {\n    Iterator<String> iter =  params.getParameterNamesIterator();\n    while (iter.hasNext()) {\n      String param = iter.next();\n      if (param.startsWith(prefix)) {\n        props.put(param, params.get(param));\n      }\n    }\n\n    // The configset created via an API should be mutable.\n    props.put(\"immutable\", \"false\");\n\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b50c1c2a0759631f795331625c5e27716a1f2db4":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2209af2c265d2258ec4b29c8cc78622d36994a15","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["2209af2c265d2258ec4b29c8cc78622d36994a15","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["2209af2c265d2258ec4b29c8cc78622d36994a15","b50c1c2a0759631f795331625c5e27716a1f2db4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29778bfb04e9115636606cb8f74e23ecba15c7b"]},"commit2Childs":{"b50c1c2a0759631f795331625c5e27716a1f2db4":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2209af2c265d2258ec4b29c8cc78622d36994a15":["b50c1c2a0759631f795331625c5e27716a1f2db4","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}