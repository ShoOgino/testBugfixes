{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","commits":[{"id":"f241b963c5bcd6c2293a928059dd2d64988a6042","date":1340296137,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final MockDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    d.setPreventDoubleWrite(false);\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","c0a831b4dc2112ef015234f6f475c9e4adb9dd24"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final MockDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    d.setPreventDoubleWrite(false);\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final MockDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    d.setPreventDoubleWrite(false);\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"bugIntro":["c0a831b4dc2112ef015234f6f475c9e4adb9dd24","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final MockDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    d.setPreventDoubleWrite(false);\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final MockDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    d.setPreventDoubleWrite(false);\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0a831b4dc2112ef015234f6f475c9e4adb9dd24","date":1348057575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newFSDirectory(_TestUtil.getTempDir(\"RollbackAndCommitWithThreads\"));\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(1000);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":["d19974432be9aed28ee7dca73bdf01d139e763a9","f241b963c5bcd6c2293a928059dd2d64988a6042"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = _TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<IndexWriter>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f2c9b721a9892dc4b081b726eb5c8e382d402a6","date":1409387135,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6","date":1421884114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException | NullPointerException ace) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException | NullPointerException | AssertionError ace) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException ace) {\n                    // ok\n                  } catch (NullPointerException npe) {\n                    // ok\n                  } catch (AssertionError ae) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException | NullPointerException ace) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException | NullPointerException | AssertionError ace) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException | NullPointerException ace) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException | NullPointerException | AssertionError ace) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testRollbackAndCommitWithThreads().mjava","sourceNew":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException | NullPointerException ace) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException | NullPointerException | AssertionError ace) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-4147\n  public void testRollbackAndCommitWithThreads() throws Exception {\n    final BaseDirectoryWrapper d = newDirectory();\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setPreventDoubleWrite(false);\n    }\n\n    final int threadCount = TestUtil.nextInt(random(), 2, 6);\n\n    final AtomicReference<IndexWriter> writerRef = new AtomicReference<>();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    writerRef.set(new IndexWriter(d, newIndexWriterConfig(analyzer)));\n    // Make initial commit so the test doesn't trip \"corrupt first commit\" when virus checker refuses to delete partial segments_N file:\n    writerRef.get().commit();\n    final LineFileDocs docs = new LineFileDocs(random());\n    final Thread[] threads = new Thread[threadCount];\n    final int iters = atLeast(100);\n    final AtomicBoolean failed = new AtomicBoolean();\n    final Lock rollbackLock = new ReentrantLock();\n    final Lock commitLock = new ReentrantLock();\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID] = new Thread() {\n          @Override\n          public void run() {\n            for(int iter=0;iter<iters && !failed.get();iter++) {\n              //final int x = random().nextInt(5);\n              final int x = random().nextInt(3);\n              try {\n                switch(x) {\n                case 0:\n                  rollbackLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now rollback\");\n                  }\n                  try {\n                    writerRef.get().rollback();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": rollback done; now open new writer\");\n                    }\n                    writerRef.set(new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))));\n                  } finally {\n                    rollbackLock.unlock();\n                  }\n                  break;\n                case 1:\n                  commitLock.lock();\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now commit\");\n                  }\n                  try {\n                    if (random().nextBoolean()) {\n                      writerRef.get().prepareCommit();\n                    }\n                    writerRef.get().commit();\n                  } catch (AlreadyClosedException | NullPointerException ace) {\n                    // ok\n                  } finally {\n                    commitLock.unlock();\n                  }\n                  break;\n                case 2:\n                  if (VERBOSE) {\n                    System.out.println(\"\\nTEST: \" + Thread.currentThread().getName() + \": now add\");\n                  }\n                  try {\n                    writerRef.get().addDocument(docs.nextDoc());\n                  } catch (AlreadyClosedException | NullPointerException | AssertionError ace) {\n                    // ok\n                  }\n                  break;\n                }\n              } catch (Throwable t) {\n                failed.set(true);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[threadID].start();\n    }\n\n    for(int threadID=0;threadID<threadCount;threadID++) {\n      threads[threadID].join();\n    }\n\n    assertTrue(!failed.get());\n    writerRef.get().close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e1151ecb4798f5c31137aec032c241638018ed20"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["6613659748fe4411a7dcf85266e55db1f95f7315","e1151ecb4798f5c31137aec032c241638018ed20"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c0a831b4dc2112ef015234f6f475c9e4adb9dd24"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0a831b4dc2112ef015234f6f475c9e4adb9dd24":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"e1151ecb4798f5c31137aec032c241638018ed20":["6613659748fe4411a7dcf85266e55db1f95f7315"],"aba371508186796cc6151d8223a5b4e16d02e26e":["f241b963c5bcd6c2293a928059dd2d64988a6042","d19974432be9aed28ee7dca73bdf01d139e763a9"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["0f2c9b721a9892dc4b081b726eb5c8e382d402a6"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f241b963c5bcd6c2293a928059dd2d64988a6042"],"0f2c9b721a9892dc4b081b726eb5c8e382d402a6":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d19974432be9aed28ee7dca73bdf01d139e763a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c0a831b4dc2112ef015234f6f475c9e4adb9dd24":["6613659748fe4411a7dcf85266e55db1f95f7315"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e1151ecb4798f5c31137aec032c241638018ed20":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["c0a831b4dc2112ef015234f6f475c9e4adb9dd24","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f241b963c5bcd6c2293a928059dd2d64988a6042","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0f2c9b721a9892dc4b081b726eb5c8e382d402a6":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0f2c9b721a9892dc4b081b726eb5c8e382d402a6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}