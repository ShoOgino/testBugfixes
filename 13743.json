{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudInspectUtil#testCheckIfDiffIsLegal().mjava","commits":[{"id":"4339eef0c1b12030c8590187e652cd1cd0a1f3cb","date":1397833225,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudInspectUtil#testCheckIfDiffIsLegal().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCheckIfDiffIsLegal() throws Exception {\n    Set<String> addFails = null;\n    Set<String> deleteFails = null;\n    SolrDocumentList a = getDocList(\"2\", \"3\");\n    SolrDocumentList b = getDocList(\"1\");\n    boolean legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertFalse(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\");\n    addFails.add(\"4\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertTrue(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"5\");\n    addFails.add(\"4\");\n    deleteFails.add(\"5\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertTrue(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"5\");\n    addFails.add(\"4\");\n    deleteFails.add(\"6\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertFalse(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"4\");\n\n    try {\n      legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\",\n          addFails, deleteFails);\n      fail(\"Expected exception because lists have no diff\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudInspectUtil#testCheckIfDiffIsLegal().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudInspectUtil#testCheckIfDiffIsLegal().mjava","sourceNew":"  @Test\n  public void testCheckIfDiffIsLegal() throws Exception {\n    Set<String> addFails = null;\n    Set<String> deleteFails = null;\n    SolrDocumentList a = getDocList(\"2\", \"3\");\n    SolrDocumentList b = getDocList(\"1\");\n    boolean legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertFalse(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\");\n    addFails.add(\"4\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertTrue(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"5\");\n    addFails.add(\"4\");\n    deleteFails.add(\"5\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertTrue(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"5\");\n    addFails.add(\"4\");\n    deleteFails.add(\"6\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertFalse(legal);\n    \n    // ################################\n    \n    final HashSet<String> addFailsExpectEx = new HashSet<String>();\n    final HashSet<String> deleteFailsExpectEx = new HashSet<String>();\n    \n    final SolrDocumentList aExpectEx = getDocList(\"2\", \"3\", \"4\");\n    final SolrDocumentList bExpectEx = getDocList(\"2\", \"3\", \"4\");\n\n    expectThrows(IllegalArgumentException.class, \"Expected exception because lists have no diff\",\n        () -> CloudInspectUtil.checkIfDiffIsLegal(aExpectEx, bExpectEx,\n            \"control\", \"cloud\", addFailsExpectEx, deleteFailsExpectEx));\n  }\n\n","sourceOld":"  @Test\n  public void testCheckIfDiffIsLegal() throws Exception {\n    Set<String> addFails = null;\n    Set<String> deleteFails = null;\n    SolrDocumentList a = getDocList(\"2\", \"3\");\n    SolrDocumentList b = getDocList(\"1\");\n    boolean legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertFalse(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\");\n    addFails.add(\"4\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertTrue(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"5\");\n    addFails.add(\"4\");\n    deleteFails.add(\"5\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertTrue(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"5\");\n    addFails.add(\"4\");\n    deleteFails.add(\"6\");\n    \n    legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\", addFails,\n        deleteFails);\n    \n    assertFalse(legal);\n    \n    // ################################\n    \n    addFails = new HashSet<String>();\n    deleteFails = new HashSet<String>();\n    \n    a = getDocList(\"2\", \"3\", \"4\");\n    b = getDocList(\"2\", \"3\", \"4\");\n\n    try {\n      legal = CloudInspectUtil.checkIfDiffIsLegal(a, b, \"control\", \"cloud\",\n          addFails, deleteFails);\n      fail(\"Expected exception because lists have no diff\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92f789dbd1886e4b468e61b0def88b29a3f55228"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}