{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayIterator#doTests(CharArrayIterator).mjava","commits":[{"id":"3873cfa0d4054c121a5f727f84dba2cffd567167","date":1319381725,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayIterator#doTests(CharArrayIterator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTests(CharArrayIterator ci) {\n    // basics\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals(0, ci.getBeginIndex());\n    assertEquals(7, ci.getEndIndex());\n    assertEquals(0, ci.getIndex());\n    assertEquals('t', ci.current());\n    assertEquals('e', ci.next());\n    assertEquals('g', ci.last());\n    assertEquals('n', ci.previous());\n    assertEquals('t', ci.first());\n    assertEquals(CharacterIterator.DONE, ci.previous());\n    \n    // first()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    ci.next();\n    // Sets the position to getBeginIndex() and returns the character at that position. \n    assertEquals('t', ci.first());\n    assertEquals(ci.getBeginIndex(), ci.getIndex());\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.first());\n    \n    // last()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    // Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) \n    // and returns the character at that position. \n    assertEquals('g', ci.last());\n    assertEquals(ci.getIndex(), ci.getEndIndex() - 1);\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.last());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // current()\n    // Gets the character at the current position (as returned by getIndex()). \n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals('t', ci.current());\n    ci.last();\n    ci.next();\n    // or DONE if the current position is off the end of the text.\n    assertEquals(CharacterIterator.DONE, ci.current());\n    \n    // next()\n    ci.setText(\"te\".toCharArray(), 0, 2);\n    // Increments the iterator's index by one and returns the character at the new index.\n    assertEquals('e', ci.next());\n    assertEquals(1, ci.getIndex());\n    // or DONE if the new position is off the end of the text range.\n    assertEquals(CharacterIterator.DONE, ci.next());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // setIndex()\n    ci.setText(\"test\".toCharArray(), 0, \"test\".length());\n    try {\n      ci.setIndex(5);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e instanceof IllegalArgumentException);\n    }\n    \n    // clone()\n    char text[] = \"testing\".toCharArray();\n    ci.setText(text, 0, text.length);\n    ci.next();\n    CharArrayIterator ci2 = (CharArrayIterator) ci.clone();\n    assertEquals(ci.getIndex(), ci2.getIndex());\n    assertEquals(ci.next(), ci2.next());\n    assertEquals(ci.last(), ci2.last());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayIterator#doTests(CharArrayIterator).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayIterator#doTests(CharArrayIterator).mjava","sourceNew":"  private void doTests(CharArrayIterator ci) {\n    // basics\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals(0, ci.getBeginIndex());\n    assertEquals(7, ci.getEndIndex());\n    assertEquals(0, ci.getIndex());\n    assertEquals('t', ci.current());\n    assertEquals('e', ci.next());\n    assertEquals('g', ci.last());\n    assertEquals('n', ci.previous());\n    assertEquals('t', ci.first());\n    assertEquals(CharacterIterator.DONE, ci.previous());\n    \n    // first()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    ci.next();\n    // Sets the position to getBeginIndex() and returns the character at that position. \n    assertEquals('t', ci.first());\n    assertEquals(ci.getBeginIndex(), ci.getIndex());\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.first());\n    \n    // last()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    // Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) \n    // and returns the character at that position. \n    assertEquals('g', ci.last());\n    assertEquals(ci.getIndex(), ci.getEndIndex() - 1);\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.last());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // current()\n    // Gets the character at the current position (as returned by getIndex()). \n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals('t', ci.current());\n    ci.last();\n    ci.next();\n    // or DONE if the current position is off the end of the text.\n    assertEquals(CharacterIterator.DONE, ci.current());\n    \n    // next()\n    ci.setText(\"te\".toCharArray(), 0, 2);\n    // Increments the iterator's index by one and returns the character at the new index.\n    assertEquals('e', ci.next());\n    assertEquals(1, ci.getIndex());\n    // or DONE if the new position is off the end of the text range.\n    assertEquals(CharacterIterator.DONE, ci.next());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // setIndex()\n    ci.setText(\"test\".toCharArray(), 0, \"test\".length());\n    try {\n      ci.setIndex(5);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e instanceof IllegalArgumentException);\n    }\n    \n    // clone()\n    char text[] = \"testing\".toCharArray();\n    ci.setText(text, 0, text.length);\n    ci.next();\n    CharArrayIterator ci2 = ci.clone();\n    assertEquals(ci.getIndex(), ci2.getIndex());\n    assertEquals(ci.next(), ci2.next());\n    assertEquals(ci.last(), ci2.last());\n  }\n\n","sourceOld":"  private void doTests(CharArrayIterator ci) {\n    // basics\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals(0, ci.getBeginIndex());\n    assertEquals(7, ci.getEndIndex());\n    assertEquals(0, ci.getIndex());\n    assertEquals('t', ci.current());\n    assertEquals('e', ci.next());\n    assertEquals('g', ci.last());\n    assertEquals('n', ci.previous());\n    assertEquals('t', ci.first());\n    assertEquals(CharacterIterator.DONE, ci.previous());\n    \n    // first()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    ci.next();\n    // Sets the position to getBeginIndex() and returns the character at that position. \n    assertEquals('t', ci.first());\n    assertEquals(ci.getBeginIndex(), ci.getIndex());\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.first());\n    \n    // last()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    // Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) \n    // and returns the character at that position. \n    assertEquals('g', ci.last());\n    assertEquals(ci.getIndex(), ci.getEndIndex() - 1);\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.last());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // current()\n    // Gets the character at the current position (as returned by getIndex()). \n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals('t', ci.current());\n    ci.last();\n    ci.next();\n    // or DONE if the current position is off the end of the text.\n    assertEquals(CharacterIterator.DONE, ci.current());\n    \n    // next()\n    ci.setText(\"te\".toCharArray(), 0, 2);\n    // Increments the iterator's index by one and returns the character at the new index.\n    assertEquals('e', ci.next());\n    assertEquals(1, ci.getIndex());\n    // or DONE if the new position is off the end of the text range.\n    assertEquals(CharacterIterator.DONE, ci.next());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // setIndex()\n    ci.setText(\"test\".toCharArray(), 0, \"test\".length());\n    try {\n      ci.setIndex(5);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e instanceof IllegalArgumentException);\n    }\n    \n    // clone()\n    char text[] = \"testing\".toCharArray();\n    ci.setText(text, 0, text.length);\n    ci.next();\n    CharArrayIterator ci2 = (CharArrayIterator) ci.clone();\n    assertEquals(ci.getIndex(), ci2.getIndex());\n    assertEquals(ci.next(), ci2.next());\n    assertEquals(ci.last(), ci2.last());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayIterator#doTests(CharArrayIterator).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayIterator#doTests(CharArrayIterator).mjava","sourceNew":"  private void doTests(CharArrayIterator ci) {\n    // basics\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals(0, ci.getBeginIndex());\n    assertEquals(7, ci.getEndIndex());\n    assertEquals(0, ci.getIndex());\n    assertEquals('t', ci.current());\n    assertEquals('e', ci.next());\n    assertEquals('g', ci.last());\n    assertEquals('n', ci.previous());\n    assertEquals('t', ci.first());\n    assertEquals(CharacterIterator.DONE, ci.previous());\n    \n    // first()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    ci.next();\n    // Sets the position to getBeginIndex() and returns the character at that position. \n    assertEquals('t', ci.first());\n    assertEquals(ci.getBeginIndex(), ci.getIndex());\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.first());\n    \n    // last()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    // Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) \n    // and returns the character at that position. \n    assertEquals('g', ci.last());\n    assertEquals(ci.getIndex(), ci.getEndIndex() - 1);\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.last());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // current()\n    // Gets the character at the current position (as returned by getIndex()). \n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals('t', ci.current());\n    ci.last();\n    ci.next();\n    // or DONE if the current position is off the end of the text.\n    assertEquals(CharacterIterator.DONE, ci.current());\n    \n    // next()\n    ci.setText(\"te\".toCharArray(), 0, 2);\n    // Increments the iterator's index by one and returns the character at the new index.\n    assertEquals('e', ci.next());\n    assertEquals(1, ci.getIndex());\n    // or DONE if the new position is off the end of the text range.\n    assertEquals(CharacterIterator.DONE, ci.next());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // setIndex()\n    ci.setText(\"test\".toCharArray(), 0, \"test\".length());\n    try {\n      ci.setIndex(5);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e instanceof IllegalArgumentException);\n    }\n    \n    // clone()\n    char text[] = \"testing\".toCharArray();\n    ci.setText(text, 0, text.length);\n    ci.next();\n    CharArrayIterator ci2 = ci.clone();\n    assertEquals(ci.getIndex(), ci2.getIndex());\n    assertEquals(ci.next(), ci2.next());\n    assertEquals(ci.last(), ci2.last());\n  }\n\n","sourceOld":"  private void doTests(CharArrayIterator ci) {\n    // basics\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals(0, ci.getBeginIndex());\n    assertEquals(7, ci.getEndIndex());\n    assertEquals(0, ci.getIndex());\n    assertEquals('t', ci.current());\n    assertEquals('e', ci.next());\n    assertEquals('g', ci.last());\n    assertEquals('n', ci.previous());\n    assertEquals('t', ci.first());\n    assertEquals(CharacterIterator.DONE, ci.previous());\n    \n    // first()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    ci.next();\n    // Sets the position to getBeginIndex() and returns the character at that position. \n    assertEquals('t', ci.first());\n    assertEquals(ci.getBeginIndex(), ci.getIndex());\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.first());\n    \n    // last()\n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    // Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) \n    // and returns the character at that position. \n    assertEquals('g', ci.last());\n    assertEquals(ci.getIndex(), ci.getEndIndex() - 1);\n    // or DONE if the text is empty\n    ci.setText(new char[] {}, 0, 0);\n    assertEquals(CharacterIterator.DONE, ci.last());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // current()\n    // Gets the character at the current position (as returned by getIndex()). \n    ci.setText(\"testing\".toCharArray(), 0, \"testing\".length());\n    assertEquals('t', ci.current());\n    ci.last();\n    ci.next();\n    // or DONE if the current position is off the end of the text.\n    assertEquals(CharacterIterator.DONE, ci.current());\n    \n    // next()\n    ci.setText(\"te\".toCharArray(), 0, 2);\n    // Increments the iterator's index by one and returns the character at the new index.\n    assertEquals('e', ci.next());\n    assertEquals(1, ci.getIndex());\n    // or DONE if the new position is off the end of the text range.\n    assertEquals(CharacterIterator.DONE, ci.next());\n    assertEquals(ci.getEndIndex(), ci.getIndex());\n    \n    // setIndex()\n    ci.setText(\"test\".toCharArray(), 0, \"test\".length());\n    try {\n      ci.setIndex(5);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e instanceof IllegalArgumentException);\n    }\n    \n    // clone()\n    char text[] = \"testing\".toCharArray();\n    ci.setText(text, 0, text.length);\n    ci.next();\n    CharArrayIterator ci2 = ci.clone();\n    assertEquals(ci.getIndex(), ci2.getIndex());\n    assertEquals(ci.next(), ci2.next());\n    assertEquals(ci.last(), ci2.last());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3873cfa0d4054c121a5f727f84dba2cffd567167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3873cfa0d4054c121a5f727f84dba2cffd567167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"3873cfa0d4054c121a5f727f84dba2cffd567167":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3873cfa0d4054c121a5f727f84dba2cffd567167"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}