{"path":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException, ClassNotFoundException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException, ClassNotFoundException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException, ClassNotFoundException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","bugFix":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException, ClassNotFoundException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":4,"author":"Michael Sokolov","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/DictionaryBuilder#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws IOException {\n    DictionaryFormat format;\n    if (args[0].equalsIgnoreCase(\"ipadic\")) {\n      format = DictionaryFormat.IPADIC;\n    } else if (args[0].equalsIgnoreCase(\"unidic\")) {\n      format = DictionaryFormat.UNIDIC;\n    } else {\n      System.err.println(\"Illegal format \" + args[0] + \" using unidic instead\");\n      format = DictionaryFormat.IPADIC;\n    }\n    \n    String inputDirname = args[1];\n    String outputDirname = args[2];\n    String inputEncoding = args[3];\n    boolean normalizeEntries = Boolean.parseBoolean(args[4]);\n    \n    System.out.println(\"dictionary builder\");\n    System.out.println(\"\");\n    System.out.println(\"dictionary format: \" + format);\n    System.out.println(\"input directory: \" + inputDirname);\n    System.out.println(\"output directory: \" + outputDirname);\n    System.out.println(\"input encoding: \" + inputEncoding);\n    System.out.println(\"normalize entries: \" + normalizeEntries);\n    System.out.println(\"\");\n    DictionaryBuilder.build(format, inputDirname, outputDirname, inputEncoding, normalizeEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05feb7eb5e91cb64742ce32b2ca3f02433530446"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["05feb7eb5e91cb64742ce32b2ca3f02433530446","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}