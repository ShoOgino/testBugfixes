{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","commits":[{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","sourceNew":null,"sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternSplitTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 200 * RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new SimplePatternSplitTokenizer(\"a\");\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","bugFix":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"57c6c784f777a2cc8fa014507ea129526822714d":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["57c6c784f777a2cc8fa014507ea129526822714d"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"57c6c784f777a2cc8fa014507ea129526822714d":["71da933d30aea361ccc224d6544c451cbf49916d"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["57c6c784f777a2cc8fa014507ea129526822714d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["022a4de90e0479b604264ca9c2e134c996454ab3","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}