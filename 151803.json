{"path":"src/test/org/apache/solr/analysis/TestSynonymMap#testRead1waySynonymRules().mjava","commits":[{"id":"ed0158ac307bee4b81f4c26ebe88cddc950f46db","date":1211204318,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymMap#testRead1waySynonymRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testRead1waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a]\n    // (b)->[a]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n\n    // (a)->[a]\n    // (b)->[a]\n    // (c)->[a]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n\n    // (a)->[a]\n    // (b1)->(b2)->[a]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n\n    // (a1)->(a2)->[a1][a2]\n    // (b)->[a1][a2]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testRead1waySynonymRules().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymMap#testRead1waySynonymRules().mjava","sourceNew":"  public void testRead1waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a]\n    // (b)->[a]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n\n    // (a)->[a]\n    // (b)->[a]\n    // (c)->[a]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n\n    // (a)->[a]\n    // (b1)->(b2)->[a]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n\n    // (a1)->(a2)->[a1][a2]\n    // (b)->[a1][a2]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n  }\n\n","sourceOld":"  public void testRead1waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a]\n    // (b)->[a]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n\n    // (a)->[a]\n    // (b)->[a]\n    // (c)->[a]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n\n    // (a)->[a]\n    // (b1)->(b2)->[a]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n\n    // (a1)->(a2)->[a1][a2]\n    // (b)->[a1][a2]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", false, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed0158ac307bee4b81f4c26ebe88cddc950f46db":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ed0158ac307bee4b81f4c26ebe88cddc950f46db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ed0158ac307bee4b81f4c26ebe88cddc950f46db":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ed0158ac307bee4b81f4c26ebe88cddc950f46db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}