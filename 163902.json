{"path":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","commits":[{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LogLevelHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    JulInfo wrap = new JulInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:FINEST\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='FINEST']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger log = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    LogLevelHandler.LoggerWrapperJUL wrap = new LogLevelHandler.LoggerWrapperJUL(log.getName(), log);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/loglevel\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/loglevel\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:FINEST\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='FINEST']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    tst.setLevel(Level.INFO);\n    Log4jInfo wrap = new Log4jInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='TRACE']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    JulInfo wrap = new JulInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:FINEST\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='FINEST']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    JulInfo wrap = new JulInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:FINEST\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='FINEST']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    tst.setLevel(Level.INFO);\n    Log4jInfo wrap = new Log4jInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='TRACE']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    tst.setLevel(Level.INFO);\n    Log4jInfo wrap = new Log4jInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='TRACE']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    JulInfo wrap = new JulInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:FINEST\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='FINEST']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    tst.setLevel(Level.INFO);\n    Log4jInfo wrap = new Log4jInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='TRACE']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    JulInfo wrap = new JulInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:FINEST\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='FINEST']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    tst.setLevel(Level.INFO);\n    Log4jInfo wrap = new Log4jInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='TRACE']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = Logger.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n    tst.setLevel(Level.INFO);\n    Log4jInfo wrap = new Log4jInfo(tst.getName(), tst);\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+wrap.getName()+\"']/../str[@name='level'][.='\"+wrap.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set and remove a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", \"org.xxx.yyy.abc:null\",\n                \"set\", \"org.xxx.yyy.zzz:TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='org.xxx.yyy.zzz']/../str[@name='level'][.='TRACE']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2826fc89a124b32af3f40de392ea39dbb9650298","date":1576523583,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n\n    // HACK: work around for SOLR-14099...\n    Logger apache = LogManager.getLogger(\"org.apache\");\n    final String apache_level = null == apache.getLevel()\n      ? \"null[@name='level']\"\n      : \"str[@name='level'][.='\"+apache.getLevel()+\"']\";\n\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../\" + apache_level\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n\n    // HACK: work around for SOLR-14099...\n    Logger apache = LogManager.getLogger(\"org.apache\");\n    final String apache_level = null == apache.getLevel()\n      ? \"null[@name='level']\"\n      : \"str[@name='level'][.='\"+apache.getLevel()+\"']\";\n\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../\" + apache_level\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86ca4dae7c5e12c39255e15568e91dd428619428","date":1576619925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    \n    // sanity check our setup...\n    assertNotNull(this.getClass().getAnnotation(LogLevel.class));\n    final String annotationConfig = this.getClass().getAnnotation(LogLevel.class).value();\n    assertTrue(\"WTF: \" + annotationConfig, annotationConfig.startsWith( PARENT_LOGGER_NAME ));\n    assertTrue(\"WTF: \" + annotationConfig, annotationConfig.startsWith( CLASS_LOGGER_NAME ));\n    assertTrue(\"WTF: \" + annotationConfig, annotationConfig.endsWith( Level.DEBUG.toString() ));\n    \n    assertEquals(Level.DEBUG, LogManager.getLogger( CLASS_LOGGER_NAME ).getLevel());\n    \n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    assertEquals(\"Unexpected config for \" + PARENT_LOGGER_NAME + \" ... expected 'root' config\",\n                 config.getRootLogger(),\n                 config.getLoggerConfig(PARENT_LOGGER_NAME));\n    assertEquals(Level.DEBUG, config.getLoggerConfig(CLASS_LOGGER_NAME).getLevel());\n\n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+CLASS_LOGGER_NAME+\"']/../str[@name='level'][.='DEBUG']\"\n            ,\"//arr[@name='loggers']/lst/str[.='\"+PARENT_LOGGER_NAME+\"']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set a (new) level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", PARENT_LOGGER_NAME+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+PARENT_LOGGER_NAME+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    assertEquals(Level.TRACE, config.getLoggerConfig(PARENT_LOGGER_NAME).getLevel());\n    assertEquals(Level.DEBUG, config.getLoggerConfig(CLASS_LOGGER_NAME).getLevel());\n    \n    // NOTE: LoggeringHandler doesn't actually \"remove\" the LoggerConfig, ...\n    // evidently so people using they UI can see that it was explicitly turned \"OFF\" ?\n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", PARENT_LOGGER_NAME+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+PARENT_LOGGER_NAME+\"']/../str[@name='level'][.='OFF']\"\n        );\n    assertEquals(Level.OFF, config.getLoggerConfig(PARENT_LOGGER_NAME).getLevel());\n    assertEquals(Level.DEBUG, config.getLoggerConfig(CLASS_LOGGER_NAME).getLevel());\n\n    \n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n\n    // HACK: work around for SOLR-14099...\n    Logger apache = LogManager.getLogger(\"org.apache\");\n    final String apache_level = null == apache.getLevel()\n      ? \"null[@name='level']\"\n      : \"str[@name='level'][.='\"+apache.getLevel()+\"']\";\n\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../\" + apache_level\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LoggingHandlerTest#testLogLevelHandlerOutput().mjava","sourceNew":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    \n    // sanity check our setup...\n    assertNotNull(this.getClass().getAnnotation(LogLevel.class));\n    final String annotationConfig = this.getClass().getAnnotation(LogLevel.class).value();\n    assertTrue(\"WTF: \" + annotationConfig, annotationConfig.startsWith( PARENT_LOGGER_NAME ));\n    assertTrue(\"WTF: \" + annotationConfig, annotationConfig.startsWith( CLASS_LOGGER_NAME ));\n    assertTrue(\"WTF: \" + annotationConfig, annotationConfig.endsWith( Level.DEBUG.toString() ));\n    \n    assertEquals(Level.DEBUG, LogManager.getLogger( CLASS_LOGGER_NAME ).getLevel());\n    \n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    assertEquals(\"Unexpected config for \" + PARENT_LOGGER_NAME + \" ... expected 'root' config\",\n                 config.getRootLogger(),\n                 config.getLoggerConfig(PARENT_LOGGER_NAME));\n    assertEquals(Level.DEBUG, config.getLoggerConfig(CLASS_LOGGER_NAME).getLevel());\n\n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+CLASS_LOGGER_NAME+\"']/../str[@name='level'][.='DEBUG']\"\n            ,\"//arr[@name='loggers']/lst/str[.='\"+PARENT_LOGGER_NAME+\"']/../null[@name='level']\"\n            );\n\n    assertQ(\"Set a (new) level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", PARENT_LOGGER_NAME+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+PARENT_LOGGER_NAME+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    assertEquals(Level.TRACE, config.getLoggerConfig(PARENT_LOGGER_NAME).getLevel());\n    assertEquals(Level.DEBUG, config.getLoggerConfig(CLASS_LOGGER_NAME).getLevel());\n    \n    // NOTE: LoggeringHandler doesn't actually \"remove\" the LoggerConfig, ...\n    // evidently so people using they UI can see that it was explicitly turned \"OFF\" ?\n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", PARENT_LOGGER_NAME+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+PARENT_LOGGER_NAME+\"']/../str[@name='level'][.='OFF']\"\n        );\n    assertEquals(Level.OFF, config.getLoggerConfig(PARENT_LOGGER_NAME).getLevel());\n    assertEquals(Level.DEBUG, config.getLoggerConfig(CLASS_LOGGER_NAME).getLevel());\n\n    \n  }\n\n","sourceOld":"  @Test\n  public void testLogLevelHandlerOutput() throws Exception {\n    Logger tst = LogManager.getLogger(\"org.apache.solr.SolrTestCaseJ4\");\n \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig loggerConfig = ctx.getConfiguration().getLoggerConfig(tst.getName());\n    loggerConfig.setLevel(Level.INFO);\n    ctx.updateLoggers();\n\n    // HACK: work around for SOLR-14099...\n    Logger apache = LogManager.getLogger(\"org.apache\");\n    final String apache_level = null == apache.getLevel()\n      ? \"null[@name='level']\"\n      : \"str[@name='level'][.='\"+apache.getLevel()+\"']\";\n\n    \n    assertQ(\"Show Log Levels OK\",\n            req(CommonParams.QT,\"/admin/logging\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='\"+tst.getLevel()+\"']\"\n            ,\"//arr[@name='loggers']/lst/str[.='org.apache']/../\" + apache_level\n            );\n\n    assertQ(\"Set a level\",\n            req(CommonParams.QT,\"/admin/logging\",  \n                \"set\", tst.getName()+\":TRACE\")\n            ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='TRACE']\"\n            );\n    \n    assertQ(\"Remove a level\",\n        req(CommonParams.QT,\"/admin/logging\",  \n            \"set\", tst.getName()+\":null\")\n        ,\"//arr[@name='loggers']/lst/str[.='\"+tst.getName()+\"']/../str[@name='level'][.='OFF']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"86ca4dae7c5e12c39255e15568e91dd428619428":["2826fc89a124b32af3f40de392ea39dbb9650298"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["829761a123d59d7a3c39e5f13fbc03de63f55ce5","7116474e2e390259937401cf928323e0cbc75e60"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d264f386d864b5751209060e8886ca9845f70469":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"b945b8f5bba0303382bc69d60c0c287714f23328":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","2826fc89a124b32af3f40de392ea39dbb9650298"],"246314af59d76a47fccc31e9494eefee01ec9c00":["b945b8f5bba0303382bc69d60c0c287714f23328","86ca4dae7c5e12c39255e15568e91dd428619428"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["7116474e2e390259937401cf928323e0cbc75e60"],"2826fc89a124b32af3f40de392ea39dbb9650298":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86ca4dae7c5e12c39255e15568e91dd428619428"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["7116474e2e390259937401cf928323e0cbc75e60","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"86ca4dae7c5e12c39255e15568e91dd428619428":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"b945b8f5bba0303382bc69d60c0c287714f23328":["246314af59d76a47fccc31e9494eefee01ec9c00"],"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"2826fc89a124b32af3f40de392ea39dbb9650298":["86ca4dae7c5e12c39255e15568e91dd428619428","b945b8f5bba0303382bc69d60c0c287714f23328"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["b945b8f5bba0303382bc69d60c0c287714f23328","2826fc89a124b32af3f40de392ea39dbb9650298"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}