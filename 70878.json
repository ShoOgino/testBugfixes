{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","commits":[{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, new BytesRef(term.text));\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    TermDocs termDocs = reader.termDocs(term);\n    int count = 0;\n    while (termDocs.next())\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, term.bytes);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, new BytesRef(term.text));\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, term.bytes);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, new BytesRef(term.text));\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, term.bytes);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader, null, term.field, term.bytes);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir, true);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491","5f4e87790277826a2aea119328600dfb07761f32"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}