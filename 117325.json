{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#runUpdate(List[SolrInputDocument]).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#runUpdate(List[SolrInputDocument]).mjava","pathOld":"/dev/null","sourceNew":"  protected UpdateResponse runUpdate(List<SolrInputDocument> batchToWrite) {\n    try {\n      UpdateResponse result = solr.add(batchToWrite);\n      SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.BATCHES_WRITTEN.toString(), 1);      \n      SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.DOCUMENTS_WRITTEN.toString(), batchToWrite.size());\n      if (LOG.isDebugEnabled()) {\n        SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.BATCH_WRITE_TIME.toString(), result.getElapsedTime());\n      }\n      return result;\n    } catch (Throwable e) {\n      if (e instanceof Exception) {\n        setBatchWriteException((Exception) e);\n      } else {\n        setBatchWriteException(new Exception(e));\n      }\n      SolrRecordWriter.incrementCounter(taskId, getClass().getName() + \".errors\", e.getClass().getName(), 1);\n      LOG.error(\"Unable to process batch\", e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#runUpdate(List[SolrInputDocument]).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#runUpdate(List[SolrInputDocument]).mjava","sourceNew":"  protected UpdateResponse runUpdate(List<SolrInputDocument> batchToWrite) {\n    try {\n      UpdateResponse result = solr.add(batchToWrite);\n      SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.BATCHES_WRITTEN.toString(), 1);      \n      SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.DOCUMENTS_WRITTEN.toString(), batchToWrite.size());\n      if (LOG.isDebugEnabled()) {\n        SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.BATCH_WRITE_TIME.toString(), result.getElapsedTime());\n      }\n      return result;\n    } catch (Throwable e) {\n      if (e instanceof Exception) {\n        setBatchWriteException((Exception) e);\n      } else {\n        setBatchWriteException(new Exception(e));\n      }\n      SolrRecordWriter.incrementCounter(taskId, getClass().getName() + \".errors\", e.getClass().getName(), 1);\n      LOG.error(\"Unable to process batch\", e);\n      return null;\n    }\n  }\n\n","sourceOld":"  protected UpdateResponse runUpdate(List<SolrInputDocument> batchToWrite) {\n    try {\n      UpdateResponse result = solr.add(batchToWrite);\n      SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.BATCHES_WRITTEN.toString(), 1);      \n      SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.DOCUMENTS_WRITTEN.toString(), batchToWrite.size());\n      if (LOG.isDebugEnabled()) {\n        SolrRecordWriter.incrementCounter(taskId, SolrCounters.class.getName(), SolrCounters.BATCH_WRITE_TIME.toString(), result.getElapsedTime());\n      }\n      return result;\n    } catch (Throwable e) {\n      if (e instanceof Exception) {\n        setBatchWriteException((Exception) e);\n      } else {\n        setBatchWriteException(new Exception(e));\n      }\n      SolrRecordWriter.incrementCounter(taskId, getClass().getName() + \".errors\", e.getClass().getName(), 1);\n      LOG.error(\"Unable to process batch\", e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}