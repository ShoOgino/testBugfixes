{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b8de6920954704c456d12a43f75d7bfdd33c5c6","date":1353433257,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.ROOT;\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.ROOT;\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.ROOT;\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          @SuppressWarnings({\"rawtypes\"})\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        Locale locale = Locale.ROOT;\n        if (localeStr != null) {\n          try {\n            locale = new Locale.Builder().setLanguageTag(localeStr).build();\n          } catch (IllformedLocaleException e) {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Invalid Locale '\" + localeStr + \"' specified for field: \" + fld, e);\n          }\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ROOT);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          @SuppressWarnings({\"rawtypes\"})\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["2acf500f78aa12b92e371fd89c719291986b6b90","8b8de6920954704c456d12a43f75d7bfdd33c5c6"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["c26f00b574427b55127e869b935845554afde1fa"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c26f00b574427b55127e869b935845554afde1fa","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["8b8de6920954704c456d12a43f75d7bfdd33c5c6"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"8b8de6920954704c456d12a43f75d7bfdd33c5c6":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"c26f00b574427b55127e869b935845554afde1fa":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["407687e67faf6e1f02a211ca078d8e3eed631027","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","8b8de6920954704c456d12a43f75d7bfdd33c5c6"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"8b8de6920954704c456d12a43f75d7bfdd33c5c6":["407687e67faf6e1f02a211ca078d8e3eed631027","1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}