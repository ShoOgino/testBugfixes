{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","commits":[{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#getLiveAndActiveCount(String).mjava","sourceNew":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Collection<Slice> slices;\n    slices = zkStateReader.getClusterState().getActiveSlices(collection);\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","sourceOld":"  private int getLiveAndActiveCount(String collection1) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(collection1);\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = cloudClient.getZkStateReader().getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","sourceNew":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Collection<Slice> slices;\n    slices = zkStateReader.getClusterState().getCollection(collection).getActiveSlices();\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","sourceOld":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Collection<Slice> slices;\n    slices = zkStateReader.getClusterState().getActiveSlices(collection);\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","bugFix":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","sourceNew":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Collection<Slice> slices;\n    slices = zkStateReader.getClusterState().getCollection(collection).getActiveSlices();\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","sourceOld":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Collection<Slice> slices;\n    slices = zkStateReader.getClusterState().getActiveSlices(collection);\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#getLiveAndActiveReplicaCount(ZkStateReader,String).mjava","sourceNew":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Slice[] slices;\n    slices = zkStateReader.getClusterState().getCollection(collection).getActiveSlicesArr();\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","sourceOld":"  public static int getLiveAndActiveReplicaCount(ZkStateReader zkStateReader, String collection) {\n    Collection<Slice> slices;\n    slices = zkStateReader.getClusterState().getCollection(collection).getActiveSlices();\n    int liveAndActive = 0;\n    for (Slice slice : slices) {\n      for (Replica replica : slice.getReplicas()) {\n        boolean live = zkStateReader.getClusterState().liveNodesContain(replica.getNodeName());\n        boolean active = replica.getState() == Replica.State.ACTIVE;\n        if (live && active) {\n          liveAndActive++;\n        }\n      }\n    }\n    return liveAndActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["c84df91ca6a2e8d6f26f185663112546a27f6b45","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}