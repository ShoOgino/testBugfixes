{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testRamBytesUsed().mjava","commits":[{"id":"6f3aa4a70953833a343109c2c7f12b6ca45401d8","date":1402928712,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testRamBytesUsed().mjava","pathOld":"/dev/null","sourceNew":"  /** Test ram usage estimation. */\n  public void testRamBytesUsed() throws IOException {\n    final int iters = 100;\n    for (int i = 0; i < iters; ++i) {\n      final int pow = random().nextInt(20);\n      final int maxDoc = TestUtil.nextInt(random(), 1, 1 << pow);\n      final int numDocs = TestUtil.nextInt(random(), 0, Math.min(maxDoc, 1 << TestUtil.nextInt(random(), 0, pow)));\n      final BitSet set = randomSet(maxDoc, numDocs);\n      final DocIdSet copy = copyOf(set, maxDoc);\n      final long actualBytes = ramBytesUsed(copy, maxDoc);\n      final long expectedBytes = copy.ramBytesUsed();\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testRamBytesUsed().mjava","pathOld":"/dev/null","sourceNew":"  /** Test ram usage estimation. */\n  public void testRamBytesUsed() throws IOException {\n    final int iters = 100;\n    for (int i = 0; i < iters; ++i) {\n      final int pow = random().nextInt(20);\n      final int maxDoc = TestUtil.nextInt(random(), 1, 1 << pow);\n      final int numDocs = TestUtil.nextInt(random(), 0, Math.min(maxDoc, 1 << TestUtil.nextInt(random(), 0, pow)));\n      final BitSet set = randomSet(maxDoc, numDocs);\n      final DocIdSet copy = copyOf(set, maxDoc);\n      final long actualBytes = ramBytesUsed(copy, maxDoc);\n      final long expectedBytes = copy.ramBytesUsed();\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testRamBytesUsed().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testRamBytesUsed().mjava","sourceNew":"  /** Test ram usage estimation. */\n  public void testRamBytesUsed() throws IOException {\n    Random random = random();\n    final int iters = 100;\n    for (int i = 0; i < iters; ++i) {\n      final int pow = random.nextInt(20);\n      final int maxDoc = TestUtil.nextInt(random, 1, 1 << pow);\n      final int numDocs = TestUtil.nextInt(random, 0, Math.min(maxDoc, 1 << TestUtil.nextInt(random, 0, pow)));\n      final BitSet set = randomSet(maxDoc, numDocs);\n      final DocIdSet copy = copyOf(set, maxDoc);\n      final long actualBytes = ramBytesUsed(copy, maxDoc);\n      final long expectedBytes = copy.ramBytesUsed();\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","sourceOld":"  /** Test ram usage estimation. */\n  public void testRamBytesUsed() throws IOException {\n    final int iters = 100;\n    for (int i = 0; i < iters; ++i) {\n      final int pow = random().nextInt(20);\n      final int maxDoc = TestUtil.nextInt(random(), 1, 1 << pow);\n      final int numDocs = TestUtil.nextInt(random(), 0, Math.min(maxDoc, 1 << TestUtil.nextInt(random(), 0, pow)));\n      final BitSet set = randomSet(maxDoc, numDocs);\n      final DocIdSet copy = copyOf(set, maxDoc);\n      final long actualBytes = ramBytesUsed(copy, maxDoc);\n      final long expectedBytes = copy.ramBytesUsed();\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f3aa4a70953833a343109c2c7f12b6ca45401d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["6f3aa4a70953833a343109c2c7f12b6ca45401d8"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f3aa4a70953833a343109c2c7f12b6ca45401d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f3aa4a70953833a343109c2c7f12b6ca45401d8","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"6f3aa4a70953833a343109c2c7f12b6ca45401d8":["617d6d4150e0fb2acef8980ce51e3b8e628fb200","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}