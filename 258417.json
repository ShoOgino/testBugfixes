{"path":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testParamIterators().mjava","commits":[{"id":"f3d3c1549009ef49f4e37339712fbff21eebe3dc","date":1417457396,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testParamIterators().mjava","pathOld":"/dev/null","sourceNew":"  public void testParamIterators() {\n\n    ModifiableSolrParams aaa = new ModifiableSolrParams();\n    aaa.add(\"foo\", \"a1\");\n    aaa.add(\"foo\", \"a2\");\n\n    assertIterSize(\"aaa: foo\", 1, aaa);\n    assertIterSize(\"required aaa: foo\", 1, aaa.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n\n    aaa.add(\"yak\", \"a3\");\n\n    assertIterSize(\"aaa: foo & yak\", 2, aaa);\n    assertIterSize(\"required aaa: foo & yak\", 2, aaa.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, aaa.getParams(\"yak\"));\n\n    ModifiableSolrParams bbb = new ModifiableSolrParams();\n    bbb.add(\"foo\", \"b1\");\n    bbb.add(\"foo\", \"b2\");\n    bbb.add(\"zot\", \"b3\");\n\n    assertIterSize(\"bbb: foo & zot\", 2, bbb);\n    assertIterSize(\"required bbb: foo & zot\", 2, bbb.required());\n\n    assertEquals(new String[] { \"b1\", \"b2\" }, bbb.getParams(\"foo\"));\n    assertEquals(new String[] { \"b3\" }, bbb.getParams(\"zot\"));\n\n    SolrParams def = SolrParams.wrapDefaults(aaa, bbb);\n\n    assertIterSize(\"def: aaa + bbb\", 3, def);\n    assertIterSize(\"required def: aaa + bbb\", 3, def.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, def.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, def.getParams(\"yak\"));\n    assertEquals(new String[] { \"b3\" }, def.getParams(\"zot\"));\n\n    SolrParams append = SolrParams.wrapAppended(aaa, bbb);\n\n    assertIterSize(\"append: aaa + bbb\", 3, append);\n    assertIterSize(\"required appended: aaa + bbb\", 3, append.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\", \"b1\", \"b2\", }, append.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, append.getParams(\"yak\"));\n    assertEquals(new String[] { \"b3\" }, append.getParams(\"zot\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4","date":1523635523,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testParamIterators().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testParamIterators().mjava","sourceNew":"  public void testParamIterators() {\n\n    ModifiableSolrParams aaa = new ModifiableSolrParams();\n    aaa.add(\"foo\", \"a1\");\n    aaa.add(\"foo\", \"a2\");\n\n    assertIterSize(\"aaa: foo\", 1, aaa);\n    assertIterSize(\"required aaa: foo\", 1, aaa.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n\n    aaa.add(\"yak\", \"a3\");\n\n    assertIterSize(\"aaa: foo & yak\", 2, aaa);\n    assertIterSize(\"required aaa: foo & yak\", 2, aaa.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"a3\" }, aaa.getParams(\"yak\"));\n\n    ModifiableSolrParams bbb = new ModifiableSolrParams();\n    bbb.add(\"foo\", \"b1\");\n    bbb.add(\"foo\", \"b2\");\n    bbb.add(\"zot\", \"b3\");\n\n    assertIterSize(\"bbb: foo & zot\", 2, bbb);\n    assertIterSize(\"required bbb: foo & zot\", 2, bbb.required());\n\n    assertArrayEquals(new String[] { \"b1\", \"b2\" }, bbb.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"b3\" }, bbb.getParams(\"zot\"));\n\n    SolrParams def = SolrParams.wrapDefaults(aaa, bbb);\n\n    assertIterSize(\"def: aaa + bbb\", 3, def);\n    assertIterSize(\"required def: aaa + bbb\", 3, def.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\" }, def.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"a3\" }, def.getParams(\"yak\"));\n    assertArrayEquals(new String[] { \"b3\" }, def.getParams(\"zot\"));\n\n    SolrParams append = SolrParams.wrapAppended(aaa, bbb);\n\n    assertIterSize(\"append: aaa + bbb\", 3, append);\n    assertIterSize(\"required appended: aaa + bbb\", 3, append.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\", \"b1\", \"b2\", }, append.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"a3\" }, append.getParams(\"yak\"));\n    assertArrayEquals(new String[] { \"b3\" }, append.getParams(\"zot\"));\n\n  }\n\n","sourceOld":"  public void testParamIterators() {\n\n    ModifiableSolrParams aaa = new ModifiableSolrParams();\n    aaa.add(\"foo\", \"a1\");\n    aaa.add(\"foo\", \"a2\");\n\n    assertIterSize(\"aaa: foo\", 1, aaa);\n    assertIterSize(\"required aaa: foo\", 1, aaa.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n\n    aaa.add(\"yak\", \"a3\");\n\n    assertIterSize(\"aaa: foo & yak\", 2, aaa);\n    assertIterSize(\"required aaa: foo & yak\", 2, aaa.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, aaa.getParams(\"yak\"));\n\n    ModifiableSolrParams bbb = new ModifiableSolrParams();\n    bbb.add(\"foo\", \"b1\");\n    bbb.add(\"foo\", \"b2\");\n    bbb.add(\"zot\", \"b3\");\n\n    assertIterSize(\"bbb: foo & zot\", 2, bbb);\n    assertIterSize(\"required bbb: foo & zot\", 2, bbb.required());\n\n    assertEquals(new String[] { \"b1\", \"b2\" }, bbb.getParams(\"foo\"));\n    assertEquals(new String[] { \"b3\" }, bbb.getParams(\"zot\"));\n\n    SolrParams def = SolrParams.wrapDefaults(aaa, bbb);\n\n    assertIterSize(\"def: aaa + bbb\", 3, def);\n    assertIterSize(\"required def: aaa + bbb\", 3, def.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, def.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, def.getParams(\"yak\"));\n    assertEquals(new String[] { \"b3\" }, def.getParams(\"zot\"));\n\n    SolrParams append = SolrParams.wrapAppended(aaa, bbb);\n\n    assertIterSize(\"append: aaa + bbb\", 3, append);\n    assertIterSize(\"required appended: aaa + bbb\", 3, append.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\", \"b1\", \"b2\", }, append.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, append.getParams(\"yak\"));\n    assertEquals(new String[] { \"b3\" }, append.getParams(\"zot\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc17990871fe421019acbdd0ed59c8644b9154c","date":1523636883,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testParamIterators().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testParamIterators().mjava","sourceNew":"  public void testParamIterators() {\n\n    ModifiableSolrParams aaa = new ModifiableSolrParams();\n    aaa.add(\"foo\", \"a1\");\n    aaa.add(\"foo\", \"a2\");\n\n    assertIterSize(\"aaa: foo\", 1, aaa);\n    assertIterSize(\"required aaa: foo\", 1, aaa.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n\n    aaa.add(\"yak\", \"a3\");\n\n    assertIterSize(\"aaa: foo & yak\", 2, aaa);\n    assertIterSize(\"required aaa: foo & yak\", 2, aaa.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"a3\" }, aaa.getParams(\"yak\"));\n\n    ModifiableSolrParams bbb = new ModifiableSolrParams();\n    bbb.add(\"foo\", \"b1\");\n    bbb.add(\"foo\", \"b2\");\n    bbb.add(\"zot\", \"b3\");\n\n    assertIterSize(\"bbb: foo & zot\", 2, bbb);\n    assertIterSize(\"required bbb: foo & zot\", 2, bbb.required());\n\n    assertArrayEquals(new String[] { \"b1\", \"b2\" }, bbb.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"b3\" }, bbb.getParams(\"zot\"));\n\n    SolrParams def = SolrParams.wrapDefaults(aaa, bbb);\n\n    assertIterSize(\"def: aaa + bbb\", 3, def);\n    assertIterSize(\"required def: aaa + bbb\", 3, def.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\" }, def.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"a3\" }, def.getParams(\"yak\"));\n    assertArrayEquals(new String[] { \"b3\" }, def.getParams(\"zot\"));\n\n    SolrParams append = SolrParams.wrapAppended(aaa, bbb);\n\n    assertIterSize(\"append: aaa + bbb\", 3, append);\n    assertIterSize(\"required appended: aaa + bbb\", 3, append.required());\n\n    assertArrayEquals(new String[] { \"a1\", \"a2\", \"b1\", \"b2\", }, append.getParams(\"foo\"));\n    assertArrayEquals(new String[] { \"a3\" }, append.getParams(\"yak\"));\n    assertArrayEquals(new String[] { \"b3\" }, append.getParams(\"zot\"));\n\n  }\n\n","sourceOld":"  public void testParamIterators() {\n\n    ModifiableSolrParams aaa = new ModifiableSolrParams();\n    aaa.add(\"foo\", \"a1\");\n    aaa.add(\"foo\", \"a2\");\n\n    assertIterSize(\"aaa: foo\", 1, aaa);\n    assertIterSize(\"required aaa: foo\", 1, aaa.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n\n    aaa.add(\"yak\", \"a3\");\n\n    assertIterSize(\"aaa: foo & yak\", 2, aaa);\n    assertIterSize(\"required aaa: foo & yak\", 2, aaa.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, aaa.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, aaa.getParams(\"yak\"));\n\n    ModifiableSolrParams bbb = new ModifiableSolrParams();\n    bbb.add(\"foo\", \"b1\");\n    bbb.add(\"foo\", \"b2\");\n    bbb.add(\"zot\", \"b3\");\n\n    assertIterSize(\"bbb: foo & zot\", 2, bbb);\n    assertIterSize(\"required bbb: foo & zot\", 2, bbb.required());\n\n    assertEquals(new String[] { \"b1\", \"b2\" }, bbb.getParams(\"foo\"));\n    assertEquals(new String[] { \"b3\" }, bbb.getParams(\"zot\"));\n\n    SolrParams def = SolrParams.wrapDefaults(aaa, bbb);\n\n    assertIterSize(\"def: aaa + bbb\", 3, def);\n    assertIterSize(\"required def: aaa + bbb\", 3, def.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\" }, def.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, def.getParams(\"yak\"));\n    assertEquals(new String[] { \"b3\" }, def.getParams(\"zot\"));\n\n    SolrParams append = SolrParams.wrapAppended(aaa, bbb);\n\n    assertIterSize(\"append: aaa + bbb\", 3, append);\n    assertIterSize(\"required appended: aaa + bbb\", 3, append.required());\n\n    assertEquals(new String[] { \"a1\", \"a2\", \"b1\", \"b2\", }, append.getParams(\"foo\"));\n    assertEquals(new String[] { \"a3\" }, append.getParams(\"yak\"));\n    assertEquals(new String[] { \"b3\" }, append.getParams(\"zot\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["f3d3c1549009ef49f4e37339712fbff21eebe3dc","8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4"],"8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4":["f3d3c1549009ef49f4e37339712fbff21eebe3dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3d3c1549009ef49f4e37339712fbff21eebe3dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1cc17990871fe421019acbdd0ed59c8644b9154c"]},"commit2Childs":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3d3c1549009ef49f4e37339712fbff21eebe3dc"],"f3d3c1549009ef49f4e37339712fbff21eebe3dc":["1cc17990871fe421019acbdd0ed59c8644b9154c","8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}