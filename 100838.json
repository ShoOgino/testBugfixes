{"path":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"/dev/null","sourceNew":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n    IndexReader reader = h.getCore().getSearcher().get().getReader();\n    /*for (int i = 0; i < 50; i++){\n      Document doc = reader.document(i);\n      System.out.println(\"Doc: \" + doc.get(\"homed_0___double\"));\n    }*/\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n    \n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167d88dee5d85da5ab1a3558c976d07b884a2a63","date":1261684600,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n    \n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n    IndexReader reader = h.getCore().getSearcher().get().getReader();\n    /*for (int i = 0; i < 50; i++){\n      Document doc = reader.document(i);\n      System.out.println(\"Doc: \" + doc.get(\"homed_0___double\"));\n    }*/\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n    \n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5703611aa66d862b378d511ccaa2e6d68bab5326","date":1262011278,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n    \n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, toMultiVS(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n    \n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n    \n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testSearching().mjava","sourceNew":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  public void testSearching() throws Exception {\n    for (int i = 0; i < 50; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"home\", i + \",\" + (i * 100), \"homed\", (i * 1000) + \",\" + (i * 10000)));\n    }\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"*:*\"), \"//*[@numFound='50']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"home:1,100\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='home'][.='1,100']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"homed:1000,10000\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='homed'][.='1000,10000']\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}sqedist(home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"{!func}dist(2, home, vector(0, 0))\"),\n            \"\\\"//*[@numFound='50']\\\"\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"home:[10,10000 TO 30,30000]\"),\n            \"\\\"//*[@numFound='3']\\\"\");\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1,1000 TO 2000,35000]\"),\n            \"\\\"//*[@numFound='2']\\\"\");\n    //bad\n\n    assertQEx(\"Query should throw an exception due to incorrect dimensions\", req(\"fl\", \"*,score\", \"q\",\n            \"homed:[1 TO 2000]\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5703611aa66d862b378d511ccaa2e6d68bab5326":["167d88dee5d85da5ab1a3558c976d07b884a2a63"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["5703611aa66d862b378d511ccaa2e6d68bab5326"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"167d88dee5d85da5ab1a3558c976d07b884a2a63":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["167d88dee5d85da5ab1a3558c976d07b884a2a63"],"5703611aa66d862b378d511ccaa2e6d68bab5326":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"167d88dee5d85da5ab1a3558c976d07b884a2a63":["5703611aa66d862b378d511ccaa2e6d68bab5326"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}