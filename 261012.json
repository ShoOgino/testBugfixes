{"path":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#doInit().mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#doInit().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pulls the \"fl\" param from the request and splits it to get the\n   * requested list of fields.  The (Dynamic)FieldCollectionResource classes\n   * will then restrict the fields sent back in the response to those\n   * on this list.  The (Dynamic)FieldResource classes ignore this list, \n   * since the (dynamic) field is specified in the URL path, rather than\n   * in a query parameter.\n   * <p/>\n   * Also pulls the \"showDefaults\" param from the request, for use by all\n   * subclasses to include default values from the associated field type\n   * in the response.  By default this param is off.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    if (isExisting()) {\n      String flParam = getSolrRequest().getParams().get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedFields = new LinkedHashMap<String,SimpleOrderedMap<Object>>();\n          for (String field : fields) {\n            if ( ! field.isEmpty()) {\n              requestedFields.put(field, null);\n            }\n          }\n        }\n      }\n      showDefaults = getSolrRequest().getParams().getBool(SHOW_DEFAULTS, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47ade09239358147b3ebd60bed41b957e2f75891","date":1362696078,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the \"fl\" param from the request and splits it to get the\n   * requested list of fields.  The (Dynamic)FieldCollectionResource classes\n   * will then restrict the fields sent back in the response to those\n   * on this list.  The (Dynamic)FieldResource classes ignore this list, \n   * since the (dynamic) field is specified in the URL path, rather than\n   * in a query parameter.\n   * <p/>\n   * Also pulls the \"showDefaults\" param from the request, for use by all\n   * subclasses to include default values from the associated field type\n   * in the response.  By default this param is off.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    if (isExisting()) {\n      String flParam = getSolrRequest().getParams().get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedFields = new LinkedHashSet<String>();\n          for (String field : fields) {\n            if ( ! field.trim().isEmpty()) {\n              requestedFields.add(field.trim());\n            }\n          }\n        }\n      }\n      showDefaults = getSolrRequest().getParams().getBool(SHOW_DEFAULTS, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the \"fl\" param from the request and splits it to get the\n   * requested list of fields.  The (Dynamic)FieldCollectionResource classes\n   * will then restrict the fields sent back in the response to those\n   * on this list.  The (Dynamic)FieldResource classes ignore this list, \n   * since the (dynamic) field is specified in the URL path, rather than\n   * in a query parameter.\n   * <p/>\n   * Also pulls the \"showDefaults\" param from the request, for use by all\n   * subclasses to include default values from the associated field type\n   * in the response.  By default this param is off.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    if (isExisting()) {\n      String flParam = getSolrRequest().getParams().get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedFields = new LinkedHashMap<String,SimpleOrderedMap<Object>>();\n          for (String field : fields) {\n            if ( ! field.isEmpty()) {\n              requestedFields.put(field, null);\n            }\n          }\n        }\n      }\n      showDefaults = getSolrRequest().getParams().getBool(SHOW_DEFAULTS, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the \"fl\" param from the request and splits it to get the\n   * requested list of fields.  The (Dynamic)FieldCollectionResource classes\n   * will then restrict the fields sent back in the response to those\n   * on this list.  The (Dynamic)FieldResource classes ignore this list, \n   * since the (dynamic) field is specified in the URL path, rather than\n   * in a query parameter.\n   * <p/>\n   * Also pulls the \"showDefaults\" param from the request, for use by all\n   * subclasses to include default values from the associated field type\n   * in the response.  By default this param is off.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    if (isExisting()) {\n      String flParam = getSolrRequest().getParams().get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedFields = new LinkedHashSet<String>();\n          for (String field : fields) {\n            if ( ! field.trim().isEmpty()) {\n              requestedFields.add(field.trim());\n            }\n          }\n        }\n      }\n      showDefaults = getSolrRequest().getParams().getBool(SHOW_DEFAULTS, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the \"fl\" param from the request and splits it to get the\n   * requested list of fields.  The (Dynamic)FieldCollectionResource classes\n   * will then restrict the fields sent back in the response to those\n   * on this list.  The (Dynamic)FieldResource classes ignore this list, \n   * since the (dynamic) field is specified in the URL path, rather than\n   * in a query parameter.\n   * <p/>\n   * Also pulls the \"showDefaults\" param from the request, for use by all\n   * subclasses to include default values from the associated field type\n   * in the response.  By default this param is off.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    if (isExisting()) {\n      String flParam = getSolrRequest().getParams().get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedFields = new LinkedHashSet<String>();\n          for (String field : fields) {\n            if ( ! field.trim().isEmpty()) {\n              requestedFields.add(field.trim());\n            }\n          }\n        }\n      }\n      showDefaults = getSolrRequest().getParams().getBool(SHOW_DEFAULTS, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"47ade09239358147b3ebd60bed41b957e2f75891":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["47ade09239358147b3ebd60bed41b957e2f75891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"47ade09239358147b3ebd60bed41b957e2f75891":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["47ade09239358147b3ebd60bed41b957e2f75891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}