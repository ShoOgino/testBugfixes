{"path":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bef851a005f4fcbbec72fcbb9bb3abaece56aa0","date":1231908830,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":["dd4f0da23db5d5db48f3fa44d077e05a5a4f2b29"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0df8fbb0dbfa3d41b4ac6a72c043129f019fd01d","date":1231991156,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see {@link #useMultiPartPost}, {@link #_parser}\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2fb9919d651fb3145caba6777fc3b2aa853ac97c","date":1255112833,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see {@link #useMultiPartPost}, {@link #_parser}\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"0df8fbb0dbfa3d41b4ac6a72c043129f019fd01d":["2bef851a005f4fcbbec72fcbb9bb3abaece56aa0"],"2fb9919d651fb3145caba6777fc3b2aa853ac97c":["0df8fbb0dbfa3d41b4ac6a72c043129f019fd01d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fb9919d651fb3145caba6777fc3b2aa853ac97c"],"2bef851a005f4fcbbec72fcbb9bb3abaece56aa0":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["2bef851a005f4fcbbec72fcbb9bb3abaece56aa0"],"0df8fbb0dbfa3d41b4ac6a72c043129f019fd01d":["2fb9919d651fb3145caba6777fc3b2aa853ac97c"],"2fb9919d651fb3145caba6777fc3b2aa853ac97c":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2bef851a005f4fcbbec72fcbb9bb3abaece56aa0":["0df8fbb0dbfa3d41b4ac6a72c043129f019fd01d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}