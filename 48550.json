{"path":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator#testRandom().mjava","commits":[{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":0,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    MaxScoreAccumulator acc = new MaxScoreAccumulator();\n    int numDocs = atLeast(100);\n    int maxDocs = atLeast(10000);\n    MaxScoreAccumulator.Result max = new MaxScoreAccumulator.Result(-1, -1);\n    for (int i = 0; i < numDocs; i++) {\n      MaxScoreAccumulator.Result res = new MaxScoreAccumulator.Result(random().nextInt(maxDocs), random().nextFloat());\n      acc.accumulate(res.docID, res.score);\n      if (res.compareTo(max) > 0) {\n        max = res;\n      }\n    }\n    assertEquals(max, acc.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e0066943a75c6f4af395bcd7728a812943cbb63","date":1570723011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator#testRandom().mjava","sourceNew":"  public void testRandom() {\n    MaxScoreAccumulator acc = new MaxScoreAccumulator();\n    int numDocs = atLeast(100);\n    int maxDocs = atLeast(10000);\n    MaxScoreAccumulator.DocAndScore max = new MaxScoreAccumulator.DocAndScore(-1, -1);\n    for (int i = 0; i < numDocs; i++) {\n      MaxScoreAccumulator.DocAndScore res = new MaxScoreAccumulator.DocAndScore(random().nextInt(maxDocs), random().nextFloat());\n      acc.accumulate(res.docID, res.score);\n      if (res.compareTo(max) > 0) {\n        max = res;\n      }\n    }\n    assertEquals(max, acc.get());\n  }\n\n","sourceOld":"  public void testRandom() {\n    MaxScoreAccumulator acc = new MaxScoreAccumulator();\n    int numDocs = atLeast(100);\n    int maxDocs = atLeast(10000);\n    MaxScoreAccumulator.Result max = new MaxScoreAccumulator.Result(-1, -1);\n    for (int i = 0; i < numDocs; i++) {\n      MaxScoreAccumulator.Result res = new MaxScoreAccumulator.Result(random().nextInt(maxDocs), random().nextFloat());\n      acc.accumulate(res.docID, res.score);\n      if (res.compareTo(max) > 0) {\n        max = res;\n      }\n    }\n    assertEquals(max, acc.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    MaxScoreAccumulator acc = new MaxScoreAccumulator();\n    int numDocs = atLeast(100);\n    int maxDocs = atLeast(10000);\n    MaxScoreAccumulator.DocAndScore max = new MaxScoreAccumulator.DocAndScore(-1, -1);\n    for (int i = 0; i < numDocs; i++) {\n      MaxScoreAccumulator.DocAndScore res = new MaxScoreAccumulator.DocAndScore(random().nextInt(maxDocs), random().nextFloat());\n      acc.accumulate(res.docID, res.score);\n      if (res.compareTo(max) > 0) {\n        max = res;\n      }\n    }\n    assertEquals(max, acc.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807314aa41c10866aec273a0e54fd0d24d8971de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e0066943a75c6f4af395bcd7728a812943cbb63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"6e0066943a75c6f4af395bcd7728a812943cbb63":["807314aa41c10866aec273a0e54fd0d24d8971de"]},"commit2Childs":{"807314aa41c10866aec273a0e54fd0d24d8971de":["6e0066943a75c6f4af395bcd7728a812943cbb63"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["807314aa41c10866aec273a0e54fd0d24d8971de","3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"6e0066943a75c6f4af395bcd7728a812943cbb63":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}