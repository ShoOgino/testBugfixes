{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      throw new RuntimeException(\"WARNING: Can not find lexical dictionary directory!\"\n       + \" This will cause unpredictable exceptions in your application!\"\n       + \" Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70","05ff0cc6e864c7d71a48579f2acfca4f58943568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      throw new RuntimeException(\"WARNING: Can not find lexical dictionary directory!\"\n       + \" This will cause unpredictable exceptions in your application!\"\n       + \" Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      throw new RuntimeException(\"WARNING: Can not find lexical dictionary directory!\"\n       + \" This will cause unpredictable exceptions in your application!\"\n       + \" Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    Path[] candidateFiles = new Path[] {\n        Paths.get(dirName),\n        Paths.get(\"lib\").resolve(dirName),\n        Paths.get(propName),\n        Paths.get(\"lib\").resolve(propName)\n    };\n    for (Path file : candidateFiles) {\n      if (Files.exists(file)) {\n        if (Files.isDirectory(file)) {\n          ANALYSIS_DATA_DIR = file.toAbsolutePath().toString();\n        } else if (Files.isRegularFile(file) && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file).toString();\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      throw new RuntimeException(\"WARNING: Can not find lexical dictionary directory!\"\n       + \" This will cause unpredictable exceptions in your application!\"\n       + \" Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      throw new RuntimeException(\"WARNING: Can not find lexical dictionary directory!\"\n       + \" This will cause unpredictable exceptions in your application!\"\n       + \" Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}