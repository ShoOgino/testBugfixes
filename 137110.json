{"path":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#set(long,long).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#set(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets a range of bits\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = (int) (startIndex >> 6);\n    int endWord = (int) ((endIndex-1) >> 6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48a00d99ab5d2304d5699e78fdfdbda520687e3e","date":1428909239,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#set(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#set(long,long).mjava","sourceNew":"  /** Sets a range of bits\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = (int) (startIndex >> 6);\n    int endWord = (int) ((endIndex-1) >> 6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex since only the lowest 6 bits are used\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","sourceOld":"  /** Sets a range of bits\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = (int) (startIndex >> 6);\n    int endWord = (int) ((endIndex-1) >> 6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#set(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#set(long,long).mjava","sourceNew":"  /** Sets a range of bits\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    assert startIndex >= 0 && startIndex < numBits : \"startIndex=\" + startIndex + \", numBits=\" + numBits;\n    assert endIndex >= 0 && endIndex <= numBits : \"endIndex=\" + endIndex + \", numBits=\" + numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = (int) (startIndex >> 6);\n    int endWord = (int) ((endIndex-1) >> 6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex since only the lowest 6 bits are used\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","sourceOld":"  /** Sets a range of bits\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = (int) (startIndex >> 6);\n    int endWord = (int) ((endIndex-1) >> 6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex since only the lowest 6 bits are used\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","bugFix":["3995f83351082af8ae83bb017e63c56818fc1568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48a00d99ab5d2304d5699e78fdfdbda520687e3e":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"48a00d99ab5d2304d5699e78fdfdbda520687e3e":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}