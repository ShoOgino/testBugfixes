{"path":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}