{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#setContext().mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#setContext().mjava","pathOld":"/dev/null","sourceNew":"  private void setContext() throws Exception {\n    //The states of client that is invalid in this request\n    Aliases aliases = null;\n    String corename = \"\";\n    String origCorename = null;\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimer());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    if (solrDispatchFilter.pathPrefix != null && path.startsWith(solrDispatchFilter.pathPrefix)) {\n      path = path.substring(solrDispatchFilter.pathPrefix.length());\n    }\n    // check for management path\n    String alternate = cores.getManagementPath();\n    if (alternate != null && path.startsWith(alternate)) {\n      path = path.substring(0, alternate.length());\n    }\n    // unused feature ?\n    int idx = path.indexOf(':');\n    if (idx > 0) {\n      // save the portion after the ':' for a 'handler' path parameter\n      path = path.substring(0, idx);\n    }\n\n    boolean usingAliases = false;\n    List<String> collectionsList = null;\n\n    // Check for container handlers\n    handler = cores.getRequestHandler(path);\n    if (handler != null) {\n      solrReq = SolrRequestParsers.DEFAULT.parse(null, path, req);\n      solrReq.getContext().put(CoreContainer.class.getName(), cores);\n      action = ADMIN;\n      return;\n    } else {\n      //otherwise, we should find a core from the path\n      idx = path.indexOf(\"/\", 1);\n      if (idx > 1) {\n        // try to get the corename as a request parameter first\n        corename = path.substring(1, idx);\n\n        // look at aliases\n        if (cores.isZooKeeperAware()) {\n          origCorename = corename;\n          ZkStateReader reader = cores.getZkController().getZkStateReader();\n          aliases = reader.getAliases();\n          if (aliases != null && aliases.collectionAliasSize() > 0) {\n            usingAliases = true;\n            String alias = aliases.getCollectionAlias(corename);\n            if (alias != null) {\n              collectionsList = StrUtils.splitSmart(alias, \",\", true);\n              corename = collectionsList.get(0);\n            }\n          }\n        }\n\n        core = cores.getCore(corename);\n        if (core != null) {\n          path = path.substring(idx);\n        }\n      }\n      if (core == null) {\n        if (!cores.isZooKeeperAware()) {\n          core = cores.getCore(\"\");\n        }\n      }\n    }\n\n    if (core != null) addMDCValues();\n\n    if (core == null && cores.isZooKeeperAware()) {\n      // we couldn't find the core - lets make sure a collection was not specified instead\n      core = getCoreByCollection(corename);\n      if (core != null) {\n        // we found a core, update the path\n        path = path.substring(idx);\n        addMDCValues();\n      }\n\n      // if we couldn't find it locally, look on other nodes\n      extractRemotePath(corename, origCorename, idx);\n      if (action != null) return;\n\n      // try the default core\n      if (core == null) {\n        core = cores.getCore(\"\");\n        if (core != null) addMDCValues();\n      }\n    }\n\n    // With a valid core...\n    if (core != null) {\n      config = core.getSolrConfig();\n      // get or create/cache the parser for the core\n      SolrRequestParsers parser = config.getRequestParsers();\n\n\n      // Determine the handler from the url path if not set\n      // (we might already have selected the cores handler)\n      extractHandlerFromURLPath(parser);\n      if (action != null) return;\n\n      // With a valid handler and a valid core...\n      if (handler != null) {\n        // if not a /select, create the request\n        if (solrReq == null) {\n          solrReq = parser.parse(core, path, req);\n        }\n\n        if (usingAliases) {\n          processAliases(aliases, collectionsList);\n        }\n\n        action = PROCESS;\n        return; // we are done with a valid handler\n      }\n    }\n    SolrDispatchFilter.log.debug(\"no handler or core retrieved for \" + path + \", follow through...\");\n\n    action = PASSTHROUGH;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["08e881a61d5dffc3a403f2892fb747aca86bab0c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"801f068cacbe29eabe66170e5d85e7c447b0113d","date":1430942267,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#setContext().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#setContext().mjava","sourceNew":"  private void setContext() throws Exception {\n    //The states of client that is invalid in this request\n    Aliases aliases = null;\n    String corename = \"\";\n    String origCorename = null;\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimer());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    // check for management path\n    String alternate = cores.getManagementPath();\n    if (alternate != null && path.startsWith(alternate)) {\n      path = path.substring(0, alternate.length());\n    }\n    // unused feature ?\n    int idx = path.indexOf(':');\n    if (idx > 0) {\n      // save the portion after the ':' for a 'handler' path parameter\n      path = path.substring(0, idx);\n    }\n\n    boolean usingAliases = false;\n    List<String> collectionsList = null;\n\n    // Check for container handlers\n    handler = cores.getRequestHandler(path);\n    if (handler != null) {\n      solrReq = SolrRequestParsers.DEFAULT.parse(null, path, req);\n      solrReq.getContext().put(CoreContainer.class.getName(), cores);\n      action = ADMIN;\n      return;\n    } else {\n      //otherwise, we should find a core from the path\n      idx = path.indexOf(\"/\", 1);\n      if (idx > 1) {\n        // try to get the corename as a request parameter first\n        corename = path.substring(1, idx);\n\n        // look at aliases\n        if (cores.isZooKeeperAware()) {\n          origCorename = corename;\n          ZkStateReader reader = cores.getZkController().getZkStateReader();\n          aliases = reader.getAliases();\n          if (aliases != null && aliases.collectionAliasSize() > 0) {\n            usingAliases = true;\n            String alias = aliases.getCollectionAlias(corename);\n            if (alias != null) {\n              collectionsList = StrUtils.splitSmart(alias, \",\", true);\n              corename = collectionsList.get(0);\n            }\n          }\n        }\n\n        core = cores.getCore(corename);\n        if (core != null) {\n          path = path.substring(idx);\n        }\n      }\n      if (core == null) {\n        if (!cores.isZooKeeperAware()) {\n          core = cores.getCore(\"\");\n        }\n      }\n    }\n\n    if (core != null) addMDCValues();\n\n    if (core == null && cores.isZooKeeperAware()) {\n      // we couldn't find the core - lets make sure a collection was not specified instead\n      core = getCoreByCollection(corename);\n      if (core != null) {\n        // we found a core, update the path\n        path = path.substring(idx);\n        addMDCValues();\n      }\n\n      // if we couldn't find it locally, look on other nodes\n      extractRemotePath(corename, origCorename, idx);\n      if (action != null) return;\n\n      // try the default core\n      if (core == null) {\n        core = cores.getCore(\"\");\n        if (core != null) addMDCValues();\n      }\n    }\n\n    // With a valid core...\n    if (core != null) {\n      config = core.getSolrConfig();\n      // get or create/cache the parser for the core\n      SolrRequestParsers parser = config.getRequestParsers();\n\n\n      // Determine the handler from the url path if not set\n      // (we might already have selected the cores handler)\n      extractHandlerFromURLPath(parser);\n      if (action != null) return;\n\n      // With a valid handler and a valid core...\n      if (handler != null) {\n        // if not a /select, create the request\n        if (solrReq == null) {\n          solrReq = parser.parse(core, path, req);\n        }\n\n        if (usingAliases) {\n          processAliases(aliases, collectionsList);\n        }\n\n        action = PROCESS;\n        return; // we are done with a valid handler\n      }\n    }\n    SolrDispatchFilter.log.debug(\"no handler or core retrieved for \" + path + \", follow through...\");\n\n    action = PASSTHROUGH;\n  }\n\n","sourceOld":"  private void setContext() throws Exception {\n    //The states of client that is invalid in this request\n    Aliases aliases = null;\n    String corename = \"\";\n    String origCorename = null;\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimer());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    if (solrDispatchFilter.pathPrefix != null && path.startsWith(solrDispatchFilter.pathPrefix)) {\n      path = path.substring(solrDispatchFilter.pathPrefix.length());\n    }\n    // check for management path\n    String alternate = cores.getManagementPath();\n    if (alternate != null && path.startsWith(alternate)) {\n      path = path.substring(0, alternate.length());\n    }\n    // unused feature ?\n    int idx = path.indexOf(':');\n    if (idx > 0) {\n      // save the portion after the ':' for a 'handler' path parameter\n      path = path.substring(0, idx);\n    }\n\n    boolean usingAliases = false;\n    List<String> collectionsList = null;\n\n    // Check for container handlers\n    handler = cores.getRequestHandler(path);\n    if (handler != null) {\n      solrReq = SolrRequestParsers.DEFAULT.parse(null, path, req);\n      solrReq.getContext().put(CoreContainer.class.getName(), cores);\n      action = ADMIN;\n      return;\n    } else {\n      //otherwise, we should find a core from the path\n      idx = path.indexOf(\"/\", 1);\n      if (idx > 1) {\n        // try to get the corename as a request parameter first\n        corename = path.substring(1, idx);\n\n        // look at aliases\n        if (cores.isZooKeeperAware()) {\n          origCorename = corename;\n          ZkStateReader reader = cores.getZkController().getZkStateReader();\n          aliases = reader.getAliases();\n          if (aliases != null && aliases.collectionAliasSize() > 0) {\n            usingAliases = true;\n            String alias = aliases.getCollectionAlias(corename);\n            if (alias != null) {\n              collectionsList = StrUtils.splitSmart(alias, \",\", true);\n              corename = collectionsList.get(0);\n            }\n          }\n        }\n\n        core = cores.getCore(corename);\n        if (core != null) {\n          path = path.substring(idx);\n        }\n      }\n      if (core == null) {\n        if (!cores.isZooKeeperAware()) {\n          core = cores.getCore(\"\");\n        }\n      }\n    }\n\n    if (core != null) addMDCValues();\n\n    if (core == null && cores.isZooKeeperAware()) {\n      // we couldn't find the core - lets make sure a collection was not specified instead\n      core = getCoreByCollection(corename);\n      if (core != null) {\n        // we found a core, update the path\n        path = path.substring(idx);\n        addMDCValues();\n      }\n\n      // if we couldn't find it locally, look on other nodes\n      extractRemotePath(corename, origCorename, idx);\n      if (action != null) return;\n\n      // try the default core\n      if (core == null) {\n        core = cores.getCore(\"\");\n        if (core != null) addMDCValues();\n      }\n    }\n\n    // With a valid core...\n    if (core != null) {\n      config = core.getSolrConfig();\n      // get or create/cache the parser for the core\n      SolrRequestParsers parser = config.getRequestParsers();\n\n\n      // Determine the handler from the url path if not set\n      // (we might already have selected the cores handler)\n      extractHandlerFromURLPath(parser);\n      if (action != null) return;\n\n      // With a valid handler and a valid core...\n      if (handler != null) {\n        // if not a /select, create the request\n        if (solrReq == null) {\n          solrReq = parser.parse(core, path, req);\n        }\n\n        if (usingAliases) {\n          processAliases(aliases, collectionsList);\n        }\n\n        action = PROCESS;\n        return; // we are done with a valid handler\n      }\n    }\n    SolrDispatchFilter.log.debug(\"no handler or core retrieved for \" + path + \", follow through...\");\n\n    action = PASSTHROUGH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#setContext().mjava","sourceNew":"  private void init() throws Exception {\n    //The states of client that is invalid in this request\n    Aliases aliases = null;\n    String corename = \"\";\n    String origCorename = null;\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimer());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    // check for management path\n    String alternate = cores.getManagementPath();\n    if (alternate != null && path.startsWith(alternate)) {\n      path = path.substring(0, alternate.length());\n    }\n    // unused feature ?\n    int idx = path.indexOf(':');\n    if (idx > 0) {\n      // save the portion after the ':' for a 'handler' path parameter\n      path = path.substring(0, idx);\n    }\n\n    boolean usingAliases = false;\n\n    // Check for container handlers\n    handler = cores.getRequestHandler(path);\n    if (handler != null) {\n      solrReq = SolrRequestParsers.DEFAULT.parse(null, path, req);\n      solrReq.getContext().put(CoreContainer.class.getName(), cores);\n      requestType = RequestType.ADMIN;\n      action = ADMIN;\n      return;\n    } else {\n      //otherwise, we should find a core from the path\n      idx = path.indexOf(\"/\", 1);\n      if (idx > 1) {\n        // try to get the corename as a request parameter first\n        corename = path.substring(1, idx);\n\n        // look at aliases\n        if (cores.isZooKeeperAware()) {\n          origCorename = corename;\n          ZkStateReader reader = cores.getZkController().getZkStateReader();\n          aliases = reader.getAliases();\n          if (aliases != null && aliases.collectionAliasSize() > 0) {\n            usingAliases = true;\n            String alias = aliases.getCollectionAlias(corename);\n            if (alias != null) {\n              collectionsList = StrUtils.splitSmart(alias, \",\", true);\n              corename = collectionsList.get(0);\n            }\n          }\n        }\n\n        core = cores.getCore(corename);\n        if (core != null) {\n          path = path.substring(idx);\n        }\n      }\n      if (core == null) {\n        if (!cores.isZooKeeperAware()) {\n          core = cores.getCore(\"\");\n        }\n      }\n    }\n\n    if (core != null) addMDCValues();\n\n    if (core == null && cores.isZooKeeperAware()) {\n      // we couldn't find the core - lets make sure a collection was not specified instead\n      core = getCoreByCollection(corename);\n      if (core != null) {\n        // we found a core, update the path\n        path = path.substring(idx);\n        addMDCValues();\n        if (collectionsList == null)\n          collectionsList = new ArrayList<>();\n        collectionsList.add(corename);\n      }\n\n      // if we couldn't find it locally, look on other nodes\n      extractRemotePath(corename, origCorename, idx);\n      if (action != null) return;\n\n      // try the default core\n      if (core == null) {\n        core = cores.getCore(\"\");\n        if (core != null) addMDCValues();\n      }\n    }\n\n    // With a valid core...\n    if (core != null) {\n      config = core.getSolrConfig();\n      // get or create/cache the parser for the core\n      SolrRequestParsers parser = config.getRequestParsers();\n\n\n      // Determine the handler from the url path if not set\n      // (we might already have selected the cores handler)\n      extractHandlerFromURLPath(parser);\n      if (action != null) return;\n\n      // With a valid handler and a valid core...\n      if (handler != null) {\n        // if not a /select, create the request\n        if (solrReq == null) {\n          solrReq = parser.parse(core, path, req);\n        }\n\n        if (usingAliases) {\n          processAliases(aliases, collectionsList);\n        }\n\n        action = PROCESS;\n        return; // we are done with a valid handler\n      }\n    }\n    SolrDispatchFilter.log.debug(\"no handler or core retrieved for \" + path + \", follow through...\");\n\n    action = PASSTHROUGH;\n  }\n\n","sourceOld":"  private void setContext() throws Exception {\n    //The states of client that is invalid in this request\n    Aliases aliases = null;\n    String corename = \"\";\n    String origCorename = null;\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimer());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    // check for management path\n    String alternate = cores.getManagementPath();\n    if (alternate != null && path.startsWith(alternate)) {\n      path = path.substring(0, alternate.length());\n    }\n    // unused feature ?\n    int idx = path.indexOf(':');\n    if (idx > 0) {\n      // save the portion after the ':' for a 'handler' path parameter\n      path = path.substring(0, idx);\n    }\n\n    boolean usingAliases = false;\n    List<String> collectionsList = null;\n\n    // Check for container handlers\n    handler = cores.getRequestHandler(path);\n    if (handler != null) {\n      solrReq = SolrRequestParsers.DEFAULT.parse(null, path, req);\n      solrReq.getContext().put(CoreContainer.class.getName(), cores);\n      action = ADMIN;\n      return;\n    } else {\n      //otherwise, we should find a core from the path\n      idx = path.indexOf(\"/\", 1);\n      if (idx > 1) {\n        // try to get the corename as a request parameter first\n        corename = path.substring(1, idx);\n\n        // look at aliases\n        if (cores.isZooKeeperAware()) {\n          origCorename = corename;\n          ZkStateReader reader = cores.getZkController().getZkStateReader();\n          aliases = reader.getAliases();\n          if (aliases != null && aliases.collectionAliasSize() > 0) {\n            usingAliases = true;\n            String alias = aliases.getCollectionAlias(corename);\n            if (alias != null) {\n              collectionsList = StrUtils.splitSmart(alias, \",\", true);\n              corename = collectionsList.get(0);\n            }\n          }\n        }\n\n        core = cores.getCore(corename);\n        if (core != null) {\n          path = path.substring(idx);\n        }\n      }\n      if (core == null) {\n        if (!cores.isZooKeeperAware()) {\n          core = cores.getCore(\"\");\n        }\n      }\n    }\n\n    if (core != null) addMDCValues();\n\n    if (core == null && cores.isZooKeeperAware()) {\n      // we couldn't find the core - lets make sure a collection was not specified instead\n      core = getCoreByCollection(corename);\n      if (core != null) {\n        // we found a core, update the path\n        path = path.substring(idx);\n        addMDCValues();\n      }\n\n      // if we couldn't find it locally, look on other nodes\n      extractRemotePath(corename, origCorename, idx);\n      if (action != null) return;\n\n      // try the default core\n      if (core == null) {\n        core = cores.getCore(\"\");\n        if (core != null) addMDCValues();\n      }\n    }\n\n    // With a valid core...\n    if (core != null) {\n      config = core.getSolrConfig();\n      // get or create/cache the parser for the core\n      SolrRequestParsers parser = config.getRequestParsers();\n\n\n      // Determine the handler from the url path if not set\n      // (we might already have selected the cores handler)\n      extractHandlerFromURLPath(parser);\n      if (action != null) return;\n\n      // With a valid handler and a valid core...\n      if (handler != null) {\n        // if not a /select, create the request\n        if (solrReq == null) {\n          solrReq = parser.parse(core, path, req);\n        }\n\n        if (usingAliases) {\n          processAliases(aliases, collectionsList);\n        }\n\n        action = PROCESS;\n        return; // we are done with a valid handler\n      }\n    }\n    SolrDispatchFilter.log.debug(\"no handler or core retrieved for \" + path + \", follow through...\");\n\n    action = PASSTHROUGH;\n  }\n\n","bugFix":null,"bugIntro":["08e881a61d5dffc3a403f2892fb747aca86bab0c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"801f068cacbe29eabe66170e5d85e7c447b0113d":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["801f068cacbe29eabe66170e5d85e7c447b0113d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["801f068cacbe29eabe66170e5d85e7c447b0113d"],"801f068cacbe29eabe66170e5d85e7c447b0113d":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}