{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","commits":[{"id":"2949cf6bcf4a8cb192de03ca4f43f301131f1c80","date":1434363736,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery q = new BooleanQuery(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      BKDPointInBBoxQuery left = new BKDPointInBBoxQuery(field, minLat, maxLat, BKDTreeWriter.MIN_LON_INCL, maxLon);\n      left.setBoost(getBoost());\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      BKDPointInBBoxQuery right = new BKDPointInBBoxQuery(field, minLat, maxLat, minLon, BKDTreeWriter.MAX_LON_INCL);\n      right.setBoost(getBoost());\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return q;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      BKDPointInBBoxQuery left = new BKDPointInBBoxQuery(field, minLat, maxLat, BKDTreeWriter.MIN_LON_INCL, maxLon);\n      left.setBoost(getBoost());\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      BKDPointInBBoxQuery right = new BKDPointInBBoxQuery(field, minLat, maxLat, minLon, BKDTreeWriter.MAX_LON_INCL);\n      right.setBoost(getBoost());\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return q.build();\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery q = new BooleanQuery(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      BKDPointInBBoxQuery left = new BKDPointInBBoxQuery(field, minLat, maxLat, BKDTreeWriter.MIN_LON_INCL, maxLon);\n      left.setBoost(getBoost());\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      BKDPointInBBoxQuery right = new BKDPointInBBoxQuery(field, minLat, maxLat, minLon, BKDTreeWriter.MAX_LON_INCL);\n      right.setBoost(getBoost());\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return q;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      BKDPointInBBoxQuery left = new BKDPointInBBoxQuery(field, minLat, maxLat, BKDTreeWriter.MIN_LON_INCL, maxLon);\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      BKDPointInBBoxQuery right = new BKDPointInBBoxQuery(field, minLat, maxLat, minLon, BKDTreeWriter.MAX_LON_INCL);\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return new ConstantScoreQuery(q.build());\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      BKDPointInBBoxQuery left = new BKDPointInBBoxQuery(field, minLat, maxLat, BKDTreeWriter.MIN_LON_INCL, maxLon);\n      left.setBoost(getBoost());\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      BKDPointInBBoxQuery right = new BKDPointInBBoxQuery(field, minLat, maxLat, minLon, BKDTreeWriter.MAX_LON_INCL);\n      right.setBoost(getBoost());\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return q.build();\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DimensionalPointInRectQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      DimensionalPointInRectQuery left = new DimensionalPointInRectQuery(field, minLat, maxLat, GeoUtils.MIN_LON_INCL, maxLon);\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      DimensionalPointInRectQuery right = new DimensionalPointInRectQuery(field, minLat, maxLat, minLon, GeoUtils.MAX_LON_INCL);\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return new ConstantScoreQuery(q.build());\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    // Crosses date line: we just rewrite into OR of two bboxes:\n    if (maxLon < minLon) {\n\n      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.setDisableCoord(true);\n\n      // E.g.: maxLon = -179, minLon = 179\n      BKDPointInBBoxQuery left = new BKDPointInBBoxQuery(field, minLat, maxLat, BKDTreeWriter.MIN_LON_INCL, maxLon);\n      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      BKDPointInBBoxQuery right = new BKDPointInBBoxQuery(field, minLat, maxLat, minLon, BKDTreeWriter.MAX_LON_INCL);\n      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return new ConstantScoreQuery(q.build());\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2949cf6bcf4a8cb192de03ca4f43f301131f1c80"],"2949cf6bcf4a8cb192de03ca4f43f301131f1c80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2949cf6bcf4a8cb192de03ca4f43f301131f1c80":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2949cf6bcf4a8cb192de03ca4f43f301131f1c80"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}