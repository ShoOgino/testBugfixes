{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[FacetLabel,FacetsAggregator]).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[FacetLabel,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link FacetLabel} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<FacetLabel,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[FacetLabel,FacetsAggregator]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link FacetLabel} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<FacetLabel,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d33e19a97046248623a7591aeaa6547233fd15e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}