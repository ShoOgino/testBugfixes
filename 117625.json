{"path":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","commits":[{"id":"781849b9287fb55f17208578ce7509cdb0d10fec","date":1101244069,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","pathOld":"/dev/null","sourceNew":"    public void testMax() {\n        // make sure the constants convert to their equivelents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","sourceNew":null,"sourceOld":"    public void testMax() {\n        // make sure the constants convert to their equivelents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","sourceNew":null,"sourceOld":"    public void testMax() {\n        // make sure the constants convert to their equivelents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61b8e7beed03e44332d4a604c53962e7d34ea17","date":1255278355,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","pathOld":"/dev/null","sourceNew":"    public void testMax() {\n        // make sure the constants convert to their equivelents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","sourceNew":"    public void testMax() {\n        // make sure the constants convert to their equivalents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","sourceOld":"    public void testMax() {\n        // make sure the constants convert to their equivelents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#testMax().mjava","sourceNew":"    public void testMax() {\n        // make sure the constants convert to their equivalents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","sourceOld":"    public void testMax() {\n        // make sure the constants convert to their equivalents\n        assertEquals(Long.MAX_VALUE, NumberTools\n                .stringToLong(NumberTools.MAX_STRING_VALUE));\n        assertEquals(NumberTools.MAX_STRING_VALUE, NumberTools\n                .longToString(Long.MAX_VALUE));\n\n        // test near MAX, too\n        for (long l = Long.MAX_VALUE; l > Long.MAX_VALUE - 10000; l--) {\n            subtestTwoLongs(l, l - 1);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["781849b9287fb55f17208578ce7509cdb0d10fec"],"781849b9287fb55f17208578ce7509cdb0d10fec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["781849b9287fb55f17208578ce7509cdb0d10fec","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"781849b9287fb55f17208578ce7509cdb0d10fec":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781849b9287fb55f17208578ce7509cdb0d10fec"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}