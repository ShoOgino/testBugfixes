{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","commits":[{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["f9efc72acdea22f5285be0a808f8bba51bb8e367"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9efc72acdea22f5285be0a808f8bba51bb8e367","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}