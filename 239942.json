{"path":"lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected abstract DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount, type, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected abstract DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount, type, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected abstract DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected abstract DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["de5bbadeb3abac0f650298bff584bd4317bd75aa","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}