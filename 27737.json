{"path":"src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","commits":[{"id":"9a70797e2ad3b67325d3043155af4baf6445fdd9","date":1227585729,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this,\"\",0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e62bfc99fea332bfdcdca0f73a821428d533279","date":1254838400,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this,\"\",0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","bugFix":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","pathOld":"src/java/org/apache/solr/request/TermIndex[UnInvertedField]#getEnumerator(IndexReader).mjava","sourceNew":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","sourceOld":"  /* The first time an enumerator is requested, it should be used\n     with next() to fully traverse all of the terms so the index\n     will be built.\n   */\n  NumberedTermEnum getEnumerator(IndexReader reader) throws IOException {\n    if (index==null) return new NumberedTermEnum(reader,this, prefix==null?\"\":prefix, 0) {\n      ArrayList<String> lst;\n\n      protected boolean setTerm() {\n        boolean b = super.setTerm();\n        if (b && (pos & intervalMask)==0) {\n          String text = term().text();\n          sizeOfStrings += text.length() << 1;\n          if (lst==null) {\n            lst = new ArrayList<String>();\n          }\n          lst.add(text);\n        }\n        return b;\n      }\n\n      public boolean skipTo(Term target) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public boolean skipTo(int termNumber) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      public void close() throws IOException {\n        nTerms=pos;\n        super.close();\n        index = lst!=null ? lst.toArray(new String[lst.size()]) : new String[0];\n      }\n    };\n    else return new NumberedTermEnum(reader,this,\"\",0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5e62bfc99fea332bfdcdca0f73a821428d533279":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"ad94625fb8d088209f46650c8097196fec67f00c":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"5e62bfc99fea332bfdcdca0f73a821428d533279":["ad94625fb8d088209f46650c8097196fec67f00c"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}