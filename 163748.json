{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n      final String from = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      final String to = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      \n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["677081274af275e5542f60ea1611826c49f04213"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n      final String from = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      final String to = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      \n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"677081274af275e5542f60ea1611826c49f04213","date":1505842785,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","sourceNew":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n\n      String from = null;\n      String to = null;\n      for (;;) {\n        if (noJoin) break;\n        from = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        to = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        // HACK: joined numeric point fields need docValues.. for now just skip _is fields if we are dealing with points.\n        if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP) && (from.endsWith(\"_is\") || to.endsWith(\"_is\")))\n        {\n            continue;\n        }\n        break;\n      }\n\n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","sourceOld":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n      final String from = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      final String to = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      \n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","bugFix":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","sourceNew":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n\n      String from = null;\n      String to = null;\n      for (;;) {\n        if (noJoin) break;\n        from = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        to = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        // HACK: joined numeric point fields need docValues.. for now just skip _is fields if we are dealing with points.\n        if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP) && (from.endsWith(\"_is\") || to.endsWith(\"_is\")))\n        {\n            continue;\n        }\n        break;\n      }\n\n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","sourceOld":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n      final String from = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      final String to = noJoin ? null : field(suffixes, random().nextInt(MAX_FIELD_NUM));\n      \n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#buildRandomDomain().mjava","sourceNew":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n\n      String from = null;\n      String to = null;\n      for (;;) {\n        if (noJoin) break;\n        from = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        to = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        // HACK: joined numeric point fields need docValues.. for now just skip _is fields if we are dealing with points.\n        if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP) && (from.endsWith(\"_is\") || to.endsWith(\"_is\")))\n        {\n            continue;\n        }\n        break;\n      }\n\n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","sourceOld":"    /**\n     * Factory method for creating a random domain change to use with a facet - may return an 'noop' JoinDomain,\n     * but will never return null.\n     */\n    public static JoinDomain buildRandomDomain() { \n\n      // use consistent type on both sides of join\n      final String[] suffixes = random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES;\n      \n      final boolean noJoin = random().nextBoolean();\n\n      String from = null;\n      String to = null;\n      for (;;) {\n        if (noJoin) break;\n        from = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        to = field(suffixes, random().nextInt(MAX_FIELD_NUM));\n        // HACK: joined numeric point fields need docValues.. for now just skip _is fields if we are dealing with points.\n        if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP) && (from.endsWith(\"_is\") || to.endsWith(\"_is\")))\n        {\n            continue;\n        }\n        break;\n      }\n\n      // keep it simple, only filter on string fields - not point of test\n      final String filterField = strfield(random().nextInt(MAX_FIELD_NUM));\n      \n      final String filter = random().nextBoolean() ? null : filterField+\":[* TO *]\";\n      return new JoinDomain(from, to, filter);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["e9017cf144952056066919f1ebc7897ff9bd71b1","677081274af275e5542f60ea1611826c49f04213"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["677081274af275e5542f60ea1611826c49f04213"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"677081274af275e5542f60ea1611826c49f04213":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","677081274af275e5542f60ea1611826c49f04213"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"677081274af275e5542f60ea1611826c49f04213":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","92910727264a23a47b7a6c94b0f75d655537b9ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}