{"path":"solr/core/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","sourceNew":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","sourceOld":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","sourceNew":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","sourceOld":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","sourceNew":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","sourceOld":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","sourceNew":null,"sourceOld":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}