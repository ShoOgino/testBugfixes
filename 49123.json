{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicMultiValuedDouble().mjava","commits":[{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicMultiValuedDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicMultiValuedDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(7.54)));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(27.0)));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(-1.0)));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(0.0)));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(7.0)));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(7.67)));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicMultiValuedDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicMultiValuedDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(7.54)));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(27.0)));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(-1.0)));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(0.0)));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(7.0)));\n    doc.add(new SortedNumericDocValuesField(\"foo\", NumericUtils.doubleToSortableLong(7.67)));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}