{"path":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8","date":1503307834,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8e4fbf51a35a1292b838d83f793794c274932a1","date":1503371298,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cfb93b623c90a38a1a76336168cd05a723222c","date":1511372061,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch.rewrite(searcher));\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42636e627af42002be06d64adc3fd3c765105ff4","date":1511380958,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch.rewrite(searcher));\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, scoreMode, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch.rewrite(searcher));\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch.rewrite(searcher));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, scoreMode, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch.rewrite(searcher));\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final List<Weight> weights = new ArrayList<>(queries.size());\n    for (Query query : queries) {\n      weights.add(searcher.createWeight(query, needsScores, boost));\n    }\n    return new CoveringWeight(this, weights, minimumNumberMatch.rewrite(searcher));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8e4fbf51a35a1292b838d83f793794c274932a1"],"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cfb93b623c90a38a1a76336168cd05a723222c":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"42636e627af42002be06d64adc3fd3c765105ff4":["a8e4fbf51a35a1292b838d83f793794c274932a1","68cfb93b623c90a38a1a76336168cd05a723222c"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["42636e627af42002be06d64adc3fd3c765105ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8"],"417142ff08fda9cf0b72d5133e63097a166c6458":["42636e627af42002be06d64adc3fd3c765105ff4","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8","a8e4fbf51a35a1292b838d83f793794c274932a1"],"68cfb93b623c90a38a1a76336168cd05a723222c":["42636e627af42002be06d64adc3fd3c765105ff4"],"42636e627af42002be06d64adc3fd3c765105ff4":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","68cfb93b623c90a38a1a76336168cd05a723222c","42636e627af42002be06d64adc3fd3c765105ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}