{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#setResourceLimit(String,Object).mjava","commits":[{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#setResourceLimit(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setResourceLimit(String limitName, Object val) {\n    if (!(val instanceof Number)) {\n      try {\n        val = Long.parseLong(String.valueOf(val));\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Unsupported value type (not a number) for limit '\" + limitName + \"': \" + val + \" (\" + val.getClass().getName() + \")\");\n      }\n    }\n    Number value = (Number)val;\n    if (value.longValue() > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"Invalid new value for limit '\" + limitName +\"': \" + value);\n    }\n    switch (limitName) {\n      case SIZE_PARAM:\n        if (value.intValue() > 0) {\n          sizeLimit = value.intValue();\n        } else {\n          sizeLimit = Integer.MAX_VALUE;\n        }\n        break;\n      case MAX_RAM_MB_PARAM:\n        if (value.intValue() > 0) {\n          maxRamBytes = value.intValue() * 1024L * 1024L;\n        } else {\n          maxRamBytes = Long.MAX_VALUE;\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unsupported limit name '\" + limitName + \"'\");\n    }\n    description = generateDescription();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7","date":1565791119,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#setResourceLimit(String,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setResourceLimit(String limitName, Object val) {\n    if (!(val instanceof Number)) {\n      try {\n        val = Long.parseLong(String.valueOf(val));\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Unsupported value type (not a number) for limit '\" + limitName + \"': \" + val + \" (\" + val.getClass().getName() + \")\");\n      }\n    }\n    Number value = (Number)val;\n    if (value.longValue() > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"Invalid new value for limit '\" + limitName +\"': \" + value);\n    }\n    switch (limitName) {\n      case SIZE_PARAM:\n        if (value.intValue() > 0) {\n          sizeLimit = value.intValue();\n        } else {\n          sizeLimit = Integer.MAX_VALUE;\n        }\n        break;\n      case MAX_RAM_MB_PARAM:\n        if (value.intValue() > 0) {\n          maxRamBytes = value.intValue() * 1024L * 1024L;\n        } else {\n          maxRamBytes = Long.MAX_VALUE;\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unsupported limit name '\" + limitName + \"'\");\n    }\n    description = generateDescription();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}