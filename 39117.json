{"path":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","commits":[{"id":"901b27c7f633ab98e138aafb0b9c3ba22aac6b28","date":1408052893,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    System.out.println(s);\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}\");\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    System.out.println(\"Output:\"+s);\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    System.out.println(\"Results:\"+s);\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87e99c34422d54f9b012110d0d3c0406fba05085","date":1408119816,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test null value string:\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    System.out.println(s);\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}\");\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    System.out.println(\"Output:\"+s);\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    System.out.println(\"Results:\"+s);\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n  }\n\n","bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e5054003c9f8d0deb69ab66a92bfc0b064c27a4","date":1414687451,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test null value string:\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    s =  h.query(req(\"q\", \"id:100000\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":0, \\\"docs\\\":[]}\");\n\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test null value string:\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26d51e4b5ed27629c3d8933c24bc8741b4e04412","date":1415225907,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test null value string:\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}\");\n\n    s =  h.query(req(\"q\", \"id:100000\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"numFound\\\":0, \\\"docs\\\":[]}\");\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester city\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n  }\n\n","bugFix":["87e99c34422d54f9b012110d0d3c0406fba05085","901b27c7f633ab98e138aafb0b9c3ba22aac6b28","26d51e4b5ed27629c3d8933c24bc8741b4e04412"],"bugIntro":["24e98791f8207d0adf6998892a9e9eeec5db0f40"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9","date":1454264470,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"stringdv\\\":\\\"\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24e98791f8207d0adf6998892a9e9eeec5db0f40","date":1477795641,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","bugFix":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSortingResponseWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"87e99c34422d54f9b012110d0d3c0406fba05085":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a55bf71f91aeded06b44ad1abea6666ea168b697","bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9"],"24e98791f8207d0adf6998892a9e9eeec5db0f40":["bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["320888923ec13b91f53082558f01f4c9960dd226","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"320888923ec13b91f53082558f01f4c9960dd226":["bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9","24e98791f8207d0adf6998892a9e9eeec5db0f40"],"26d51e4b5ed27629c3d8933c24bc8741b4e04412":["6e5054003c9f8d0deb69ab66a92bfc0b064c27a4"],"bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["24e98791f8207d0adf6998892a9e9eeec5db0f40"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["26d51e4b5ed27629c3d8933c24bc8741b4e04412"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e5054003c9f8d0deb69ab66a92bfc0b064c27a4":["87e99c34422d54f9b012110d0d3c0406fba05085"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"]},"commit2Childs":{"87e99c34422d54f9b012110d0d3c0406fba05085":["6e5054003c9f8d0deb69ab66a92bfc0b064c27a4"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["87e99c34422d54f9b012110d0d3c0406fba05085"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"24e98791f8207d0adf6998892a9e9eeec5db0f40":["320888923ec13b91f53082558f01f4c9960dd226","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"320888923ec13b91f53082558f01f4c9960dd226":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"26d51e4b5ed27629c3d8933c24bc8741b4e04412":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","24e98791f8207d0adf6998892a9e9eeec5db0f40","320888923ec13b91f53082558f01f4c9960dd226"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"6e5054003c9f8d0deb69ab66a92bfc0b064c27a4":["26d51e4b5ed27629c3d8933c24bc8741b4e04412"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}