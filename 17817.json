{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(IndexableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( IndexableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(IndexableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( IndexableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406bc9b8259803aa08a36dff8485f39d0859df51","date":1362272687,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != null)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != null)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != null)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != null)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != null)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != null)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexed())                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != null)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NO)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != DocValuesType.NO)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != null)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != null)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS_ONLY == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NO)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != DocValuesType.NO)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValueType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPayloads())   ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPayloads())   ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(StorableField).mjava","sourceNew":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( IndexableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPayloads())   ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a IndexableField's flags.  \n   */\n  private static String getFieldFlags( StorableField f )\n  {\n    IndexOptions opts = (f == null) ? null : f.fieldType().indexOptions();\n\n    StringBuilder flags = new StringBuilder();\n\n    flags.append( (f != null && f.fieldType().indexOptions() != IndexOptions.NONE)                     ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().tokenized())                   ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().stored())                      ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().docValuesType() != DocValuesType.NONE)        ? FieldFlag.DOC_VALUES.getAbbreviation() : \"-\" );\n    flags.append( (false)                                          ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (f != null && f.fieldType().storeTermVectors())            ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorOffsets())   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPositions()) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().storeTermVectorPayloads())   ? FieldFlag.TERM_VECTOR_PAYLOADS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.fieldType().omitNorms())                  ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n\n    flags.append( (f != null && DOCS == opts ) ?\n        FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n\n    flags.append((f != null && DOCS_AND_FREQS == opts) ?\n        FieldFlag.OMIT_POSITIONS.getAbbreviation() : '-');\n    \n    flags.append((f != null && DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS == opts) ?\n        FieldFlag.STORE_OFFSETS_WITH_POSITIONS.getAbbreviation() : '-');\n\n    flags.append( (f != null && f.getClass().getSimpleName().equals(\"LazyField\")) ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.binaryValue()!=null)                      ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' ); // SchemaField Specific\n    flags.append( (false)                                          ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' ); // SchemaField Specific\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["406bc9b8259803aa08a36dff8485f39d0859df51"],"406bc9b8259803aa08a36dff8485f39d0859df51":["1d028314cced5858683a1bb4741423d0f934257b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["406bc9b8259803aa08a36dff8485f39d0859df51","3184874f7f3aca850248483485b4995343066875"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"]},"commit2Childs":{"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"406bc9b8259803aa08a36dff8485f39d0859df51":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1d028314cced5858683a1bb4741423d0f934257b":["406bc9b8259803aa08a36dff8485f39d0859df51"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}