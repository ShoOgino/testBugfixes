{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","commits":[{"id":"3642a1e71318f071e91df80740f6a5a853db1935","date":1454336117,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddFieldMatchingExistingDynamicField().mjava","sourceNew":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","sourceOld":"  public void testAddFieldMatchingExistingDynamicField() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    String newFieldName = \"attr_non_dynamic\";\n\n    Map map = getObj(harness, newFieldName, \"fields\");\n    assertNull(\"Field '\" + newFieldName + \"' already exists in the schema\", map);\n\n    map = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", map);\n\n    map = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", map);\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'\" + newFieldName + \"',\\n\" +\n        \"                 'type':'boolean',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"Field '\" + newFieldName + \"' is not in the schema\", map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"3642a1e71318f071e91df80740f6a5a853db1935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["3642a1e71318f071e91df80740f6a5a853db1935","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3642a1e71318f071e91df80740f6a5a853db1935"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["3642a1e71318f071e91df80740f6a5a853db1935","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["3642a1e71318f071e91df80740f6a5a853db1935"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"3642a1e71318f071e91df80740f6a5a853db1935":["a52341299179de5479672f7cf518bf4b173f34b3","1e6acbaae7af722f17204ceccf0f7db5753eccf3","936cdd5882761db3b844afd6f84ab81cbb011a75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3642a1e71318f071e91df80740f6a5a853db1935","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}