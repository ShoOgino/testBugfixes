{"path":"src/java/org/apache/lucene/analysis/NullTokenizer#next().mjava","commits":[{"id":"a36e5fc6b39329bd08caaf6065552fe3535ae743","date":1011235762,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NullTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"  public final Token next() throws java.io.IOException {\n    int length = 0;\n    int start = offset;\n    while (true) {\n      final char c;\n\n      offset++;\n      if (bufferIndex >= dataLen) {\n        dataLen = input.read(ioBuffer);\n        bufferIndex = 0;\n      };\n      if (dataLen == -1) {\n\tif (length > 0)\n\t  break;\n\telse\n\t  return null;\n      }\n      else\n        c = (char) ioBuffer[bufferIndex++];\n      \n      if (Character.isWhitespace(c)) {\n        if (length > 0)\n          break;\n        else\n          continue;\n      }\n\n      if (length == 0)\t\t\t  // start of token\n        start = offset-1;\n\n      buffer[length++] = c;\n                                                  // buffer it\n      if (length == MAX_WORD_LEN)\t\t  // buffer overflow!\n        break;\n    }\n\n    return new Token(new String(buffer, 0, length), start, start+length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba388d9c5138e103816965577c37f8466bacce4b","date":1011898972,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/NullTokenizer#next().mjava","sourceNew":null,"sourceOld":"  public final Token next() throws java.io.IOException {\n    int length = 0;\n    int start = offset;\n    while (true) {\n      final char c;\n\n      offset++;\n      if (bufferIndex >= dataLen) {\n        dataLen = input.read(ioBuffer);\n        bufferIndex = 0;\n      };\n      if (dataLen == -1) {\n\tif (length > 0)\n\t  break;\n\telse\n\t  return null;\n      }\n      else\n        c = (char) ioBuffer[bufferIndex++];\n      \n      if (Character.isWhitespace(c)) {\n        if (length > 0)\n          break;\n        else\n          continue;\n      }\n\n      if (length == 0)\t\t\t  // start of token\n        start = offset-1;\n\n      buffer[length++] = c;\n                                                  // buffer it\n      if (length == MAX_WORD_LEN)\t\t  // buffer overflow!\n        break;\n    }\n\n    return new Token(new String(buffer, 0, length), start, start+length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba388d9c5138e103816965577c37f8466bacce4b":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba388d9c5138e103816965577c37f8466bacce4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["ba388d9c5138e103816965577c37f8466bacce4b"],"ba388d9c5138e103816965577c37f8466bacce4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}