{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || Arrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || FutureArrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#split(byte[],byte[]).mjava","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<config.numIndexDims;dim++) {\n      NumericUtils.subtract(config.bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || Arrays.compareUnsigned(scratchDiff, 0, config.bytesPerDim, scratch1, 0, config.bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, config.bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numIndexDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || Arrays.compareUnsigned(scratchDiff, 0, bytesPerDim, scratch1, 0, bytesPerDim) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["41f60ea1802fda42d3c91d023406066d00ddb5f8","9856095f7afb5a607bf5e65077615ed91273508c"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}