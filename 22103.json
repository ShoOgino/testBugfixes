{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}