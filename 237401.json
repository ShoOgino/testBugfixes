{"path":"modules/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testDefaultSettings().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testDefaultSettings().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultSettings() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    assertNotNull(\"Missing default category list\", dfip\n        .getAllCategoryListParams());\n    assertEquals(\n        \"all categories have the same CategoryListParams by default\",\n        dfip.getCategoryListParams(null), dfip\n            .getCategoryListParams(new CategoryPath(\"a\")));\n    assertEquals(\n        \"Expected default category list term is $facets:$fulltree$\",\n        new Term(\"$facets\", \"$fulltree$\"), dfip.getCategoryListParams(\n            null).getTerm());\n    String expectedDDText = \"a\"\n        + dfip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\",\n        expectedDDText), DrillDown.term(dfip,cp));\n    char[] buf = new char[20];\n    int numchars = dfip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(\n        buf, 0, numchars));\n    CategoryListParams clParams = dfip.getCategoryListParams(null);\n    assertEquals(\"partition for all ordinals is the first\", \"$fulltree$\", \n        PartitionsUtils.partitionNameByOrdinal(dfip, clParams , 250));\n    assertEquals(\"for partition 0, the same name should be returned\",\n        \"$fulltree$\", PartitionsUtils.partitionName(clParams, 0));\n    assertEquals(\n        \"for any other, it's the concatenation of name + partition\",\n        \"$fulltree$1\", PartitionsUtils.partitionName(clParams, 1));\n    assertEquals(\"default partition number is always 0\", 0, \n        PartitionsUtils.partitionNumber(dfip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE,\n        dfip.getPartitionSize());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testDefaultSettings().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultSettings() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    assertNotNull(\"Missing default category list\", dfip\n        .getAllCategoryListParams());\n    assertEquals(\n        \"all categories have the same CategoryListParams by default\",\n        dfip.getCategoryListParams(null), dfip\n            .getCategoryListParams(new CategoryPath(\"a\")));\n    assertEquals(\n        \"Expected default category list term is $facets:$fulltree$\",\n        new Term(\"$facets\", \"$fulltree$\"), dfip.getCategoryListParams(\n            null).getTerm());\n    String expectedDDText = \"a\"\n        + dfip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\",\n        expectedDDText), DrillDown.term(dfip,cp));\n    char[] buf = new char[20];\n    int numchars = dfip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(\n        buf, 0, numchars));\n    CategoryListParams clParams = dfip.getCategoryListParams(null);\n    assertEquals(\"partition for all ordinals is the first\", \"$fulltree$\", \n        PartitionsUtils.partitionNameByOrdinal(dfip, clParams , 250));\n    assertEquals(\"for partition 0, the same name should be returned\",\n        \"$fulltree$\", PartitionsUtils.partitionName(clParams, 0));\n    assertEquals(\n        \"for any other, it's the concatenation of name + partition\",\n        \"$fulltree$1\", PartitionsUtils.partitionName(clParams, 1));\n    assertEquals(\"default partition number is always 0\", 0, \n        PartitionsUtils.partitionNumber(dfip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE,\n        dfip.getPartitionSize());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testDefaultSettings().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultSettings() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    assertNotNull(\"Missing default category list\", dfip\n        .getAllCategoryListParams());\n    assertEquals(\n        \"all categories have the same CategoryListParams by default\",\n        dfip.getCategoryListParams(null), dfip\n            .getCategoryListParams(new CategoryPath(\"a\")));\n    assertEquals(\n        \"Expected default category list term is $facets:$fulltree$\",\n        new Term(\"$facets\", \"$fulltree$\"), dfip.getCategoryListParams(\n            null).getTerm());\n    String expectedDDText = \"a\"\n        + dfip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\",\n        expectedDDText), DrillDown.term(dfip,cp));\n    char[] buf = new char[20];\n    int numchars = dfip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(\n        buf, 0, numchars));\n    CategoryListParams clParams = dfip.getCategoryListParams(null);\n    assertEquals(\"partition for all ordinals is the first\", \"$fulltree$\", \n        PartitionsUtils.partitionNameByOrdinal(dfip, clParams , 250));\n    assertEquals(\"for partition 0, the same name should be returned\",\n        \"$fulltree$\", PartitionsUtils.partitionName(clParams, 0));\n    assertEquals(\n        \"for any other, it's the concatenation of name + partition\",\n        \"$fulltree$1\", PartitionsUtils.partitionName(clParams, 1));\n    assertEquals(\"default partition number is always 0\", 0, \n        PartitionsUtils.partitionNumber(dfip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE,\n        dfip.getPartitionSize());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testDefaultSettings().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testDefaultSettings().mjava","sourceNew":"  @Test\n  public void testDefaultSettings() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    assertNotNull(\"Missing default category list\", dfip\n        .getAllCategoryListParams());\n    assertEquals(\n        \"all categories have the same CategoryListParams by default\",\n        dfip.getCategoryListParams(null), dfip\n            .getCategoryListParams(new CategoryPath(\"a\")));\n    assertEquals(\n        \"Expected default category list term is $facets:$fulltree$\",\n        new Term(\"$facets\", \"$fulltree$\"), dfip.getCategoryListParams(\n            null).getTerm());\n    String expectedDDText = \"a\"\n        + dfip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\",\n        expectedDDText), DrillDown.term(dfip,cp));\n    char[] buf = new char[20];\n    int numchars = dfip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(\n        buf, 0, numchars));\n    CategoryListParams clParams = dfip.getCategoryListParams(null);\n    assertEquals(\"partition for all ordinals is the first\", \"$fulltree$\", \n        PartitionsUtils.partitionNameByOrdinal(dfip, clParams , 250));\n    assertEquals(\"for partition 0, the same name should be returned\",\n        \"$fulltree$\", PartitionsUtils.partitionName(clParams, 0));\n    assertEquals(\n        \"for any other, it's the concatenation of name + partition\",\n        \"$fulltree$1\", PartitionsUtils.partitionName(clParams, 1));\n    assertEquals(\"default partition number is always 0\", 0, \n        PartitionsUtils.partitionNumber(dfip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE,\n        dfip.getPartitionSize());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSettings() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    assertNotNull(\"Missing default category list\", dfip\n        .getAllCategoryListParams());\n    assertEquals(\n        \"all categories have the same CategoryListParams by default\",\n        dfip.getCategoryListParams(null), dfip\n            .getCategoryListParams(new CategoryPath(\"a\")));\n    assertEquals(\n        \"Expected default category list term is $facets:$fulltree$\",\n        new Term(\"$facets\", \"$fulltree$\"), dfip.getCategoryListParams(\n            null).getTerm());\n    String expectedDDText = \"a\"\n        + dfip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\",\n        expectedDDText), DrillDown.term(dfip,cp));\n    char[] buf = new char[20];\n    int numchars = dfip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(\n        buf, 0, numchars));\n    CategoryListParams clParams = dfip.getCategoryListParams(null);\n    assertEquals(\"partition for all ordinals is the first\", \"$fulltree$\", \n        PartitionsUtils.partitionNameByOrdinal(dfip, clParams , 250));\n    assertEquals(\"for partition 0, the same name should be returned\",\n        \"$fulltree$\", PartitionsUtils.partitionName(clParams, 0));\n    assertEquals(\n        \"for any other, it's the concatenation of name + partition\",\n        \"$fulltree$1\", PartitionsUtils.partitionName(clParams, 1));\n    assertEquals(\"default partition number is always 0\", 0, \n        PartitionsUtils.partitionNumber(dfip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE,\n        dfip.getPartitionSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}