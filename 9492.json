{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n          lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n          lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","sourceNew":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = ArrayUtil.growExact(startOffsetsBuf, newLength);\n          lengthsBuf = ArrayUtil.growExact(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","sourceOld":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n          lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","sourceNew":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = ArrayUtil.growExact(startOffsetsBuf, newLength);\n          lengthsBuf = ArrayUtil.growExact(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","sourceOld":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n          lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.FieldData#addPosition(int,int,int,int).mjava","sourceNew":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = ArrayUtil.growExact(startOffsetsBuf, newLength);\n          lengthsBuf = ArrayUtil.growExact(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","sourceOld":"    void addPosition(int position, int startOffset, int length, int payloadLength) {\n      if (hasPositions) {\n        if (posStart + totalPositions == positionsBuf.length) {\n          positionsBuf = ArrayUtil.grow(positionsBuf);\n        }\n        positionsBuf[posStart + totalPositions] = position;\n      }\n      if (hasOffsets) {\n        if (offStart + totalPositions == startOffsetsBuf.length) {\n          final int newLength = ArrayUtil.oversize(offStart + totalPositions, 4);\n          startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n          lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n        }\n        startOffsetsBuf[offStart + totalPositions] = startOffset;\n        lengthsBuf[offStart + totalPositions] = length;\n      }\n      if (hasPayloads) {\n        if (payStart + totalPositions == payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf);\n        }\n        payloadLengthsBuf[payStart + totalPositions] = payloadLength;\n      }\n      ++totalPositions;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["eda61b1e90b490cc5837200e04c02639a0d272c7","9798d0818e7a880546802b509792d3f3d57babd2"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"9798d0818e7a880546802b509792d3f3d57babd2":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["eda61b1e90b490cc5837200e04c02639a0d272c7","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["b70042a8a492f7054d480ccdd2be9796510d4327","07155cdd910937cdf6877e48884d5782845c8b8b","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}