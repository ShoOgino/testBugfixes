{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setStartOffset(savedStart);\n        offsetAtt.setEndOffset(savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setStartOffset(savedStart);\n            offsetAtt.setEndOffset(savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10855b393afd8884613d82de3a4fff773d4e5334","date":1240953458,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setStartOffset(savedStart);\n        offsetAtt.setEndOffset(savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setStartOffset(savedStart);\n            offsetAtt.setEndOffset(savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["10855b393afd8884613d82de3a4fff773d4e5334"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10855b393afd8884613d82de3a4fff773d4e5334":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["360d15dc189fb48153cb62234f7d20819e4e292e"],"360d15dc189fb48153cb62234f7d20819e4e292e":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["360d15dc189fb48153cb62234f7d20819e4e292e"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["10855b393afd8884613d82de3a4fff773d4e5334"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"10855b393afd8884613d82de3a4fff773d4e5334":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"360d15dc189fb48153cb62234f7d20819e4e292e":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}