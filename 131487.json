{"path":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field, final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              result = values.longValue();\n            } else {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field, final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              result = values.longValue();\n            } else {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field, final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field, final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              result = values.longValue();\n            } else {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field,\n      final NormsProducer normsProducer, final int maxDoc, boolean missingAsZero) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else if (missingAsZero) {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            } else {\n              result = null;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field, final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int,boolean).mjava","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field,\n      final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else {\n              // Unlike NumericDocValues, norms used to return 0 for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field,\n      final NormsProducer normsProducer, final int maxDoc, boolean missingAsZero) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else if (missingAsZero) {\n              // Unlike NumericDocValues, norms should return for missing values:\n              result = 0;\n            } else {\n              result = null;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field,\n      final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else {\n              // Unlike NumericDocValues, norms used to return 0 for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"701377879d61cf6e2de072d11c76089338c0c3b2","date":1542374674,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/LegacyDocValuesIterables#normsIterable(FieldInfo,NormsProducer,int).mjava","sourceNew":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field,\n      final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else {\n              // Unlike NumericDocValues, norms used to return 0 for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Converts norms into {@code Iterable&lt;Number&gt;}.\n   *\n   * @deprecated Consume {@link NumericDocValues} instead. */\n  @Deprecated\n  public static Iterable<Number> normsIterable(final FieldInfo field,\n      final NormsProducer normsProducer, final int maxDoc) {\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n\n        final NumericDocValues values;\n        try {\n          values = normsProducer.getNorms(field);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n    \n        return new Iterator<Number>() {\n          private int docIDUpto = -1;\n\n          @Override\n          public boolean hasNext() {\n            return docIDUpto+1 < maxDoc;\n          }\n\n          @Override\n          public Number next() {\n            docIDUpto++;\n            if (docIDUpto > values.docID()) {\n              try {\n                values.nextDoc();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            Number result;\n            if (docIDUpto == values.docID()) {\n              try {\n                result = values.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            } else {\n              // Unlike NumericDocValues, norms used to return 0 for missing values:\n              result = 0;\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["5d217880fb207e1a26143863d06cf461c7cabeec"],"f7558b5077dd4abd457be151475f13b541f4f13e":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"701377879d61cf6e2de072d11c76089338c0c3b2":["f7558b5077dd4abd457be151475f13b541f4f13e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["701377879d61cf6e2de072d11c76089338c0c3b2"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["f7558b5077dd4abd457be151475f13b541f4f13e"],"f7558b5077dd4abd457be151475f13b541f4f13e":["701377879d61cf6e2de072d11c76089338c0c3b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5d217880fb207e1a26143863d06cf461c7cabeec":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"701377879d61cf6e2de072d11c76089338c0c3b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}