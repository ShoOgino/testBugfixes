{"path":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,BytesRefIterator).mjava","sourceNew":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","sourceOld":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, BytesRefIterator packedPoints) throws IOException {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,BytesRefIterator).mjava","sourceNew":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","sourceOld":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, BytesRefIterator packedPoints) throws IOException {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,BytesRefIterator).mjava","sourceNew":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","sourceOld":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, BytesRefIterator packedPoints) throws IOException {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","sourceNew":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n    ramBytesUsed = BASE_RAM_BYTES +\n        RamUsageEstimator.sizeOfObject(field) +\n        RamUsageEstimator.sizeOfObject(sortedPackedPoints);\n\n  }\n\n","sourceOld":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#PointInSetQuery(String,int,int,Stream).mjava","sourceNew":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_INDEX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_INDEX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n    ramBytesUsed = BASE_RAM_BYTES +\n        RamUsageEstimator.sizeOfObject(field) +\n        RamUsageEstimator.sizeOfObject(sortedPackedPoints);\n\n  }\n\n","sourceOld":"  /** The {@code packedPoints} iterator must be in sorted order. */\n  protected PointInSetQuery(String field, int numDims, int bytesPerDim, Stream packedPoints) {\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n    if (numDims < 1 || numDims > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"numDims must be > 0 and <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + numDims);\n    }\n\n    this.numDims = numDims;\n\n    // In the 1D case this works well (the more points, the more common prefixes they share, typically), but in\n    // the > 1 D case, where we are only looking at the first dimension's prefix bytes, it can at worst not hurt:\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != numDims * bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (numDims * bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\" numDims=\" + numDims + \" bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          continue; // deduplicate\n        } else if (cmp > 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n    ramBytesUsed = BASE_RAM_BYTES +\n        RamUsageEstimator.sizeOfObject(field) +\n        RamUsageEstimator.sizeOfObject(sortedPackedPoints);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe90d104db258964b96e50418b9caa0c156eafda":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["fe90d104db258964b96e50418b9caa0c156eafda"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"fe90d104db258964b96e50418b9caa0c156eafda":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["fe90d104db258964b96e50418b9caa0c156eafda"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}