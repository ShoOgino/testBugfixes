{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    actionConstructorCalled = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    actionConstructorCalled = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ab0445fe9d78a70b3c3eaff9a9c07f31dbe019","date":1522683909,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    actionConstructorCalled = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":["c32a8448145a74a8902798f2e63e322827757ff2"],"bugIntro":["98d4af357762468d37df7424f81785cd89b49a7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":["98d4af357762468d37df7424f81785cd89b49a7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b24bcdb857500b77d7e9d7640fb1b845ccf6771","date":1548757348,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5209c77678bee610386880387a4cd239741c4549","date":1554771969,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":["98d4af357762468d37df7424f81785cd89b49a7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d4af357762468d37df7424f81785cd89b49a7b","date":1570534862,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    AtomicBoolean markerInactive = new AtomicBoolean();\n    try {\n      timeout.waitFor(\"nodeLost marker to get inactive\", () -> {\n        try {\n          if (!zkClient().exists(pathLost, true)) {\n            throw new RuntimeException(\"marker \" + pathLost + \" should exist!\");\n          }\n          Map<String, Object> markerData = Utils.getJson(zkClient(), pathLost, true);\n          markerInactive.set(markerData.getOrDefault(MARKER_STATE, MARKER_ACTIVE).equals(MARKER_INACTIVE));\n          return markerInactive.get();\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that the marker is inactive - the new overseer should deactivate markers once they are processed\n    assertTrue(\"Marker \" + pathLost + \" still active!\", markerInactive.get());\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","c32a8448145a74a8902798f2e63e322827757ff2","f7fb1186f5b61e0b74289e6786df8cbecfa471bc","5209c77678bee610386880387a4cd239741c4549"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    AtomicBoolean markerInactive = new AtomicBoolean();\n    try {\n      timeout.waitFor(\"nodeLost marker to get inactive\", () -> {\n        try {\n          if (!zkClient().exists(pathLost, true)) {\n            throw new RuntimeException(\"marker \" + pathLost + \" should exist!\");\n          }\n          Map<String, Object> markerData = Utils.getJson(zkClient(), pathLost, true);\n          markerInactive.set(markerData.getOrDefault(MARKER_STATE, MARKER_ACTIVE).equals(MARKER_INACTIVE));\n          return markerInactive.get();\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that the marker is inactive - the new overseer should deactivate markers once they are processed\n    assertTrue(\"Marker \" + pathLost + \" still active!\", markerInactive.get());\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    try {\n      timeout.waitFor(\"zk path to go away\", () -> {\n        try {\n          return !zkClient().exists(pathLost, true);\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that a znode does NOT exist - the new overseer cleaned up existing nodeLost markers\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    AtomicBoolean markerInactive = new AtomicBoolean();\n    try {\n      timeout.waitFor(\"nodeLost marker to get inactive\", () -> {\n        try {\n          if (!zkClient().exists(pathLost, true)) {\n            throw new RuntimeException(\"marker \" + pathLost + \" should exist!\");\n          }\n          Map<String, Object> markerData = Utils.getJson(zkClient(), pathLost, true);\n          markerInactive.set(markerData.getOrDefault(MARKER_STATE, MARKER_ACTIVE).equals(MARKER_INACTIVE));\n          return markerInactive.get();\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that the marker is inactive - the new overseer should deactivate markers once they are processed\n    assertTrue(\"Marker \" + pathLost + \" still active!\", markerInactive.get());\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    AtomicBoolean markerInactive = new AtomicBoolean();\n    try {\n      timeout.waitFor(\"nodeLost marker to get inactive\", () -> {\n        try {\n          if (!zkClient().exists(pathLost, true)) {\n            throw new RuntimeException(\"marker \" + pathLost + \" should exist!\");\n          }\n          Map<String, Object> markerData = Utils.getJson(zkClient(), pathLost, true);\n          markerInactive.set(markerData.getOrDefault(MARKER_STATE, MARKER_ACTIVE).equals(MARKER_INACTIVE));\n          return markerInactive.get();\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that the marker is inactive - the new overseer should deactivate markers once they are processed\n    assertTrue(\"Marker \" + pathLost + \" still active!\", markerInactive.get());\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","sourceNew":null,"sourceOld":"  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13376\")\n  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a nodes\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertTrue(listener.addedNodes.toString(), listener.addedNodes.contains(node.getNodeName()));\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    String newOverseerLeader;\n    do {\n      overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n      newOverseerLeader = (String) overSeerStatus.get(\"leader\");\n    } while (newOverseerLeader == null || newOverseerLeader.equals(overseerLeader));\n    \n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    \n    \n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    AtomicBoolean markerInactive = new AtomicBoolean();\n    try {\n      timeout.waitFor(\"nodeLost marker to get inactive\", () -> {\n        try {\n          if (!zkClient().exists(pathLost, true)) {\n            throw new RuntimeException(\"marker \" + pathLost + \" should exist!\");\n          }\n          Map<String, Object> markerData = Utils.getJson(zkClient(), pathLost, true);\n          markerInactive.set(markerData.getOrDefault(MARKER_STATE, MARKER_ACTIVE).equals(MARKER_INACTIVE));\n          return markerInactive.get();\n        } catch (KeeperException e) {\n          throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n          return false;\n        }\n      });\n    } catch (TimeoutException e) {\n      // okay\n    }\n\n    // verify that the marker is inactive - the new overseer should deactivate markers once they are processed\n    assertTrue(\"Marker \" + pathLost + \" still active!\", markerInactive.get());\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListener = \"{\\n\" +\n        \"  \\\"set-listener\\\" : {\\n\" +\n        \"    \\\"name\\\" : \\\"listener_node_added_triggerMR\\\",\\n\" +\n        \"    \\\"trigger\\\" : \\\"node_added_triggerMR\\\",\\n\" +\n        \"    \\\"stage\\\" : \\\"STARTED\\\",\\n\" +\n        \"    \\\"class\\\" : \\\"\" + AssertingListener.class.getName()  + \"\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListener);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // kill this node\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n\n    String node1Name = node1.getNodeName();\n    cluster.stopJettySolrRunner(node1);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(node1Name, listener.lostNodes.iterator().next());\n    // verify that a znode exists\n    String pathLost2 = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + node1Name;\n    assertTrue(\"Path \" + pathLost2 + \" wasn't created\", zkClient().exists(pathLost2, true));\n\n    listenerEventLatch.countDown(); // let the trigger thread continue\n\n    assertTrue(triggerFiredLatch.await(10, TimeUnit.SECONDS));\n\n    // triggers don't remove markers\n    assertTrue(\"Path \" + pathLost2 + \" should still exist\", zkClient().exists(pathLost2, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b24bcdb857500b77d7e9d7640fb1b845ccf6771":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b2ab0445fe9d78a70b3c3eaff9a9c07f31dbe019"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["98d4af357762468d37df7424f81785cd89b49a7b"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98d4af357762468d37df7424f81785cd89b49a7b":["5209c77678bee610386880387a4cd239741c4549"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"5209c77678bee610386880387a4cd239741c4549":["3b24bcdb857500b77d7e9d7640fb1b845ccf6771"],"b2ab0445fe9d78a70b3c3eaff9a9c07f31dbe019":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["5209c77678bee610386880387a4cd239741c4549","98d4af357762468d37df7424f81785cd89b49a7b"]},"commit2Childs":{"3b24bcdb857500b77d7e9d7640fb1b845ccf6771":["5209c77678bee610386880387a4cd239741c4549"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["3b24bcdb857500b77d7e9d7640fb1b845ccf6771"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"98d4af357762468d37df7424f81785cd89b49a7b":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["b2ab0445fe9d78a70b3c3eaff9a9c07f31dbe019"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"b2ab0445fe9d78a70b3c3eaff9a9c07f31dbe019":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5209c77678bee610386880387a4cd239741c4549":["98d4af357762468d37df7424f81785cd89b49a7b","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}