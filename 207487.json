{"path":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownAndAwaitTerminationWithInterrupt(ExecutorService).mjava","commits":[{"id":"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d","date":1440987729,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownAndAwaitTerminationWithInterrupt(ExecutorService).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownAndAwaitTerminationWithInterrupt(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    boolean shutdown = false;\n    boolean interrupted = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown && !interrupted) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n        interrupted = true;\n      }\n    }\n  }\n\n","sourceOld":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks  - NOTE: this interrupts!\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(1, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownAndAwaitTerminationWithInterrupt(ExecutorService).mjava","sourceNew":null,"sourceOld":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownAndAwaitTerminationWithInterrupt(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    boolean shutdown = false;\n    boolean interrupted = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown && !interrupted) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n        interrupted = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownAndAwaitTerminationWithInterrupt(ExecutorService).mjava","sourceNew":null,"sourceOld":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownAndAwaitTerminationWithInterrupt(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    boolean shutdown = false;\n    boolean interrupted = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown && !interrupted) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n        interrupted = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownAndAwaitTerminationWithInterrupt(ExecutorService).mjava","sourceNew":null,"sourceOld":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownAndAwaitTerminationWithInterrupt(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    boolean shutdown = false;\n    boolean interrupted = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown && !interrupted) {\n        pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n        interrupted = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}