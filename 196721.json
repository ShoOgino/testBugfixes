{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory: \"info.dir=\" + info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory: \"info.dir=\" + info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}