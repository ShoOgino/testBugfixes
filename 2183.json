{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","commits":[{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal */\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    //return collectionAliasListMap.getOrDefault(aliasName, Collections.singletonList(aliasName));\n    // TODO deprecate and remove this dubious feature?\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    List<String> result = new ArrayList<>(level1.size());\n    for (String level1Alias : level1) {\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null) {\n        result.add(level1Alias);\n      } else {\n        result.addAll(level2);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","sourceNew":"  /** @lucene.internal */\n  @SuppressWarnings(\"JavaDoc\")\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    //return collectionAliasListMap.getOrDefault(aliasName, Collections.singletonList(aliasName));\n    // TODO deprecate and remove this dubious feature?\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    List<String> result = new ArrayList<>(level1.size());\n    for (String level1Alias : level1) {\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null) {\n        result.add(level1Alias);\n      } else {\n        result.addAll(level2);\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    //return collectionAliasListMap.getOrDefault(aliasName, Collections.singletonList(aliasName));\n    // TODO deprecate and remove this dubious feature?\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    List<String> result = new ArrayList<>(level1.size());\n    for (String level1Alias : level1) {\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null) {\n        result.add(level1Alias);\n      } else {\n        result.addAll(level2);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","sourceNew":"  /** @lucene.internal */\n  @SuppressWarnings(\"JavaDoc\")\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    // avoid allocating objects if possible\n    LinkedHashSet<String> uniqueResult = null;\n    for (int i = 0; i < level1.size(); i++) {\n      String level1Alias = level1.get(i);\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null && uniqueResult != null) {\n        uniqueResult.add(level1Alias);\n      } else {\n        if (uniqueResult == null) { // lazy init\n          uniqueResult = new LinkedHashSet<>(level1.size());\n          uniqueResult.addAll(level1.subList(0, i));\n        }\n        uniqueResult.addAll(level2);\n      }\n    }\n    if (uniqueResult == null) {\n      return level1;\n    } else {\n      return Collections.unmodifiableList(new ArrayList<>(uniqueResult));\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  @SuppressWarnings(\"JavaDoc\")\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    //return collectionAliasListMap.getOrDefault(aliasName, Collections.singletonList(aliasName));\n    // TODO deprecate and remove this dubious feature?\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    List<String> result = new ArrayList<>(level1.size());\n    for (String level1Alias : level1) {\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null) {\n        result.add(level1Alias);\n      } else {\n        result.addAll(level2);\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e5eb1137994855cee975febe08850fcb7726d3","date":1558358375,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#resolveAliasesGivenAliasMap(Map[String,List[String]],String).mjava","sourceNew":"  /** @lucene.internal */\n  @SuppressWarnings(\"JavaDoc\")\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    // avoid allocating objects if possible\n    LinkedHashSet<String> uniqueResult = null;\n    for (int i = 0; i < level1.size(); i++) {\n      String level1Alias = level1.get(i);\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null) {\n        // will copy all level1alias-es so far on lazy init\n        if (uniqueResult != null) {\n          uniqueResult.add(level1Alias);\n        }\n      } else {\n        if (uniqueResult == null) { // lazy init\n          uniqueResult = new LinkedHashSet<>(level1.size());\n          // add all level1Alias-es so far\n          uniqueResult.addAll(level1.subList(0, i));\n        }\n        uniqueResult.addAll(level2);\n      }\n    }\n    if (uniqueResult == null) {\n      return level1;\n    } else {\n      return Collections.unmodifiableList(new ArrayList<>(uniqueResult));\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  @SuppressWarnings(\"JavaDoc\")\n  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {\n    // Due to another level of indirection, this is more complicated...\n    List<String> level1 = collectionAliasListMap.get(aliasName);\n    if (level1 == null) {\n      return Collections.singletonList(aliasName);// is a collection\n    }\n    // avoid allocating objects if possible\n    LinkedHashSet<String> uniqueResult = null;\n    for (int i = 0; i < level1.size(); i++) {\n      String level1Alias = level1.get(i);\n      List<String> level2 = collectionAliasListMap.get(level1Alias);\n      if (level2 == null && uniqueResult != null) {\n        uniqueResult.add(level1Alias);\n      } else {\n        if (uniqueResult == null) { // lazy init\n          uniqueResult = new LinkedHashSet<>(level1.size());\n          uniqueResult.addAll(level1.subList(0, i));\n        }\n        uniqueResult.addAll(level2);\n      }\n    }\n    if (uniqueResult == null) {\n      return level1;\n    } else {\n      return Collections.unmodifiableList(new ArrayList<>(uniqueResult));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"215e40821821b2df2e69355e208532c05ef095a5":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["215e40821821b2df2e69355e208532c05ef095a5"],"b6e5eb1137994855cee975febe08850fcb7726d3":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6e5eb1137994855cee975febe08850fcb7726d3"]},"commit2Childs":{"215e40821821b2df2e69355e208532c05ef095a5":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["215e40821821b2df2e69355e208532c05ef095a5"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["b6e5eb1137994855cee975febe08850fcb7726d3"],"b6e5eb1137994855cee975febe08850fcb7726d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}