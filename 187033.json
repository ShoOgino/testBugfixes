{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ValueSourceCollapse#ValueSourceCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,FunctionQuery).mjava","commits":[{"id":"51e87f816b84771636e67fc67039925030ebe671","date":1388500548,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ValueSourceCollapse#ValueSourceCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,FunctionQuery).mjava","pathOld":"/dev/null","sourceNew":"    public ValueSourceCollapse(int maxDoc,\n                               String funcStr,\n                               int nullPolicy,\n                               int[] ords,\n                               boolean max,\n                               boolean needsScores,\n                               IntOpenHashSet boostDocs,\n                               FunctionQuery funcQuery) throws IOException {\n      super(maxDoc, null, nullPolicy, max, needsScores, boostDocs);\n      this.valueSource = funcQuery.getValueSource();\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(funcStr.indexOf(\"cscore()\") != -1) {\n        this.cscore = true;\n        this.rcontext.put(\"CSCORE\",this.collapseScore);\n      }\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"224952d10f823935a2a836d4072cb5bd6ac33e3e","date":1392068030,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ValueSourceCollapse#ValueSourceCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ValueSourceCollapse#ValueSourceCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,FunctionQuery).mjava","sourceNew":"    public ValueSourceCollapse(int maxDoc,\n                               String funcStr,\n                               int nullPolicy,\n                               int[] ords,\n                               boolean max,\n                               boolean needsScores,\n                               IntOpenHashSet boostDocs,\n                               FunctionQuery funcQuery, IndexSearcher searcher) throws IOException {\n      super(maxDoc, null, nullPolicy, max, needsScores, boostDocs);\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(funcStr.indexOf(\"cscore()\") != -1) {\n        this.cscore = true;\n        this.rcontext.put(\"CSCORE\",this.collapseScore);\n      }\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public ValueSourceCollapse(int maxDoc,\n                               String funcStr,\n                               int nullPolicy,\n                               int[] ords,\n                               boolean max,\n                               boolean needsScores,\n                               IntOpenHashSet boostDocs,\n                               FunctionQuery funcQuery) throws IOException {\n      super(maxDoc, null, nullPolicy, max, needsScores, boostDocs);\n      this.valueSource = funcQuery.getValueSource();\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(funcStr.indexOf(\"cscore()\") != -1) {\n        this.cscore = true;\n        this.rcontext.put(\"CSCORE\",this.collapseScore);\n      }\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"224952d10f823935a2a836d4072cb5bd6ac33e3e":["51e87f816b84771636e67fc67039925030ebe671"],"51e87f816b84771636e67fc67039925030ebe671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["224952d10f823935a2a836d4072cb5bd6ac33e3e"]},"commit2Childs":{"224952d10f823935a2a836d4072cb5bd6ac33e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51e87f816b84771636e67fc67039925030ebe671":["224952d10f823935a2a836d4072cb5bd6ac33e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51e87f816b84771636e67fc67039925030ebe671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}