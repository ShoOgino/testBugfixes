{"path":"backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}