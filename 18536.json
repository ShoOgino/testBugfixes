{"path":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#stringField(FieldInfo,IndexInput,int).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#stringField(FieldInfo,IndexInput,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n    final FieldSelectorResult accept = selector.accept(fieldInfo.name);\n    switch (accept) {\n    case LOAD:\n    case LOAD_AND_BREAK:\n      final byte[] b = new byte[numUTF8Bytes];\n      in.readBytes(b, 0, b.length);\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      doc.add(new Field(fieldInfo.name, ft, new String(b, \"UTF-8\"))); \n      return accept != FieldSelectorResult.LOAD;\n    case LAZY_LOAD:\n    case LATENT:\n      addFieldLazy(in, fieldInfo, false, accept == FieldSelectorResult.LAZY_LOAD, numUTF8Bytes);\n      return false;\n    case SIZE:\n    case SIZE_AND_BREAK:\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      addFieldSize(fieldInfo, 2*numUTF8Bytes);\n      return accept != FieldSelectorResult.SIZE;\n    default:\n      // skip\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#stringField(FieldInfo,IndexInput,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#stringField(FieldInfo,IndexInput,int).mjava","sourceNew":"  @Override\n  public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n    final FieldSelectorResult accept = selector.accept(fieldInfo.name);\n    switch (accept) {\n    case LOAD:\n    case LOAD_AND_BREAK:\n      final byte[] b = new byte[numUTF8Bytes];\n      in.readBytes(b, 0, b.length);\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      doc.add(new Field(fieldInfo.name, new String(b, \"UTF-8\"), ft));\n      return accept != FieldSelectorResult.LOAD;\n    case LAZY_LOAD:\n    case LATENT:\n      addFieldLazy(in, fieldInfo, false, accept == FieldSelectorResult.LAZY_LOAD, numUTF8Bytes);\n      return false;\n    case SIZE:\n    case SIZE_AND_BREAK:\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      addFieldSize(fieldInfo, 2*numUTF8Bytes);\n      return accept != FieldSelectorResult.SIZE;\n    default:\n      // skip\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n    final FieldSelectorResult accept = selector.accept(fieldInfo.name);\n    switch (accept) {\n    case LOAD:\n    case LOAD_AND_BREAK:\n      final byte[] b = new byte[numUTF8Bytes];\n      in.readBytes(b, 0, b.length);\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      doc.add(new Field(fieldInfo.name, ft, new String(b, \"UTF-8\"))); \n      return accept != FieldSelectorResult.LOAD;\n    case LAZY_LOAD:\n    case LATENT:\n      addFieldLazy(in, fieldInfo, false, accept == FieldSelectorResult.LAZY_LOAD, numUTF8Bytes);\n      return false;\n    case SIZE:\n    case SIZE_AND_BREAK:\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      addFieldSize(fieldInfo, 2*numUTF8Bytes);\n      return accept != FieldSelectorResult.SIZE;\n    default:\n      // skip\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#stringField(FieldInfo,IndexInput,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n    final FieldSelectorResult accept = selector.accept(fieldInfo.name);\n    switch (accept) {\n    case LOAD:\n    case LOAD_AND_BREAK:\n      final byte[] b = new byte[numUTF8Bytes];\n      in.readBytes(b, 0, b.length);\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      doc.add(new Field(fieldInfo.name, new String(b, \"UTF-8\"), ft));\n      return accept != FieldSelectorResult.LOAD;\n    case LAZY_LOAD:\n    case LATENT:\n      addFieldLazy(in, fieldInfo, false, accept == FieldSelectorResult.LAZY_LOAD, numUTF8Bytes);\n      return false;\n    case SIZE:\n    case SIZE_AND_BREAK:\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      addFieldSize(fieldInfo, 2*numUTF8Bytes);\n      return accept != FieldSelectorResult.SIZE;\n    default:\n      // skip\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}