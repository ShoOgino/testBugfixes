{"path":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","commits":[{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"/dev/null","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", Field.Index.ANALYZED);\n    Field field2 = newField(\"bar\", \"\", Field.Index.ANALYZED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"/dev/null","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", Field.Index.ANALYZED);\n    Field field2 = newField(\"bar\", \"\", Field.Index.ANALYZED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", Field.Index.ANALYZED);\n    Field field2 = newField(\"bar\", \"\", Field.Index.ANALYZED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    /* nocommit: fix this to use IW to delete documents\n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n    */\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    /* nocommit: fix this to use IW to delete documents\n    ir = IndexReader.open(dir);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    */\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    /* nocommit: fix this to use IW to delete documents\n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n    */\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b71ea07770e7c3ef7094844aff049e1c1ffa9e10","date":1323133868,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    /* nocommit: fix this to use IW to delete documents\n    ir = IndexReader.open(dir);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    */\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    ir = IndexReader.open(dir, false);\n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      ir.deleteDocument(random.nextInt(ir.maxDoc()));\n    }\n    ir.close();\n    \n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    \n    ir = IndexReader.open(dir, true);\n    assertSumDocFreq(ir);\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#testSumDocFreq().mjava","sourceNew":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSumDocFreq() throws Exception {\n    final int numDocs = atLeast(500);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    \n    Document doc = new Document();\n    Field id = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    Field field1 = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(id);\n    doc.add(field1);\n    doc.add(field2);\n    for (int i = 0; i < numDocs; i++) {\n      id.setValue(\"\" + i);\n      char ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      char ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field1.setValue(\"\" + ch1 + \" \" + ch2);\n      ch1 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      ch2 = (char) _TestUtil.nextInt(random, 'a', 'z');\n      field2.setValue(\"\" + ch1 + \" \" + ch2);\n      writer.addDocument(doc);\n    }\n    \n    IndexReader ir = writer.getReader();\n    \n    assertSumDocFreq(ir);    \n    ir.close();\n    \n    int numDeletions = atLeast(20);\n    for (int i = 0; i < numDeletions; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\" + random.nextInt(numDocs)));\n    }\n    writer.forceMerge(1);\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertSumDocFreq(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b71ea07770e7c3ef7094844aff049e1c1ffa9e10":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","b71ea07770e7c3ef7094844aff049e1c1ffa9e10"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b71ea07770e7c3ef7094844aff049e1c1ffa9e10":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["b71ea07770e7c3ef7094844aff049e1c1ffa9e10"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["1509f151d7692d84fae414b2b799ac06ba60fcb4","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}