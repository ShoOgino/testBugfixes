{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","commits":[{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(message.getStr(COLLECTION_PROP, message.getStr(NAME)),\n          shardNames, numNrtReplicas, policyName, zkStateReader);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f8e877289fa7ac45397b98f3961b1db7b441b4","date":1498803623,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":null,"sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"25e4a4cddd699db6cce60282e747c7705897e821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25e4a4cddd699db6cce60282e747c7705897e821"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39f8e877289fa7ac45397b98f3961b1db7b441b4":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39f8e877289fa7ac45397b98f3961b1db7b441b4"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","25e4a4cddd699db6cce60282e747c7705897e821","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a"],"39f8e877289fa7ac45397b98f3961b1db7b441b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["39f8e877289fa7ac45397b98f3961b1db7b441b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}