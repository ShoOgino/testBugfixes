{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","commits":[{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (AssertionError expected) {\n      // ok: MockTokenizer\n      assertTrue(expected.getMessage(), expected.getMessage() != null && expected.getMessage().contains(\"wrong state\"));\n    } catch (Exception unexpected) {\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a808cbb0cc365c241bee49cd43905e2477681f11","date":1379974643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","sourceNew":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (AssertionError expected) {\n      // ok: MockTokenizer\n      assertTrue(expected.getMessage(), expected.getMessage() != null && expected.getMessage().contains(\"wrong state\"));\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (AssertionError expected) {\n      // ok: MockTokenizer\n      assertTrue(expected.getMessage(), expected.getMessage() != null && expected.getMessage().contains(\"wrong state\"));\n    } catch (Exception unexpected) {\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","sourceNew":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (AssertionError expected) {\n      // ok: MockTokenizer\n      assertTrue(expected.getMessage(), expected.getMessage() != null && expected.getMessage().contains(\"wrong state\"));\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","sourceOld":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (AssertionError expected) {\n      // ok: MockTokenizer\n      assertTrue(expected.getMessage(), expected.getMessage() != null && expected.getMessage().contains(\"wrong state\"));\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529","date":1419024596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","sourceNew":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","sourceOld":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (AssertionError expected) {\n      // ok: MockTokenizer\n      assertTrue(expected.getMessage(), expected.getMessage() != null && expected.getMessage().contains(\"wrong state\"));\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","sourceNew":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) { }\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","sourceOld":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) {}\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560fe82f36cc44907b79b23f49d25f60e5e86fe4","date":1601610183,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkResetException(Analyzer,String).mjava","sourceNew":"  public static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) { }\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","sourceOld":"  static void checkResetException(Analyzer a, String input) throws IOException {\n    TokenStream ts = a.tokenStream(\"bogus\", input);\n    try {\n      if (ts.incrementToken()) {\n        //System.out.println(ts.reflectAsString(false));\n        fail(\"didn't get expected exception when reset() not called\");\n      }\n    } catch (IllegalStateException expected) {\n      // ok\n    } catch (Exception unexpected) {\n      unexpected.printStackTrace(System.err);\n      fail(\"got wrong exception when reset() not called: \" + unexpected);\n    } finally {\n      // consume correctly\n      ts.reset();\n      while (ts.incrementToken()) { }\n      ts.end();\n      ts.close();\n    }\n    \n    // check for a missing close()\n    ts = a.tokenStream(\"bogus\", input);\n    ts.reset();\n    while (ts.incrementToken()) {}\n    ts.end();\n    try {\n      ts = a.tokenStream(\"bogus\", input);\n      fail(\"didn't get expected exception when close() not called\");\n    } catch (IllegalStateException expected) {\n      // ok\n    } finally {\n      ts.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["a808cbb0cc365c241bee49cd43905e2477681f11"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["99c9d8533c954f661481ae44273622957dbf572f"],"57e34488c685935a055be1bc57b850be1e8c850d":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"a808cbb0cc365c241bee49cd43905e2477681f11":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"560fe82f36cc44907b79b23f49d25f60e5e86fe4":["57e34488c685935a055be1bc57b850be1e8c850d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560fe82f36cc44907b79b23f49d25f60e5e86fe4"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["a808cbb0cc365c241bee49cd43905e2477681f11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["57e34488c685935a055be1bc57b850be1e8c850d"],"a808cbb0cc365c241bee49cd43905e2477681f11":["99c9d8533c954f661481ae44273622957dbf572f"],"57e34488c685935a055be1bc57b850be1e8c850d":["560fe82f36cc44907b79b23f49d25f60e5e86fe4"],"560fe82f36cc44907b79b23f49d25f60e5e86fe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}