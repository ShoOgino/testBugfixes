{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStopwords().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"a3776dccca01c11e7046323cfad46a3b4a471233":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}