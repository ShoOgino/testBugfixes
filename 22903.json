{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","commits":[{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(docs[i].toDocument());\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      assertEquals(docs[i], reader.getTermVectors(i));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f085727603412b79fee56923769b172d344203ac","date":1359718798,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(docs[i].toDocument());\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      assertEquals(docs[i], reader.getTermVectors(i));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(50);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final RandomDocument[] docs = new RandomDocument[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), TestUtil.nextInt(random(), 10, 50), randomOptions());\n    }\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; ++i) {\n      writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n    }\n    final IndexReader reader = writer.getReader();\n    for (int i = 0; i < numDocs; ++i) {\n      final int docID = docID(reader, \"\"+i);\n      assertEquals(docs[i], reader.getTermVectors(docID));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0fa6955ed1b1007ded1349ab72cea4555640432f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f085727603412b79fee56923769b172d344203ac"],"6613659748fe4411a7dcf85266e55db1f95f7315":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"f085727603412b79fee56923769b172d344203ac":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["f085727603412b79fee56923769b172d344203ac"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fa6955ed1b1007ded1349ab72cea4555640432f","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"f085727603412b79fee56923769b172d344203ac":["0fa6955ed1b1007ded1349ab72cea4555640432f","86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["f085727603412b79fee56923769b172d344203ac"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}