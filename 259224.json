{"path":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":null,"sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","date":1283910026,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":["12925d9335ba6189c7f25c39780e9da11bccd551","fa96fdb58cefcada21fc51faf37114033f044f3f","dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"bugIntro":["0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c67319af8a636ba1fd231243ec06e16f94a868a5","date":1287255692,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d701c455e4783533e275f01bf3e813737b7e593","date":1296229063,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that qparser plugins work\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(\"debugQuery\", \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword,foo_ti\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["8d701c455e4783533e275f01bf3e813737b7e593"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c67319af8a636ba1fd231243ec06e16f94a868a5":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","c67319af8a636ba1fd231243ec06e16f94a868a5"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["8d701c455e4783533e275f01bf3e813737b7e593","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","8d701c455e4783533e275f01bf3e813737b7e593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d701c455e4783533e275f01bf3e813737b7e593":["c67319af8a636ba1fd231243ec06e16f94a868a5"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","c67319af8a636ba1fd231243ec06e16f94a868a5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8d701c455e4783533e275f01bf3e813737b7e593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865":["c67319af8a636ba1fd231243ec06e16f94a868a5","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"c67319af8a636ba1fd231243ec06e16f94a868a5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8d701c455e4783533e275f01bf3e813737b7e593","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"8d701c455e4783533e275f01bf3e813737b7e593":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}