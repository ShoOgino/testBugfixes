{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testGarbageEmpty() throws Exception {\n    assertNull(parse(\"\"));\n    assertNull(parse(\"  \"));\n    assertNull(parse(\"  \"));\n    assertNull(parse(\"\\\\ \"));\n    assertNull(parse(\"\\\\ \\\\ \"));\n    assertNull(parse(\"\\\"\\\"\"));\n    assertNull(parse(\"\\\" \\\"\"));\n    assertNull(parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertNull(parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertNull(parse(\"\\\" \\\" \\\" \\\"\"));\n    assertNull(parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e38eac1e7b9807c89c1768a6d55a6f2e2361ef2b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e38eac1e7b9807c89c1768a6d55a6f2e2361ef2b","date":1424983813,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","sourceNew":"  public void testGarbageEmpty() throws Exception {\n    BooleanQuery expected = new BooleanQuery();\n\n    assertEquals(expected, parse(\"\"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"\\\\ \"));\n    assertEquals(expected, parse(\"\\\\ \\\\ \"));\n    assertEquals(expected, parse(\"\\\"\\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertEquals(expected, parse(\"\\\" \\\" \\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","sourceOld":"  public void testGarbageEmpty() throws Exception {\n    assertNull(parse(\"\"));\n    assertNull(parse(\"  \"));\n    assertNull(parse(\"  \"));\n    assertNull(parse(\"\\\\ \"));\n    assertNull(parse(\"\\\\ \\\\ \"));\n    assertNull(parse(\"\\\"\\\"\"));\n    assertNull(parse(\"\\\" \\\"\"));\n    assertNull(parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertNull(parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertNull(parse(\"\\\" \\\" \\\" \\\"\"));\n    assertNull(parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","bugFix":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2db39cfba90037b809aabf6d1a990d904722175","date":1425461028,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","sourceNew":"  public void testGarbageEmpty() throws Exception {\n    MatchNoDocsQuery expected = new MatchNoDocsQuery();\n\n    assertEquals(expected, parse(\"\"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"\\\\ \"));\n    assertEquals(expected, parse(\"\\\\ \\\\ \"));\n    assertEquals(expected, parse(\"\\\"\\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertEquals(expected, parse(\"\\\" \\\" \\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","sourceOld":"  public void testGarbageEmpty() throws Exception {\n    BooleanQuery expected = new BooleanQuery();\n\n    assertEquals(expected, parse(\"\"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"\\\\ \"));\n    assertEquals(expected, parse(\"\\\\ \\\\ \"));\n    assertEquals(expected, parse(\"\\\"\\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertEquals(expected, parse(\"\\\" \\\" \\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testGarbageEmpty().mjava","sourceNew":"  public void testGarbageEmpty() throws Exception {\n    MatchNoDocsQuery expected = new MatchNoDocsQuery();\n\n    assertEquals(expected, parse(\"\"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"  \"));\n    assertEquals(expected, parse(\"\\\\ \"));\n    assertEquals(expected, parse(\"\\\\ \\\\ \"));\n    assertEquals(expected, parse(\"\\\"\\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"\"));\n    assertEquals(expected, parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertEquals(expected, parse(\"\\\" \\\" \\\" \\\"\"));\n    assertEquals(expected, parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","sourceOld":"  public void testGarbageEmpty() throws Exception {\n    assertNull(parse(\"\"));\n    assertNull(parse(\"  \"));\n    assertNull(parse(\"  \"));\n    assertNull(parse(\"\\\\ \"));\n    assertNull(parse(\"\\\\ \\\\ \"));\n    assertNull(parse(\"\\\"\\\"\"));\n    assertNull(parse(\"\\\" \\\"\"));\n    assertNull(parse(\"\\\" \\\"|\\\" \\\"\"));\n    assertNull(parse(\"(\\\" \\\"|\\\" \\\")\"));\n    assertNull(parse(\"\\\" \\\" \\\" \\\"\"));\n    assertNull(parse(\"(\\\" \\\" \\\" \\\")\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2db39cfba90037b809aabf6d1a990d904722175":["e38eac1e7b9807c89c1768a6d55a6f2e2361ef2b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c","f2db39cfba90037b809aabf6d1a990d904722175"],"e38eac1e7b9807c89c1768a6d55a6f2e2361ef2b":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2db39cfba90037b809aabf6d1a990d904722175"]},"commit2Childs":{"f2db39cfba90037b809aabf6d1a990d904722175":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e38eac1e7b9807c89c1768a6d55a6f2e2361ef2b":["f2db39cfba90037b809aabf6d1a990d904722175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e38eac1e7b9807c89c1768a6d55a6f2e2361ef2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}