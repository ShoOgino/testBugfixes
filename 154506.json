{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, StandardAnalyzer.STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, StandardAnalyzer.STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81220b46d5c5e6263123603452e529484114fd01","date":1530284828,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, StandardAnalyzer.STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23972866716431cb443f3c6f50c0c37e301366d4","date":1531397584,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws Exception {\n\n    Analyzer a4 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        final int flags = SPLIT_ON_NUMERICS | GENERATE_WORD_PARTS | PRESERVE_ORIGINAL | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE;\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, flags, CharArraySet.EMPTY_SET));\n      }\n    };\n    assertAnalyzesTo(a4, \"SAL_S8371 - SAL\",\n        new String[]{ \"SAL_S8371\", \"SAL\", \"S\", \"8371\", \"-\", \"SAL\"},\n        new int[]{    1,            0,    1,    1,      1,    1});\n\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3, a4);\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws Exception {\n\n    Analyzer a4 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        final int flags = SPLIT_ON_NUMERICS | GENERATE_WORD_PARTS | PRESERVE_ORIGINAL | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE;\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, flags, CharArraySet.EMPTY_SET));\n      }\n    };\n    assertAnalyzesTo(a4, \"SAL_S8371 - SAL\",\n        new String[]{ \"SAL_S8371\", \"SAL\", \"S\", \"8371\", \"-\", \"SAL\"},\n        new int[]{    1,            0,    1,    1,      1,    1});\n\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3, a4);\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, StandardAnalyzer.STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws Exception {\n\n    Analyzer a4 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        final int flags = SPLIT_ON_NUMERICS | GENERATE_WORD_PARTS | PRESERVE_ORIGINAL | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE;\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, flags, CharArraySet.EMPTY_SET));\n      }\n    };\n    assertAnalyzesTo(a4, \"SAL_S8371 - SAL\",\n        new String[]{ \"SAL_S8371\", \"SAL\", \"S\", \"8371\", \"-\", \"SAL\"},\n        new int[]{    1,            0,    1,    1,      1,    1});\n\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3, a4);\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, StandardAnalyzer.STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47e241984c8185946746fd8e18cff4200659091e","date":1543916862,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws Exception {\n\n    Analyzer a4 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        final int flags = SPLIT_ON_NUMERICS | GENERATE_WORD_PARTS | PRESERVE_ORIGINAL | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE;\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, flags, CharArraySet.EMPTY_SET));\n      }\n    };\n    assertAnalyzesTo(a4, \"SAL_S8371 - SAL\",\n        new String[]{ \"SAL_S8371\", \"SAL\", \"S\", \"8371\", \"-\", \"SAL\"},\n        new int[]{    1,            0,    1,    1,      1,    1});\n\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer, true, DEFAULT_WORD_DELIM_TABLE,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer), true, DEFAULT_WORD_DELIM_TABLE,\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, true, DEFAULT_WORD_DELIM_TABLE, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3, a4);\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws Exception {\n\n    Analyzer a4 = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        final int flags = SPLIT_ON_NUMERICS | GENERATE_WORD_PARTS | PRESERVE_ORIGINAL | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE;\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, flags, CharArraySet.EMPTY_SET));\n      }\n    };\n    assertAnalyzesTo(a4, \"SAL_S8371 - SAL\",\n        new String[]{ \"SAL_S8371\", \"SAL\", \"S\", \"8371\", \"-\", \"SAL\"},\n        new int[]{    1,            0,    1,    1,      1,    1});\n\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;\n    final CharArraySet protWords = new CharArraySet(new HashSet<>(Arrays.asList(\"NUTCH\")), false);\n    \n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            tokenizer,\n            flags, protWords));\n      }\n    };\n\n    /* in this case, works as expected. */\n    assertAnalyzesTo(a, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 2 },\n        null,\n        false);\n\n    /* only in this case, posInc of 2 ?! */\n    assertAnalyzesTo(a, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,                     \n        new int[] { 1, 2, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 2, 1 },\n        null,\n        false);\n    \n    /* analyzer that will consume tokens with large position increments */\n    Analyzer a2 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(\n            new LargePosIncTokenFilter(tokenizer),\n            flags, protWords));\n      }\n    };\n    \n    /* increment of \"largegap\" is preserved */\n    assertAnalyzesTo(a2, \"LUCENE largegap SOLR\", new String[] { \"LUCENE\", \"largegap\", \"SOLR\" },\n        new int[] { 0, 7, 16 },\n        new int[] { 6, 15, 20 },\n        null,\n        new int[] { 1, 10, 1 },\n        null,\n        false);\n    \n    /* the \"/\" had a position increment of 10, where did it go?!?!! */\n    assertAnalyzesTo(a2, \"LUCENE / SOLR\", new String[] { \"LUCENE\", \"SOLR\" },\n        new int[] { 0, 9 },\n        new int[] { 6, 13 },\n        null,\n        new int[] { 1, 11 },\n        null,\n        false);\n    \n    /* in this case, the increment of 10 from the \"/\" is carried over */\n    assertAnalyzesTo(a2, \"LUCENE / solR\", new String[] { \"LUCENE\", \"solR\", \"sol\", \"R\" },\n        new int[] { 0, 9, 9, 12 },\n        new int[] { 6, 13, 12, 13 },\n        null,\n        new int[] { 1, 11, 0, 1 },\n        null,\n        false);\n    \n    assertAnalyzesTo(a2, \"LUCENE / NUTCH SOLR\", new String[] { \"LUCENE\", \"NUTCH\", \"SOLR\" },\n        new int[] { 0, 9, 15 },\n        new int[] { 6, 14, 19 },\n        null,\n        new int[] { 1, 11, 1 },\n        null,\n        false);\n\n    Analyzer a3 = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        StopFilter filter = new StopFilter(tokenizer, EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(filter, flags, protWords));\n      }\n    };\n\n    assertAnalyzesTo(a3, \"lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" },\n        new int[] { 0, 0, 7 },\n        new int[] { 11, 6, 11 },\n        null,\n        new int[] { 1, 0, 1 },\n        null,\n        false);\n\n    /* the stopword should add a gap here */\n    assertAnalyzesTo(a3, \"the lucene.solr\", \n        new String[] { \"lucenesolr\", \"lucene\", \"solr\" }, \n        new int[] { 4, 4, 11 }, \n        new int[] { 15, 10, 15 },\n        null,\n        new int[] { 2, 0, 1 },\n        null,\n        false);\n\n    IOUtils.close(a, a2, a3, a4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["098528909bb70948871fd7ed865fafb87ed73964","23972866716431cb443f3c6f50c0c37e301366d4"],"81220b46d5c5e6263123603452e529484114fd01":["098528909bb70948871fd7ed865fafb87ed73964"],"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47e241984c8185946746fd8e18cff4200659091e":["23972866716431cb443f3c6f50c0c37e301366d4"],"23972866716431cb443f3c6f50c0c37e301366d4":["81220b46d5c5e6263123603452e529484114fd01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47e241984c8185946746fd8e18cff4200659091e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["098528909bb70948871fd7ed865fafb87ed73964","23972866716431cb443f3c6f50c0c37e301366d4"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"81220b46d5c5e6263123603452e529484114fd01":["23972866716431cb443f3c6f50c0c37e301366d4"],"098528909bb70948871fd7ed865fafb87ed73964":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81220b46d5c5e6263123603452e529484114fd01","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"47e241984c8185946746fd8e18cff4200659091e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23972866716431cb443f3c6f50c0c37e301366d4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","47e241984c8185946746fd8e18cff4200659091e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}