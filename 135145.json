{"path":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        // note: we could allow for other encodings here as an argument\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab6bd7083690e5bf77d5527bcd0d62f198b3f320","ab6bd7083690e5bf77d5527bcd0d62f198b3f320"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fb9b819680de2eb44eba60e1d048474710b722d","date":1326775198,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        // note: we could allow for other encodings here as an argument\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4a408f0a2714ee03537e8ea104efce9f5782db2","date":1328101304,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/KuromojiTokenizerFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    Mode mode = args.get(MODE) != null ? Mode.valueOf(args.get(MODE).toUpperCase(Locale.ENGLISH)) : Mode.NORMAL;\n    String userDictionaryPath = args.get(USER_DICT_PATH);\n    try {\n      if (userDictionaryPath != null) {\n        InputStream stream = loader.openResource(userDictionaryPath);\n        String encoding = args.get(USER_DICT_ENCODING);\n        if (encoding == null) {\n          encoding = IOUtils.UTF_8;\n        }\n        CharsetDecoder decoder = Charset.forName(encoding).newDecoder()\n            .onMalformedInput(CodingErrorAction.REPORT)\n            .onUnmappableCharacter(CodingErrorAction.REPORT);\n        Reader reader = new InputStreamReader(stream, decoder);\n        this.segmenter = new Segmenter(new UserDictionary(reader), mode);\n      } else {\n        this.segmenter = new Segmenter(mode);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6fb9b819680de2eb44eba60e1d048474710b722d":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"c4a408f0a2714ee03537e8ea104efce9f5782db2":["6fb9b819680de2eb44eba60e1d048474710b722d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4a408f0a2714ee03537e8ea104efce9f5782db2"]},"commit2Childs":{"6fb9b819680de2eb44eba60e1d048474710b722d":["c4a408f0a2714ee03537e8ea104efce9f5782db2"],"c4a408f0a2714ee03537e8ea104efce9f5782db2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["6fb9b819680de2eb44eba60e1d048474710b722d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}