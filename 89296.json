{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean).mjava","commits":[{"id":"6b861c0fdfa4d005c70848c9121655e9dc704f96","date":1307129511,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03daa6ddcb4768a702115ec63799cab5fff3d92","date":1307140842,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        // TODO\n        // assertEquals(expectedFD.score, actualFD.score);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups,TopGroups,boolean,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups expected, TopGroups actual, boolean verifyGroupValues, boolean testScores) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(expected.groups.length, actual.groups.length);\n    assertEquals(expected.totalHitCount, actual.totalHitCount);\n    assertEquals(expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null) {\n      assertEquals(expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs expectedGroup = expected.groups[groupIDX];\n      final GroupDocs actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"6b861c0fdfa4d005c70848c9121655e9dc704f96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["6b861c0fdfa4d005c70848c9121655e9dc704f96"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b861c0fdfa4d005c70848c9121655e9dc704f96"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b861c0fdfa4d005c70848c9121655e9dc704f96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6b861c0fdfa4d005c70848c9121655e9dc704f96":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b861c0fdfa4d005c70848c9121655e9dc704f96","c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":[],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","c03daa6ddcb4768a702115ec63799cab5fff3d92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}