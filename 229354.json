{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, Collections.unmodifiableMap(segmentsToOptimize));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}