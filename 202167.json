{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#position(boolean).mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#position(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the position increment gap for a subword or concatenation\n   *\n   * @param inject true if this token wants to be injected\n   * @return position increment gap\n   */\n  private int position(boolean inject) {\n    int posInc = accumPosInc;\n\n    if (hasOutputToken) {\n      accumPosInc = 0;\n      return inject ? 0 : Math.max(1, posInc);\n    }\n\n    hasOutputToken = true;\n    \n    if (!hasOutputFollowingOriginal) {\n      // the first token following the original is 0 regardless\n      hasOutputFollowingOriginal = true;\n      return 0;\n    }\n    // clear the accumulated position increment\n    accumPosInc = 0;\n    return Math.max(1, posInc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#position(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#position(boolean).mjava","sourceNew":"  /**\n   * Get the position increment gap for a subword or concatenation\n   *\n   * @param inject true if this token wants to be injected\n   * @return position increment gap\n   */\n  private int position(boolean inject) {\n    int posInc = accumPosInc;\n\n    if (hasOutputToken) {\n      accumPosInc = 0;\n      return inject ? 0 : Math.max(1, posInc);\n    }\n\n    hasOutputToken = true;\n    \n    if (!hasOutputFollowingOriginal) {\n      // the first token following the original is 0 regardless\n      hasOutputFollowingOriginal = true;\n      return 0;\n    }\n    // clear the accumulated position increment\n    accumPosInc = 0;\n    return Math.max(1, posInc);\n  }\n\n","sourceOld":"  /**\n   * Get the position increment gap for a subword or concatenation\n   *\n   * @param inject true if this token wants to be injected\n   * @return position increment gap\n   */\n  private int position(boolean inject) {\n    int posInc = accumPosInc;\n\n    if (hasOutputToken) {\n      accumPosInc = 0;\n      return inject ? 0 : Math.max(1, posInc);\n    }\n\n    hasOutputToken = true;\n    \n    if (!hasOutputFollowingOriginal) {\n      // the first token following the original is 0 regardless\n      hasOutputFollowingOriginal = true;\n      return 0;\n    }\n    // clear the accumulated position increment\n    accumPosInc = 0;\n    return Math.max(1, posInc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}