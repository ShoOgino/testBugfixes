{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaDynamicFieldResource#testAddCopyField().mjava","commits":[{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaDynamicFieldResource#testAddCopyField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/dynamicfields/newdynamicfield2_*?indent=on&wt=xml\",\n            \"count(/response/lst[@name='dynamicField']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/dynamicfields/dynamicfieldA_*\",\n               json(\"{'type':'text','stored':false}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/dynamicfields/dynamicfieldB_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':['dynamicfieldA_*']}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/dynamicfields/dynamicfieldC_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':'dynamicfieldA_*'}\"),\n               \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/dynamicfields/dynamicfieldB_*?indent=on&wt=xml\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldB_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 1\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldC_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 1\");\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/dynamicfields/dynamicfieldD_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':[]}\"),\n               \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/dynamicfields/dynamicfieldF_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':['some_nonexistent_dynamicfield_ignore_exception_*']}\"),\n               \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_dynamicfield_ignore_exception_*\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaDynamicFieldResource#testAddCopyField().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAddCopyField() throws Exception {\n    assertQ(\"/schema/dynamicfields/newdynamicfield2_*?indent=on&wt=xml\",\n            \"count(/response/lst[@name='dynamicField']) = 0\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '404'\",\n            \"/response/lst[@name='error']/int[@name='code'] = '404'\");\n\n    assertJPut(\"/schema/dynamicfields/dynamicfieldA_*\",\n               json(\"{'type':'text','stored':false}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/dynamicfields/dynamicfieldB_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':['dynamicfieldA_*']}\"),\n               \"/responseHeader/status==0\");\n    assertJPut(\"/schema/dynamicfields/dynamicfieldC_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':'dynamicfieldA_*'}\"),\n               \"/responseHeader/status==0\");\n\n    assertQ(\"/schema/dynamicfields/dynamicfieldB_*?indent=on&wt=xml\",\n            \"count(/response/lst[@name='dynamicField']) = 1\",\n            \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldB_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 1\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldC_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 1\");\n    //fine to pass in empty list, just won't do anything\n    assertJPut(\"/schema/dynamicfields/dynamicfieldD_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':[]}\"),\n               \"/responseHeader/status==0\");\n    //some bad usages\n    assertJPut(\"/schema/dynamicfields/dynamicfieldF_*\",\n               json(\"{'type':'text','stored':false, 'copyFields':['some_nonexistent_dynamicfield_ignore_exception_*']}\"),\n               \"/error/msg==\\\"copyField dest :\\\\'some_nonexistent_dynamicfield_ignore_exception_*\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}