{"path":"lucene/core/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","commits":[{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushPolicy#findLargestNonPendingWriter(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  /**\n   * Returns the current most RAM consuming non-pending {@link DocumentsWriterPerThread} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected DocumentsWriterPerThread findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, DocumentsWriterPerThread perThread) {\n    assert perThread.getNumDocsInRAM() > 0;\n    // the dwpt which needs to be flushed eventually\n    DocumentsWriterPerThread maxRamUsingWriter = control.findLargestNonPendingWriter();\n    assert assertMessage(\"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingWriter;\n  }\n\n","sourceOld":"  /**\n   * Returns the current most RAM consuming non-pending {@link ThreadState} with\n   * at least one indexed document.\n   * <p>\n   * This method will never return <code>null</code>\n   */\n  protected ThreadState findLargestNonPendingWriter(\n      DocumentsWriterFlushControl control, ThreadState perThreadState) {\n    assert perThreadState.dwpt.getNumDocsInRAM() > 0;\n    // the dwpt which needs to be flushed eventually\n    ThreadState maxRamUsingThreadState = control.findLargestNonPendingWriter();\n    assert assertMessage(\"set largest ram consuming thread pending on lower watermark\");\n    return maxRamUsingThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}