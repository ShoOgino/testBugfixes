{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#doAddReplica(String,String,String,String,CloudSolrClient,Properties).mjava","commits":[{"id":"9942a098be9e045925c48c55fe39f6ffb9667744","date":1436492864,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#doAddReplica(String,String,String,String,CloudSolrClient,Properties).mjava","pathOld":"/dev/null","sourceNew":"  private Replica doAddReplica(String collectionName, String shard, String newReplicaName, String node,\n                               CloudSolrClient client, Properties props) throws IOException, SolrServerException {\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(shard);\n    if (node != null) {\n      addReplica.setNode(node);\n    }\n    if (props != null) {\n      addReplica.setProperties(props);\n    }\n    client.request(addReplica);\n    long timeout = System.currentTimeMillis() + 3000;\n    Replica newReplica = null;\n\n    for (; System.currentTimeMillis() < timeout; ) {\n      Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, shard);\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n    return newReplica;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#doAddReplica(String,String,String,String,CloudSolrClient,Properties).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#doAddReplica(String,String,String,String,CloudSolrClient,Properties).mjava","sourceNew":"  private Replica doAddReplica(String collectionName, String shard, String newReplicaName, String node,\n                               CloudSolrClient client, Properties props) throws IOException, SolrServerException {\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(shard);\n    if (node != null) {\n      addReplica.setNode(node);\n    }\n    if (props != null) {\n      addReplica.setProperties(props);\n    }\n    client.request(addReplica);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    for (; ! timeout.hasTimedOut(); ) {\n      Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, shard);\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n    return newReplica;\n  }\n\n","sourceOld":"  private Replica doAddReplica(String collectionName, String shard, String newReplicaName, String node,\n                               CloudSolrClient client, Properties props) throws IOException, SolrServerException {\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(shard);\n    if (node != null) {\n      addReplica.setNode(node);\n    }\n    if (props != null) {\n      addReplica.setProperties(props);\n    }\n    client.request(addReplica);\n    long timeout = System.currentTimeMillis() + 3000;\n    Replica newReplica = null;\n\n    for (; System.currentTimeMillis() < timeout; ) {\n      Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, shard);\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n    return newReplica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#doAddReplica(String,String,String,String,CloudSolrClient,Properties).mjava","sourceNew":null,"sourceOld":"  private Replica doAddReplica(String collectionName, String shard, String newReplicaName, String node,\n                               CloudSolrClient client, Properties props) throws IOException, SolrServerException {\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(shard);\n    if (node != null) {\n      addReplica.setNode(node);\n    }\n    if (props != null) {\n      addReplica.setProperties(props);\n    }\n    client.request(addReplica);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    for (; ! timeout.hasTimedOut(); ) {\n      Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, shard);\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n    return newReplica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#doAddReplica(String,String,String,String,CloudSolrClient,Properties).mjava","sourceNew":null,"sourceOld":"  private Replica doAddReplica(String collectionName, String shard, String newReplicaName, String node,\n                               CloudSolrClient client, Properties props) throws IOException, SolrServerException {\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n\n    addReplica.setCollectionName(collectionName);\n    addReplica.setShardName(shard);\n    if (node != null) {\n      addReplica.setNode(node);\n    }\n    if (props != null) {\n      addReplica.setProperties(props);\n    }\n    client.request(addReplica);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    for (; ! timeout.hasTimedOut(); ) {\n      Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, shard);\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n    return newReplica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["bcf9886c8ff537aafde14de48ebf744f5673f08b","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9942a098be9e045925c48c55fe39f6ffb9667744":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["9942a098be9e045925c48c55fe39f6ffb9667744"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9942a098be9e045925c48c55fe39f6ffb9667744"],"9942a098be9e045925c48c55fe39f6ffb9667744":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}