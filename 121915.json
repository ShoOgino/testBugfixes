{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(SolrRequest,String,Integer).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(SolrRequest,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest,String,Integer).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, String collection,\n                                   final Integer numServersToTry) throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n\n    final int maxTries = (numServersToTry == null ? serverList.length : numServersToTry.intValue());\n    int numServersTried = 0;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      ServerWrapper wrapper = pickServer(serverList, request);\n      try {\n        ++numServersTried;\n        request.setBasePath(wrapper.baseUrl);\n        return getClient(wrapper.getBaseUrl()).request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getBaseUrl(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getBaseUrl())) continue;\n      try {\n        ++numServersTried;\n        request.setBasePath(wrapper.baseUrl);\n        NamedList<Object> rsp = getClient(wrapper.baseUrl).request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getBaseUrl());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, String collection,\n      final Integer numServersToTry) throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    final int maxTries = (numServersToTry == null ? serverList.length : numServersToTry.intValue());\n    int numServersTried = 0;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n\n      try {\n        ++numServersTried;\n        return wrapper.client.request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n      \n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        ++numServersTried;\n        NamedList<Object> rsp = wrapper.client.request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(SolrRequest,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(SolrRequest,String,Integer).mjava","sourceNew":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})final SolrRequest request, String collection,\n                                   final Integer numServersToTry) throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n\n    final int maxTries = (numServersToTry == null ? serverList.length : numServersToTry.intValue());\n    int numServersTried = 0;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      ServerWrapper wrapper = pickServer(serverList, request);\n      try {\n        ++numServersTried;\n        request.setBasePath(wrapper.baseUrl);\n        return getClient(wrapper.getBaseUrl()).request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getBaseUrl(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getBaseUrl())) continue;\n      try {\n        ++numServersTried;\n        request.setBasePath(wrapper.baseUrl);\n        NamedList<Object> rsp = getClient(wrapper.baseUrl).request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getBaseUrl());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, String collection,\n                                   final Integer numServersToTry) throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n\n    final int maxTries = (numServersToTry == null ? serverList.length : numServersToTry.intValue());\n    int numServersTried = 0;\n    Map<String,ServerWrapper> justFailed = null;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(request);\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      ServerWrapper wrapper = pickServer(serverList, request);\n      try {\n        ++numServersTried;\n        request.setBasePath(wrapper.baseUrl);\n        return getClient(wrapper.getBaseUrl()).request(request, collection);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getBaseUrl(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getBaseUrl())) continue;\n      try {\n        ++numServersTried;\n        request.setBasePath(wrapper.baseUrl);\n        NamedList<Object> rsp = getClient(wrapper.baseUrl).request(request, collection);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getBaseUrl());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage, ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}