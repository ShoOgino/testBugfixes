{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        if (hasChanges) {\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":["68907d6beb9e6c97e3b8bd255eb9e6d009a232e3","c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        return hasChanges;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        if (hasChanges) {\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        return hasChanges;\n      }\n\n      return false;\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        if (hasChanges) {\n          // Must checkpoint w/ deleter, because this\n          // segment reader will have created new _X_N.del\n          // file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        return hasChanges;\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop) throws IOException {\n      final SegmentCacheKey cacheKey = new SegmentCacheKey(sr.getSegmentInfo(), IOContext.Context.READ);\n      final SegmentReader other = readerMap.get(cacheKey);\n      if (sr == other) {\n        return release(sr, drop, IOContext.Context.READ);\n      } else {\n        assert sr == readerMap.get(new SegmentCacheKey(sr.getSegmentInfo(), IOContext.Context.MERGE));\n        return release(sr, drop, IOContext.Context.MERGE);\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled || readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        sr.hasChanges &= !drop;\n\n        final boolean hasChanges = sr.hasChanges;\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        return hasChanges;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references).  If drop is true then we\n     * remove this entry from the pool.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      //System.out.println(\"pool.release seg=\" + sr.getSegmentInfo() + \" rc=\" + sr.getRefCount() + \" drop=\" + drop);\n      sr.decRef();\n\n      final ReadersAndLiveDocs rld = readerMap.get(sr.getSegmentInfo());\n\n      if (rld != null && (drop || (!poolReaders && !rld.anyOutsideRefs(sr)))) {\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.  If deletes had\n        // accumulated on those sub-readers while the merge\n        // is running, by now we have carried forward those\n        // deletes onto the newly merged segment, so we can\n        // discard them on the sub-readers:\n\n        if (!drop) {\n          if (rld.writeLiveDocs(directory)) {\n            assert infoIsLive(sr.getSegmentInfo());\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del file.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        }\n\n        if (!rld.removeReader(sr, drop)) {\n          //System.out.println(\"DROP seg=\" + rld.info + \" \" + readerMap.size() + \" in pool\");\n          readerMap.remove(sr.getSegmentInfo());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop) throws IOException {\n      final SegmentCacheKey cacheKey = new SegmentCacheKey(sr.getSegmentInfo(), IOContext.Context.READ);\n      final SegmentReader other = readerMap.get(cacheKey);\n      if (sr == other) {\n        return release(sr, drop, IOContext.Context.READ);\n      } else {\n        assert sr == readerMap.get(new SegmentCacheKey(sr.getSegmentInfo(), IOContext.Context.MERGE));\n        return release(sr, drop, IOContext.Context.MERGE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references).  If drop is true then we\n     * remove this entry from the pool.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      //System.out.println(\"pool.release seg=\" + sr.getSegmentInfo() + \" rc=\" + sr.getRefCount() + \" drop=\" + drop);\n      sr.decRef();\n\n      final ReadersAndLiveDocs rld = readerMap.get(sr.getSegmentInfo());\n\n      if (rld != null && (drop || (!poolReaders && !rld.anyOutsideRefs(sr)))) {\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.  If deletes had\n        // accumulated on those sub-readers while the merge\n        // is running, by now we have carried forward those\n        // deletes onto the newly merged segment, so we can\n        // discard them on the sub-readers:\n\n        if (!drop) {\n          if (rld.writeLiveDocs(directory)) {\n            assert infoIsLive(sr.getSegmentInfo());\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del file.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        }\n\n        if (!rld.removeReader(sr, drop)) {\n          //System.out.println(\"DROP seg=\" + rld.info + \" \" + readerMap.size() + \" in pool\");\n          readerMap.remove(sr.getSegmentInfo());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references).  If drop is true then we\n     * remove this entry from the pool.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      //System.out.println(\"pool.release seg=\" + sr.getSegmentInfo() + \" rc=\" + sr.getRefCount() + \" drop=\" + drop);\n      sr.decRef();\n\n      final ReadersAndLiveDocs rld = readerMap.get(sr.getSegmentInfo());\n\n      if (rld != null && (drop || (!poolReaders && !rld.anyOutsideRefs(sr)))) {\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.  If deletes had\n        // accumulated on those sub-readers while the merge\n        // is running, by now we have carried forward those\n        // deletes onto the newly merged segment, so we can\n        // discard them on the sub-readers:\n\n        if (!drop) {\n          if (rld.writeLiveDocs(directory)) {\n            assert infoIsLive(sr.getSegmentInfo());\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del file.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        }\n\n        if (!rld.removeReader(sr, drop)) {\n          //System.out.println(\"DROP seg=\" + rld.info + \" \" + readerMap.size() + \" in pool\");\n          readerMap.remove(sr.getSegmentInfo());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1085ea837da8f1e96697e17cf73e1d08e7329261","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1085ea837da8f1e96697e17cf73e1d08e7329261","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}