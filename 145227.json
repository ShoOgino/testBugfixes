{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","commits":[{"id":"978de4e2d23054c6624dd5928ddeb734dca68eec","date":1370592803,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(dir, conf,  new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","sourceNew":"  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(dir, conf, new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","sourceOld":"  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(dir, conf,  new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2165505a28a4f836f04ed5eb23bc64a6faae1b1e","date":1418824313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","sourceNew":"  /** Returns an indexwriter that randomly mixes up thread scheduling (by yielding at test points) */\n  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(dir, conf, new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","sourceOld":"  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(dir, conf, new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Directory,IndexWriterConfig,Random).mjava","sourceNew":"  /** Returns an indexwriter that randomly mixes up thread scheduling (by yielding at test points) */\n  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(r, dir, conf, new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","sourceOld":"  /** Returns an indexwriter that randomly mixes up thread scheduling (by yielding at test points) */\n  public static IndexWriter mockIndexWriter(Directory dir, IndexWriterConfig conf, Random r) throws IOException {\n    // Randomly calls Thread.yield so we mixup thread scheduling\n    final Random random = new Random(r.nextLong());\n    return mockIndexWriter(dir, conf, new TestPoint() {\n      @Override\n      public void apply(String message) {\n        if (random.nextInt(4) == 2)\n          Thread.yield();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"978de4e2d23054c6624dd5928ddeb734dca68eec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["2165505a28a4f836f04ed5eb23bc64a6faae1b1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"2165505a28a4f836f04ed5eb23bc64a6faae1b1e":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"]},"commit2Childs":{"978de4e2d23054c6624dd5928ddeb734dca68eec":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["2165505a28a4f836f04ed5eb23bc64a6faae1b1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2165505a28a4f836f04ed5eb23bc64a6faae1b1e":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}