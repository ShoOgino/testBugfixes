{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#createDocDataLineReader(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#createDocDataLineReader(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#createDocDataLineReader(String).mjava","sourceNew":"  private LineParser createDocDataLineReader(String line) {\n    String[] header;\n    String headIndicator = WriteLineDocTask.FIELDS_HEADER_INDICATOR + WriteLineDocTask.SEP;\n\n    if (line.startsWith(headIndicator)) {\n      header = line.substring(headIndicator.length()).split(Character.toString(WriteLineDocTask.SEP));\n      skipHeaderLine = true; // mark to skip the header line when input file is reopened\n    } else {\n      header = WriteLineDocTask.DEFAULT_FIELDS;\n    }\n    \n    // if a specific DocDataLineReader was configured, must respect it\n    String docDataLineReaderClassName = getConfig().get(\"line.parser\", null);\n    if (docDataLineReaderClassName!=null) {\n      try {\n        final Class<? extends LineParser> clazz = \n          Class.forName(docDataLineReaderClassName).asSubclass(LineParser.class);\n        Constructor<? extends LineParser> cnstr = clazz.getConstructor(new Class[]{String[].class});\n        return cnstr.newInstance((Object)header);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate \"+docDataLineReaderClassName, e);\n      }\n    }\n\n    // if this the simple case,   \n    if (Arrays.deepEquals(header, WriteLineDocTask.DEFAULT_FIELDS)) {\n      return new SimpleLineParser(header);\n    }\n    return new HeaderLineParser(header);\n  }\n\n","sourceOld":"  private LineParser createDocDataLineReader(String line) {\n    String[] header;\n    String headIndicator = WriteLineDocTask.FIELDS_HEADER_INDICATOR + WriteLineDocTask.SEP;\n\n    if (line.startsWith(headIndicator)) {\n      header = line.substring(headIndicator.length()).split(Character.toString(WriteLineDocTask.SEP));\n      skipHeaderLine = true; // mark to skip the header line when input file is reopened\n    } else {\n      header = WriteLineDocTask.DEFAULT_FIELDS;\n    }\n    \n    // if a specific DocDataLineReader was configured, must respect it\n    String docDataLineReaderClassName = getConfig().get(\"line.parser\", null);\n    if (docDataLineReaderClassName!=null) {\n      try {\n        final Class<? extends LineParser> clazz = \n          Class.forName(docDataLineReaderClassName).asSubclass(LineParser.class);\n        Constructor<? extends LineParser> cnstr = clazz.getConstructor(new Class[]{String[].class});\n        return cnstr.newInstance((Object)header);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate \"+docDataLineReaderClassName, e);\n      }\n    }\n\n    // if this the simple case,   \n    if (Arrays.deepEquals(header, WriteLineDocTask.DEFAULT_FIELDS)) {\n      return new SimpleLineParser(header);\n    }\n    return new HeaderLineParser(header);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4","date":1439660917,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#createDocDataLineReader(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#createDocDataLineReader(String).mjava","sourceNew":"  private LineParser createDocDataLineReader(String line) {\n    String[] header;\n    String headIndicator = WriteLineDocTask.FIELDS_HEADER_INDICATOR + WriteLineDocTask.SEP;\n\n    if (line.startsWith(headIndicator)) {\n      header = line.substring(headIndicator.length()).split(Character.toString(WriteLineDocTask.SEP));\n      skipHeaderLine = true; // mark to skip the header line when input file is reopened\n    } else {\n      header = WriteLineDocTask.DEFAULT_FIELDS;\n    }\n    \n    // if a specific DocDataLineReader was configured, must respect it\n    String docDataLineReaderClassName = getConfig().get(\"line.parser\", null);\n    if (docDataLineReaderClassName!=null) {\n      try {\n        final Class<? extends LineParser> clazz = \n          Class.forName(docDataLineReaderClassName).asSubclass(LineParser.class);\n        Constructor<? extends LineParser> cnstr = clazz.getConstructor(String[].class);\n        return cnstr.newInstance((Object)header);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate \"+docDataLineReaderClassName, e);\n      }\n    }\n\n    // if this the simple case,   \n    if (Arrays.deepEquals(header, WriteLineDocTask.DEFAULT_FIELDS)) {\n      return new SimpleLineParser(header);\n    }\n    return new HeaderLineParser(header);\n  }\n\n","sourceOld":"  private LineParser createDocDataLineReader(String line) {\n    String[] header;\n    String headIndicator = WriteLineDocTask.FIELDS_HEADER_INDICATOR + WriteLineDocTask.SEP;\n\n    if (line.startsWith(headIndicator)) {\n      header = line.substring(headIndicator.length()).split(Character.toString(WriteLineDocTask.SEP));\n      skipHeaderLine = true; // mark to skip the header line when input file is reopened\n    } else {\n      header = WriteLineDocTask.DEFAULT_FIELDS;\n    }\n    \n    // if a specific DocDataLineReader was configured, must respect it\n    String docDataLineReaderClassName = getConfig().get(\"line.parser\", null);\n    if (docDataLineReaderClassName!=null) {\n      try {\n        final Class<? extends LineParser> clazz = \n          Class.forName(docDataLineReaderClassName).asSubclass(LineParser.class);\n        Constructor<? extends LineParser> cnstr = clazz.getConstructor(new Class[]{String[].class});\n        return cnstr.newInstance((Object)header);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Failed to instantiate \"+docDataLineReaderClassName, e);\n      }\n    }\n\n    // if this the simple case,   \n    if (Arrays.deepEquals(header, WriteLineDocTask.DEFAULT_FIELDS)) {\n      return new SimpleLineParser(header);\n    }\n    return new HeaderLineParser(header);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}