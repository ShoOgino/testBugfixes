{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e7ae10c50f71c27f38db329bd22245ebc97196fd","e7ae10c50f71c27f38db329bd22245ebc97196fd","edc944077593063d718a895a9d7afdf6895d6685","edc944077593063d718a895a9d7afdf6895d6685"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":["edc944077593063d718a895a9d7afdf6895d6685","edc944077593063d718a895a9d7afdf6895d6685"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = MultiFields.getTerms(reader, field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicIndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicIndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["382fe3a6ca9745891afebda9b9a57cc158305545"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"382fe3a6ca9745891afebda9b9a57cc158305545":["3cc749c053615f5871f3b95715fe292f34e70a53"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}