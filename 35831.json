{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesToReuse(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesToReuse(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesToReuse(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesToReuse(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesToReuse(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesToReuse(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesToReuse(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesToReuse(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesTo(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesTo(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesToReuse(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesToReuse(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"089745617a0f9c49f3719652025f61c07e5ce4ae","date":1381543020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesTo(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesTo(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n    // currently though emits no tokens for empty string: maybe we can do it,\n    // but we don't want to emit tokens infinitely...\n    assertAnalyzesTo(a, \"\", new String[0]);\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesTo(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesTo(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeyword().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesTo(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesTo(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n    // currently though emits no tokens for empty string: maybe we can do it,\n    // but we don't want to emit tokens infinitely...\n    assertAnalyzesTo(a, \"\", new String[0]);\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeywordAnalyzer */\n  public void testKeyword() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    assertAnalyzesTo(a, \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \",\n        new String[] { \"a-bc123 defg+hijklmn567opqrstuv78wxy_z \" });\n    assertAnalyzesTo(a, \"aba4cadaba-Shazam\",\n        new String[] { \"aba4cadaba-Shazam\" });\n    assertAnalyzesTo(a, \"break+on/Nothing\",\n        new String[] { \"break+on/Nothing\" });\n    // currently though emits no tokens for empty string: maybe we can do it,\n    // but we don't want to emit tokens infinitely...\n    assertAnalyzesTo(a, \"\", new String[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["089745617a0f9c49f3719652025f61c07e5ce4ae"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"089745617a0f9c49f3719652025f61c07e5ce4ae":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["089745617a0f9c49f3719652025f61c07e5ce4ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"089745617a0f9c49f3719652025f61c07e5ce4ae":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}