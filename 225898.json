{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq.build());\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}