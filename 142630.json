{"path":"lucene/luke/src/java/org/apache/lucene/luke/util/reflection/SubtypeCollector#run().mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/util/reflection/SubtypeCollector#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    for (URL url : urls) {\n      try (JarInputStream jis = new JarInputStream(url.openStream())) {\n        // iterate all zip entry in the jar\n        ZipEntry entry;\n        while ((entry = jis.getNextEntry()) != null) {\n          String name = entry.getName();\n          if (name.endsWith(\".class\") && name.indexOf('$') < 0\n              && !name.contains(\"package-info\") && !name.startsWith(\"META-INF\")) {\n            String fqcn = convertToFQCN(name);\n            if (!fqcn.startsWith(packageName)) {\n              continue;\n            }\n            for (ClassLoader cl : classLoaders) {\n              try {\n                Class<?> clazz = Class.forName(fqcn, false, cl);\n                if (superType.isAssignableFrom(clazz) && !Objects.equals(superType, clazz)) {\n                  types.add(clazz.asSubclass(superType));\n                }\n                break;\n              } catch (Throwable e) {\n              }\n            }\n          }\n        }\n      } catch (IOException e) {\n        log.error(\"Cannot load jar \" + url.toString(), e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/util/reflection/SubtypeCollector#run().mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/util/reflection/SubtypeCollector#run().mjava","sourceNew":"  @Override\n  public void run() {\n    for (URL url : urls) {\n      try (JarInputStream jis = new JarInputStream(url.openStream())) {\n        // iterate all zip entry in the jar\n        ZipEntry entry;\n        while ((entry = jis.getNextEntry()) != null) {\n          String name = entry.getName();\n          if (name.endsWith(\".class\") && name.indexOf('$') < 0\n              && !name.contains(\"package-info\") && !name.startsWith(\"META-INF\")) {\n            String fqcn = convertToFQCN(name);\n            if (!fqcn.startsWith(packageName)) {\n              continue;\n            }\n            for (ClassLoader cl : classLoaders) {\n              try {\n                Class<?> clazz = Class.forName(fqcn, false, cl);\n                if (superType.isAssignableFrom(clazz) && !Objects.equals(superType, clazz)) {\n                  types.add(clazz.asSubclass(superType));\n                }\n                break;\n              } catch (Throwable e) {\n              }\n            }\n          }\n        }\n      } catch (IOException e) {\n        log.error(\"Cannot load jar {}\", url, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    for (URL url : urls) {\n      try (JarInputStream jis = new JarInputStream(url.openStream())) {\n        // iterate all zip entry in the jar\n        ZipEntry entry;\n        while ((entry = jis.getNextEntry()) != null) {\n          String name = entry.getName();\n          if (name.endsWith(\".class\") && name.indexOf('$') < 0\n              && !name.contains(\"package-info\") && !name.startsWith(\"META-INF\")) {\n            String fqcn = convertToFQCN(name);\n            if (!fqcn.startsWith(packageName)) {\n              continue;\n            }\n            for (ClassLoader cl : classLoaders) {\n              try {\n                Class<?> clazz = Class.forName(fqcn, false, cl);\n                if (superType.isAssignableFrom(clazz) && !Objects.equals(superType, clazz)) {\n                  types.add(clazz.asSubclass(superType));\n                }\n                break;\n              } catch (Throwable e) {\n              }\n            }\n          }\n        }\n      } catch (IOException e) {\n        log.error(\"Cannot load jar \" + url.toString(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}