{"path":"src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection,DocumentsWriter.FlushState).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection,DocumentsWriter.FlushState).mjava","pathOld":"/dev/null","sourceNew":"  public void flush(Collection threads, DocumentsWriter.FlushState state) throws IOException {\n\n    Map childThreadsAndFields = new HashMap();\n    Iterator it = threads.iterator();\n    while(it.hasNext()) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) it.next();\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    fieldInfos.write(state.directory, state.segmentName + \".fnm\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["99351c613f288821fa2b1fa505fe5cbab9ab0600"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection,SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection,DocumentsWriter.FlushState).mjava","sourceNew":"  public void flush(Collection threads, SegmentWriteState state) throws IOException {\n\n    Map childThreadsAndFields = new HashMap();\n    Iterator it = threads.iterator();\n    while(it.hasNext()) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) it.next();\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  public void flush(Collection threads, DocumentsWriter.FlushState state) throws IOException {\n\n    Map childThreadsAndFields = new HashMap();\n    Iterator it = threads.iterator();\n    while(it.hasNext()) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) it.next();\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    fieldInfos.write(state.directory, state.segmentName + \".fnm\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d17492f26096e19670d947d1be5e9adc52b1d3d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5350389bf83287111f7760b9e3db3af8e3648474":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}