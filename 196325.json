{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testShardCreationNameValidation().mjava","sourceNew":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testShardCreationNameValidation().mjava","sourceNew":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","sourceNew":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testShardCreationNameValidation().mjava","sourceNew":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testShardCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      // Create a collection w/ implicit router\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"shards\", \"a\");\n      params.set(\"router.name\", \"implicit\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATESHARD.toString());\n      params.set(\"collection\", \"valid_collection_name\");\n      params.set(\"shard\", \"invalid@name#with$weird%characters\");\n\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db96734b79e26d948b59f68bd4564c4836a71acf":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["db96734b79e26d948b59f68bd4564c4836a71acf"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}