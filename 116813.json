{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    List<Sorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      PerField perField = getPerField(sortField.getField());\n      if (perField != null && perField.docValuesWriter != null &&\n          finishedDocValues.contains(perField.fieldInfo.name) == false) {\n          perField.docValuesWriter.finish(state.segmentInfo.maxDoc());\n          Sorter.DocComparator cmp = perField.docValuesWriter.getDocComparator(state.segmentInfo.maxDoc(), sortField);\n          comparators.add(cmp);\n          finishedDocValues.add(perField.fieldInfo.name);\n      } else {\n        // safe to ignore, sort field with no values or already seen before\n      }\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(new Sorter.DocComparator[comparators.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    List<Sorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      PerField perField = getPerField(sortField.getField());\n      if (perField != null && perField.docValuesWriter != null &&\n          finishedDocValues.contains(perField.fieldInfo.name) == false) {\n          perField.docValuesWriter.finish(state.segmentInfo.maxDoc());\n          Sorter.DocComparator cmp = perField.docValuesWriter.getDocComparator(state.segmentInfo.maxDoc(), sortField);\n          comparators.add(cmp);\n          finishedDocValues.add(perField.fieldInfo.name);\n      } else {\n        // safe to ignore, sort field with no values or already seen before\n      }\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(new Sorter.DocComparator[comparators.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","sourceNew":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    LeafReader docValuesReader = getDocValuesLeafReader();\n\n    List<IndexSorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new UnsupportedOperationException(\"Cannot sort index using sort field \" + sortField);\n      }\n      comparators.add(sorter.getDocComparator(docValuesReader, state.segmentInfo.maxDoc()));\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(IndexSorter.DocComparator[]::new));\n  }\n\n","sourceOld":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    List<Sorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      PerField perField = getPerField(sortField.getField());\n      if (perField != null && perField.docValuesWriter != null &&\n          finishedDocValues.contains(perField.fieldInfo.name) == false) {\n          perField.docValuesWriter.finish(state.segmentInfo.maxDoc());\n          Sorter.DocComparator cmp = perField.docValuesWriter.getDocComparator(state.segmentInfo.maxDoc(), sortField);\n          comparators.add(cmp);\n          finishedDocValues.add(perField.fieldInfo.name);\n      } else {\n        // safe to ignore, sort field with no values or already seen before\n      }\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(new Sorter.DocComparator[comparators.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#maybeSortSegment(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","sourceNew":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    LeafReader docValuesReader = getDocValuesLeafReader();\n\n    List<IndexSorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new UnsupportedOperationException(\"Cannot sort index using sort field \" + sortField);\n      }\n      comparators.add(sorter.getDocComparator(docValuesReader, state.segmentInfo.maxDoc()));\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(IndexSorter.DocComparator[]::new));\n  }\n\n","sourceOld":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    LeafReader docValuesReader = getDocValuesLeafReader();\n\n    List<IndexSorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new UnsupportedOperationException(\"Cannot sort index using sort field \" + sortField);\n      }\n      comparators.add(sorter.getDocComparator(docValuesReader, state.segmentInfo.maxDoc()));\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(IndexSorter.DocComparator[]::new));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":5,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#maybeSortSegment(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#maybeSortSegment(SegmentWriteState).mjava","sourceNew":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    LeafReader docValuesReader = getDocValuesLeafReader();\n\n    List<IndexSorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new UnsupportedOperationException(\"Cannot sort index using sort field \" + sortField);\n      }\n      comparators.add(sorter.getDocComparator(docValuesReader, state.segmentInfo.maxDoc()));\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(IndexSorter.DocComparator[]::new));\n  }\n\n","sourceOld":"  private Sorter.DocMap maybeSortSegment(SegmentWriteState state) throws IOException {\n    Sort indexSort = state.segmentInfo.getIndexSort();\n    if (indexSort == null) {\n      return null;\n    }\n\n    LeafReader docValuesReader = getDocValuesLeafReader();\n\n    List<IndexSorter.DocComparator> comparators = new ArrayList<>();\n    for (int i = 0; i < indexSort.getSort().length; i++) {\n      SortField sortField = indexSort.getSort()[i];\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new UnsupportedOperationException(\"Cannot sort index using sort field \" + sortField);\n      }\n      comparators.add(sorter.getDocComparator(docValuesReader, state.segmentInfo.maxDoc()));\n    }\n    Sorter sorter = new Sorter(indexSort);\n    // returns null if the documents are already sorted\n    return sorter.sort(state.segmentInfo.maxDoc(), comparators.toArray(IndexSorter.DocComparator[]::new));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["773bf150032d3ef6c95997a154fb914b82875cb8","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["773bf150032d3ef6c95997a154fb914b82875cb8"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"773bf150032d3ef6c95997a154fb914b82875cb8":["680b6449f09827f58fe987aff279e014c311d966","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}