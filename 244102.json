{"path":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","commits":[{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  public <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  public <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        \n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  public <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe3c163c8df3fb3e4248c30f8ae8034cc786589","date":1189317596,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        \n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  public <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        \n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        \n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        \n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try { \n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors whiuch take in SolrCore. It is recommended to obtain SolrCore by implementing SolrCoreAare.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) clazz.newInstance();//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n      try {\n        clazz = solrConfig.getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        \n        java.lang.reflect.Constructor cons = clazz.getConstructor(new Class[]{SolrCore.class});\n        return (T) cons.newInstance(new Object[]{this});\n      } catch(NoSuchMethodException xnomethod) {\n        return (T) clazz.newInstance();\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c6cddeaca06bbdbcc65b2c527e8e2d2a573772","date":1244536603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try { \n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors whiuch take in SolrCore. It is recommended to obtain SolrCore by implementing SolrCoreAare.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) clazz.newInstance();//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4a86efd508ea6ff321e7b4d46e74a74f48cfcb8","date":1253594290,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"f4a86efd508ea6ff321e7b4d46e74a74f48cfcb8":["89c6cddeaca06bbdbcc65b2c527e8e2d2a573772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"89c6cddeaca06bbdbcc65b2c527e8e2d2a573772":["b338a77d735377ad6a2b02379ce3000377ff8631"],"ad94625fb8d088209f46650c8097196fec67f00c":["f4a86efd508ea6ff321e7b4d46e74a74f48cfcb8"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"b338a77d735377ad6a2b02379ce3000377ff8631":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"f4a86efd508ea6ff321e7b4d46e74a74f48cfcb8":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"89c6cddeaca06bbdbcc65b2c527e8e2d2a573772":["f4a86efd508ea6ff321e7b4d46e74a74f48cfcb8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["b338a77d735377ad6a2b02379ce3000377ff8631"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"b338a77d735377ad6a2b02379ce3000377ff8631":["89c6cddeaca06bbdbcc65b2c527e8e2d2a573772"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}