{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","sourceNew":"  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","sourceOld":"  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","sourceNew":"  @Override\n  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","sourceOld":"  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","sourceNew":"  @Override\n  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","sourceOld":"  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner#findStartOffset(StringBuilder,int).mjava","sourceNew":"  @Override\n  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, it's a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","sourceOld":"  @Override\n  public int findStartOffset(StringBuilder buffer, int start) {\n    // avoid illegal start offset\n    if( start > buffer.length() || start < 1 ) return start;\n    int offset, count = maxScan;\n    for( offset = start; offset > 0 && count > 0; count-- ){\n      // found?\n      if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;\n      offset--;\n    }\n    // if we scanned up to the start of the text, return it, its a \"boundary\"\n    if (offset == 0) {\n      return 0;\n    }\n    // not found\n    return start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}