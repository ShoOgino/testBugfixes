{"path":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#assertBruteForce(String).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#assertBruteForce(String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertBruteForce(String input) throws Exception {\n    assert input.matches(\" .* \");\n    baseParams.set(\"overlaps\", \"ALL\");\n\n    //loop through NAMES and find all tag offsets\n    List<TestTag> testTags = new ArrayList<>();\n    for (String name : NAMES) {\n      String spaceName = \" \"+name+\" \";\n      int off = 0;\n      while (true) {\n        int idx = input.indexOf(spaceName, off);\n        if (idx < 0)\n          break;\n        testTags.add(new TestTag(idx + 1, idx + 1 + name.length(), name, name));\n        off = idx + 1;\n      }\n    }\n\n    //assert\n    assertTags(reqDoc(input), testTags.toArray(new TestTag[testTags.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#assertBruteForce(String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertBruteForce(String input) throws Exception {\n    assert input.matches(\" .* \");\n    baseParams.set(\"overlaps\", \"ALL\");\n\n    //loop through NAMES and find all tag offsets\n    List<TestTag> testTags = new ArrayList<>();\n    for (String name : NAMES) {\n      String spaceName = \" \"+name+\" \";\n      int off = 0;\n      while (true) {\n        int idx = input.indexOf(spaceName, off);\n        if (idx < 0)\n          break;\n        testTags.add(new TestTag(idx + 1, idx + 1 + name.length(), name, name));\n        off = idx + 1;\n      }\n    }\n\n    //assert\n    assertTags(reqDoc(input), testTags.toArray(new TestTag[testTags.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#assertBruteForce(String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertBruteForce(String input) throws Exception {\n    assert input.matches(\" .* \");\n    baseParams.set(\"overlaps\", \"ALL\");\n\n    //loop through NAMES and find all tag offsets\n    List<TestTag> testTags = new ArrayList<>();\n    for (String name : NAMES) {\n      String spaceName = \" \"+name+\" \";\n      int off = 0;\n      while (true) {\n        int idx = input.indexOf(spaceName, off);\n        if (idx < 0)\n          break;\n        testTags.add(new TestTag(idx + 1, idx + 1 + name.length(), name, name));\n        off = idx + 1;\n      }\n    }\n\n    //assert\n    assertTags(reqDoc(input), testTags.toArray(new TestTag[testTags.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}