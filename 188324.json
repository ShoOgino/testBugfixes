{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","commits":[{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    try {\n      wrapperModel.validate();\n    } catch (ModelException e) {\n      fail(\"Validation must succeed if no wrapped model is set\");\n    }\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    try {\n      wrapperModelWithFeatures.validate();\n      fail(\"Validation must fail if features of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    try {\n      wrapperModelWithNorms.validate();\n      fail(\"Validation must fail if norms of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n      } catch (ModelException e) {\n        fail(\"Validation must succeed if the wrapped model is valid\");\n      }\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if wrapped model feature store differs from wrapper model feature store\");\n      } catch (ModelException e) {\n        assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"no features declared for model testModel\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    try {\n      wrapperModel.validate();\n    } catch (ModelException e) {\n      fail(\"Validation must succeed if no wrapped model is set\");\n    }\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    try {\n      wrapperModelWithFeatures.validate();\n      fail(\"Validation must fail if features of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    try {\n      wrapperModelWithNorms.validate();\n      fail(\"Validation must fail if norms of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n      } catch (ModelException e) {\n        fail(\"Validation must succeed if the wrapped model is valid\");\n      }\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if wrapped model feature store differs from wrapper model feature store\");\n      } catch (ModelException e) {\n        assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"no features declared for model testModel\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","sourceNew":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    wrapperModel.validate();\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    ModelException e = expectThrows(ModelException.class, wrapperModelWithFeatures::validate);\n    assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    e = expectThrows(ModelException.class, wrapperModelWithNorms::validate);\n    assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      wrapperModel.updateModel(wrappedModel);\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"no features declared for model testModel\", e.getMessage());\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    try {\n      wrapperModel.validate();\n    } catch (ModelException e) {\n      fail(\"Validation must succeed if no wrapped model is set\");\n    }\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    try {\n      wrapperModelWithFeatures.validate();\n      fail(\"Validation must fail if features of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    try {\n      wrapperModelWithNorms.validate();\n      fail(\"Validation must fail if norms of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n      } catch (ModelException e) {\n        fail(\"Validation must succeed if the wrapped model is valid\");\n      }\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if wrapped model feature store differs from wrapper model feature store\");\n      } catch (ModelException e) {\n        assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"no features declared for model testModel\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","sourceNew":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    wrapperModel.validate();\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    ModelException e = expectThrows(ModelException.class, wrapperModelWithFeatures::validate);\n    assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    e = expectThrows(ModelException.class, wrapperModelWithNorms::validate);\n    assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      wrapperModel.updateModel(wrappedModel);\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"no features declared for model testModel\", e.getMessage());\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    try {\n      wrapperModel.validate();\n    } catch (ModelException e) {\n      fail(\"Validation must succeed if no wrapped model is set\");\n    }\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    try {\n      wrapperModelWithFeatures.validate();\n      fail(\"Validation must fail if features of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    try {\n      wrapperModelWithNorms.validate();\n      fail(\"Validation must fail if norms of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n      } catch (ModelException e) {\n        fail(\"Validation must succeed if the wrapped model is valid\");\n      }\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if wrapped model feature store differs from wrapper model feature store\");\n      } catch (ModelException e) {\n        assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"no features declared for model testModel\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testValidate().mjava","sourceNew":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    wrapperModel.validate();\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    ModelException e = expectThrows(ModelException.class, wrapperModelWithFeatures::validate);\n    assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    e = expectThrows(ModelException.class, wrapperModelWithNorms::validate);\n    assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      wrapperModel.updateModel(wrappedModel);\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"no features declared for model testModel\", e.getMessage());\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));\n      assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidate() throws Exception {\n    WrapperModel wrapperModel = new StubWrapperModel(\"testModel\");\n    try {\n      wrapperModel.validate();\n    } catch (ModelException e) {\n      fail(\"Validation must succeed if no wrapped model is set\");\n    }\n\n    // wrapper model with features\n    WrapperModel wrapperModelWithFeatures = new StubWrapperModel(\"testModel\",\n        Collections.singletonList(new ValueFeature(\"val\", Collections.emptyMap())), Collections.emptyList());\n    try {\n      wrapperModelWithFeatures.validate();\n      fail(\"Validation must fail if features of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"features must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    // wrapper model with norms\n    WrapperModel wrapperModelWithNorms = new StubWrapperModel(\"testModel\",\n        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));\n    try {\n      wrapperModelWithNorms.validate();\n      fail(\"Validation must fail if norms of the wrapper model isn't empty\");\n    } catch (ModelException e) {\n      assertEquals(\"norms must be empty for the wrapper model testModel\", e.getMessage());\n    }\n\n    assumeWorkingMockito();\n\n    // update valid model\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n      } catch (ModelException e) {\n        fail(\"Validation must succeed if the wrapped model is valid\");\n      }\n    }\n\n    // update invalid model (feature store mismatch)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(\"wrappedFeatureStore\",\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if wrapped model feature store differs from wrapper model feature store\");\n      } catch (ModelException e) {\n        assertEquals(\"wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no features)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Collections.emptyList(),\n              Arrays.asList(\n                  IdentityNormalizer.INSTANCE,\n                  IdentityNormalizer.INSTANCE)\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"no features declared for model testModel\", e.getMessage());\n      }\n    }\n\n    // update invalid model (no norms)\n    {\n      LTRScoringModel wrappedModel = \n          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n              Arrays.asList(\n                  new ValueFeature(\"v1\", Collections.emptyMap()),\n                  new ValueFeature(\"v2\", Collections.emptyMap())),\n              Collections.emptyList()\n              );\n      try {\n        wrapperModel.updateModel(wrappedModel);\n        fail(\"Validation must fail if the wrapped model is invalid\");\n      } catch (ModelException e) {\n        assertEquals(\"counted 2 features and 0 norms in model testModel\", e.getMessage());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a03034a121f635bebacef74693404e3273b614a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["1aad05eeff7818b0833c02ac6b743aa72054963b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a03034a121f635bebacef74693404e3273b614a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1aad05eeff7818b0833c02ac6b743aa72054963b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","a03034a121f635bebacef74693404e3273b614a6"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}