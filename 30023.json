{"path":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","commits":[{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    final int numBits = random.nextInt(2000);\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48b06a043b109b4fd3fa5579738b12619e100ea4","date":1310882430,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","sourceNew":"  public void testEquals() {\n    final int numBits = random.nextInt(2000) + 1 /* numBits cannot be 0 */;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":"  public void testEquals() {\n    final int numBits = random.nextInt(2000);\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"843b7d20cfe6c2c4632b9123a73596f271baa10d","date":1310926494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","sourceNew":"  public void testEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random.nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":"  public void testEquals() {\n    final int numBits = random.nextInt(2000) + 1 /* numBits cannot be 0 */;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testEquals().mjava","sourceNew":"  public void testEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random.nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":"  public void testEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random.nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b2.equals(b1));\n        b2.set(idx);\n        assertTrue(b1.equals(b2));\n        assertTrue(b2.equals(b1));\n      }\n    }\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["843b7d20cfe6c2c4632b9123a73596f271baa10d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"48b06a043b109b4fd3fa5579738b12619e100ea4":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"843b7d20cfe6c2c4632b9123a73596f271baa10d":["48b06a043b109b4fd3fa5579738b12619e100ea4"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"48b06a043b109b4fd3fa5579738b12619e100ea4":["843b7d20cfe6c2c4632b9123a73596f271baa10d"],"843b7d20cfe6c2c4632b9123a73596f271baa10d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["48b06a043b109b4fd3fa5579738b12619e100ea4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}