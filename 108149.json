{"path":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","commits":[{"id":"18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d","date":1235571180,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"/dev/null","sourceNew":"  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}