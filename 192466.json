{"path":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      DocValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}