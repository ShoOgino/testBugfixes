{"path":"src/java/org/apache/lucene/search/MultiSearcher.MultiSearcherCallableWithSort#call().mjava","commits":[{"id":"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf","date":1257873376,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher.MultiSearcherCallableWithSort#call().mjava","pathOld":"/dev/null","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiSearcher.MultiSearcherCallableWithSort#call().mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"]},"commit2Childs":{"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}