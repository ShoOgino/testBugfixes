{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","commits":[{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","pathOld":"/dev/null","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new ScorerPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new ScorerWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new ScorerWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue<Scorer>(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper<Scorer>(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new ScorerPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new ScorerWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new ScorerWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef808a48015f9491f99f680646fc74641dd6559","date":1430216787,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue<Scorer>(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper<Scorer>(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue<Scorer>(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper<Scorer>(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue<Scorer>(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper<Scorer>(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","sourceNew":null,"sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["eef808a48015f9491f99f680646fc74641dd6559"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"],"eef808a48015f9491f99f680646fc74641dd6559":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["eef808a48015f9491f99f680646fc74641dd6559"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"eef808a48015f9491f99f680646fc74641dd6559":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}