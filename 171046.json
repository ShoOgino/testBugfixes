{"path":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":["8ff728f0ac9112fac26f50ef2a8e7580c2525e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}