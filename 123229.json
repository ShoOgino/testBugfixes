{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiVariateNormalDistributionEvaluator#doWork(Object,Object).mjava","commits":[{"id":"8a3a0090dc960985448654a5dd4c117c71c3f7a5","date":1513795907,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiVariateNormalDistributionEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    List<Number> means = (List<Number>)first;\n    Matrix covar = (Matrix)second;\n\n    double[] m = new double[means.size()];\n    for(int i=0; i< m.length; i++) {\n      m[i] = means.get(i).doubleValue();\n    }\n\n    return new MultivariateNormalDistribution(m, covar.getData());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiVariateNormalDistributionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MultiVariateNormalDistributionEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> means = (List<Number>)first;\n    Matrix covar = (Matrix)second;\n\n    double[] m = new double[means.size()];\n    for(int i=0; i< m.length; i++) {\n      m[i] = means.get(i).doubleValue();\n    }\n\n    return new MultivariateNormalDistribution(m, covar.getData());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    List<Number> means = (List<Number>)first;\n    Matrix covar = (Matrix)second;\n\n    double[] m = new double[means.size()];\n    for(int i=0; i< m.length; i++) {\n      m[i] = means.get(i).doubleValue();\n    }\n\n    return new MultivariateNormalDistribution(m, covar.getData());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}