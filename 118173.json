{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMapper().mjava","commits":[{"id":"a07eeba66d4090af0095b50cbd1795a3d6182c1d","date":1538797239,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMapper().mjava","pathOld":"/dev/null","sourceNew":"  /** @see UninvertingReader */\n  public Function<String, UninvertingReader.Type> getUninversionMapper() {\n    return name -> {\n      SchemaField sf = getFieldOrNull(name);\n      if (sf == null) {\n        return null;\n      }\n      return sf.getType().getUninversionType(sf);\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMapper().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMapper().mjava","sourceNew":"  /** @see UninvertingReader */\n  public Function<String, UninvertingReader.Type> getUninversionMapper() {\n    return name -> {\n      SchemaField sf = getFieldOrNull(name);\n      if (sf == null) {\n        return null;\n      }\n\n      if (sf.isUninvertible()) {\n        return sf.getType().getUninversionType(sf);\n      }\n      // else...\n      \n      // It would be nice to throw a helpful error here, with a good useful message for the user,\n      // but unfortunately, inspite of the UninvertingReader class jdoc claims that the uninversion\n      // process is lazy, that doesn't mean it's lazy as of \"When a caller attempts ot use doc values\"\n      //\n      // The *mapping* function is consulted on LeafReader init/wrap for every FieldInfos found w/o docValues.\n      //\n      // So if we throw an error here instead of returning null, the act of just opening a\n      // newSearcher will trigger that error for any field, even if no one ever attempts to uninvert it\n      return null;\n    };\n  }\n\n","sourceOld":"  /** @see UninvertingReader */\n  public Function<String, UninvertingReader.Type> getUninversionMapper() {\n    return name -> {\n      SchemaField sf = getFieldOrNull(name);\n      if (sf == null) {\n        return null;\n      }\n      return sf.getType().getUninversionType(sf);\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMapper().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMapper().mjava","sourceNew":"  /** @see UninvertingReader */\n  public Function<String, UninvertingReader.Type> getUninversionMapper() {\n    return name -> {\n      SchemaField sf = getFieldOrNull(name);\n      if (sf == null) {\n        return null;\n      }\n\n      if (sf.isUninvertible()) {\n        return sf.getType().getUninversionType(sf);\n      }\n      // else...\n\n      // It would be nice to throw a helpful error here, with a good useful message for the user,\n      // but unfortunately, inspite of the UninvertingReader class jdoc claims that the uninversion\n      // process is lazy, that doesn't mean it's lazy as of \"When a caller attempts ot use doc values\"\n      //\n      // The *mapping* function is consulted on LeafReader init/wrap for every FieldInfos found w/o docValues.\n      //\n      // So if we throw an error here instead of returning null, the act of just opening a\n      // newSearcher will trigger that error for any field, even if no one ever attempts to uninvert it\n      return null;\n    };\n  }\n\n","sourceOld":"  /** @see UninvertingReader */\n  public Function<String, UninvertingReader.Type> getUninversionMapper() {\n    return name -> {\n      SchemaField sf = getFieldOrNull(name);\n      if (sf == null) {\n        return null;\n      }\n\n      if (sf.isUninvertible()) {\n        return sf.getType().getUninversionType(sf);\n      }\n      // else...\n      \n      // It would be nice to throw a helpful error here, with a good useful message for the user,\n      // but unfortunately, inspite of the UninvertingReader class jdoc claims that the uninversion\n      // process is lazy, that doesn't mean it's lazy as of \"When a caller attempts ot use doc values\"\n      //\n      // The *mapping* function is consulted on LeafReader init/wrap for every FieldInfos found w/o docValues.\n      //\n      // So if we throw an error here instead of returning null, the act of just opening a\n      // newSearcher will trigger that error for any field, even if no one ever attempts to uninvert it\n      return null;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}