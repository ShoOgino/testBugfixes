{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c","date":1341488793,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = TestUtil.createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = TestUtil.createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = TestUtil.createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), \"UTF-8\"));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = TestUtil.createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.shutdown();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.shutdown();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile.toPath());\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile);\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(lineFile), StandardCharsets.UTF_8));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile.toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    Path lineFile = createTempFile(\"test.reuters.lines\", \".txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = Files.newBufferedReader(lineFile, StandardCharsets.UTF_8);\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.toAbsolutePath().toString().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    Files.delete(lineFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d0d579490a72f2e6297eaa648940611234c57cf1","7d89d7e4e5101347833eea558851bf4209218619"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["f4abec28b874149a7223e32cc7a01704c27790de"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["7d89d7e4e5101347833eea558851bf4209218619","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"7d89d7e4e5101347833eea558851bf4209218619":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"d0d579490a72f2e6297eaa648940611234c57cf1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c":["19275ba31e621f6da1b83bf13af75233876fd3d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7d89d7e4e5101347833eea558851bf4209218619","d0d579490a72f2e6297eaa648940611234c57cf1"],"d0d579490a72f2e6297eaa648940611234c57cf1":["5eb2511ababf862ea11e10761c70ee560cd84510"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f4abec28b874149a7223e32cc7a01704c27790de":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501","5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}