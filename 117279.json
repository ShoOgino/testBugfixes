{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","commits":[{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,int[],boolean).mjava","sourceNew":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          // don't grow() offsets since growing pattern for long and int is not the same.\n          // since we want docs and offsets at the same length, just grow it manually.\n          long[] tmp = new long[docs.length];\n          System.arraycopy(offsets, 0, tmp, 0, offsets.length);\n          offsets = tmp;\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, final int[] old2new, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          // don't grow() offsets since growing pattern for long and int is not the same.\n          // since we want docs and offsets at the same length, just grow it manually.\n          long[] tmp = new long[docs.length];\n          System.arraycopy(offsets, 0, tmp, 0, offsets.length);\n          offsets = tmp;\n        }\n        docs[i] = old2new[doc];\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      new DocOffsetSorterTemplate(docs, offsets).timSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          docs = ArrayUtil.grow(docs, docs.length + 1);\n          // don't grow() offsets since growing pattern for long and int is not the same.\n          // since we want docs and offsets at the same length, just grow it manually.\n          long[] tmp = new long[docs.length];\n          System.arraycopy(offsets, 0, tmp, 0, offsets.length);\n          offsets = tmp;\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      SorterTemplate sorter = new DocOffsetSorterTemplate(docs, offsets);\n      sorter.quickSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a260e1fefced66a58d52044266f9fa20d81ae74b","date":1363613778,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n      }\n      final IndexOutput out = new RAMOutputStream(file);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      new DocOffsetSorterTemplate(docs, offsets).timSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    public SortingDocsAndPositionsEnum(final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      final RAMFile file = new RAMFile();\n      final IndexOutput out = new RAMOutputStream(file);\n      docs = new int[32];\n      offsets = new long[32];\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      new DocOffsetSorterTemplate(docs, offsets).timSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"d666f5b596b5ce43296739e9453ff761c7ddde3f":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a260e1fefced66a58d52044266f9fa20d81ae74b"]},"commit2Childs":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d666f5b596b5ce43296739e9453ff761c7ddde3f":["a260e1fefced66a58d52044266f9fa20d81ae74b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}