{"path":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","commits":[{"id":"d64148a458eb3ddf4d1bb1f1753cb9af194e1707","date":1247144811,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","pathOld":"/dev/null","sourceNew":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6108dae71b5018effc897a9669aa8a99133005e2","date":1264857193,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6108dae71b5018effc897a9669aa8a99133005e2":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6108dae71b5018effc897a9669aa8a99133005e2"]},"commit2Childs":{"6108dae71b5018effc897a9669aa8a99133005e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["6108dae71b5018effc897a9669aa8a99133005e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}