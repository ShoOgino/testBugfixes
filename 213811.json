{"path":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}