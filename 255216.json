{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","commits":[{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      throw recordAndThrow(dcore.getName(), \"Unable to create core: \" + dcore.getName(), e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","4c630823e52a651e16e3a73743e11465ac856eed","27d63bd6ea608c208e37fd3e13e7b27f06da6b60","27d63bd6ea608c208e37fd3e13e7b27f06da6b60","27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      throw recordAndThrow(dcore.getName(), \"Unable to create core: \" + dcore.getName(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28fc571bd8818afd7de714d775f89b3db6f6686c","date":1406137810,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has shutdown.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c630823e52a651e16e3a73743e11465ac856eed","date":1420742337,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      throw t;\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    }\n    catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    }\n\n  }\n\n","bugFix":["85032ab568b3f50eabd577aaa994ba197db93758"],"bugIntro":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    SolrCore core = null;\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      IOUtils.closeQuietly(core);\n      throw t;\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      SolrCore core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      throw t;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","4fcb2881909cfa516790e59f3af6d01b665778a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    SolrCore core = null;\n    try {\n\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      IOUtils.closeQuietly(core);\n      throw t;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has close.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4fcb2881909cfa516790e59f3af6d01b665778a9","date":1432844875,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  public SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb65cc25534f4e0d77ed573d35995eb0b836b818","date":1454441028,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5469e1b49cf7f51c02519aff49b848ff8bbbc663","date":1454885560,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":["fb65cc25534f4e0d77ed573d35995eb0b836b818"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid core: \" + dcore.getName()\n            + \". Core names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid core: \" + dcore.getName()\n            + \". Core names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a839eb6696740aa302262e32e6f45b5e70b47bff","date":1457028247,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.CORE, dcore.getName()));\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid core: \" + dcore.getName()\n            + \". Core names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.CORE, dcore.getName()));\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid core: \" + dcore.getName()\n            + \". Core names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      if (!SolrIdentifierValidator.validateCoreName(dcore.getName())) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.CORE, dcore.getName()));\n      }\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"593370180729325d1d6e43c1dfad05ea2a38b707","date":1463517150,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":3,"author":"David Smiley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","date":1464965423,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"650d17e953fb1d54e644f9928e3202e68b88eeb1","date":1465215234,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState, boolean newCollection) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState, newCollection);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new core based on a CoreDescriptor.\n   *\n   * @param dcore        a core descriptor\n   * @param publishState publish core state to the cluster if true\n   *\n   * @return the newly created core\n   */\n  private SolrCore create(CoreDescriptor dcore, boolean publishState) {\n\n    if (isShutDown) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Solr has been shutdown.\");\n    }\n\n    SolrCore core = null;\n    try {\n      MDCLoggingContext.setCore(core);\n      SolrIdentifierValidator.validateCoreName(dcore.getName());\n      if (zkSys.getZkController() != null) {\n        zkSys.getZkController().preRegister(dcore);\n      }\n\n      ConfigSet coreConfig = coreConfigService.getConfig(dcore);\n      log.info(\"Creating SolrCore '{}' using configuration from {}\", dcore.getName(), coreConfig.getName());\n      core = new SolrCore(dcore, coreConfig);\n      solrCores.addCreated(core);\n\n      // always kick off recovery if we are in non-Cloud mode\n      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {\n        core.getUpdateHandler().getUpdateLog().recoverFromLog();\n      }\n\n      registerCore(dcore.getName(), core, publishState);\n\n      return core;\n    } catch (Exception e) {\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), e.getMessage(), e);\n      final SolrException solrException = new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create core [\" + dcore.getName() + \"]\", e);\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw solrException;\n    } catch (Throwable t) {\n      SolrException e = new SolrException(ErrorCode.SERVER_ERROR, \"JVM Error creating core [\" + dcore.getName() + \"]: \" + t.getMessage(), t);\n      log.error(\"Error creating core [{}]: {}\", dcore.getName(), t.getMessage(), t);\n      coreInitFailures.put(dcore.getName(), new CoreLoadFailure(dcore, e));\n      if(core != null && !core.isClosed())\n        IOUtils.closeQuietly(core);\n      throw t;\n    } finally {\n      MDCLoggingContext.clear();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"acd1f5a977dc3b97799ed300423294e2c457774f":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"28fc571bd8818afd7de714d775f89b3db6f6686c":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"191128ac5b85671b1671e2c857437694283b6ebf":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","650d17e953fb1d54e644f9928e3202e68b88eeb1"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["daed6b66edd950a7f2af9857df64b09acf3deacc","593370180729325d1d6e43c1dfad05ea2a38b707"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["4fcb2881909cfa516790e59f3af6d01b665778a9"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["06043fcf612d2cd93636c22cd062e0641406b417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["fb65cc25534f4e0d77ed573d35995eb0b836b818"],"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["4c630823e52a651e16e3a73743e11465ac856eed"],"9c9819d04ff44d2877a5a19257cd662751284a5f":["daed6b66edd950a7f2af9857df64b09acf3deacc","593370180729325d1d6e43c1dfad05ea2a38b707"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"fb65cc25534f4e0d77ed573d35995eb0b836b818":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"4fcb2881909cfa516790e59f3af6d01b665778a9":["275019a81d0883a1db4560391b072d1fbe272ec4"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["191128ac5b85671b1671e2c857437694283b6ebf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["daed6b66edd950a7f2af9857df64b09acf3deacc","d528fd7ae22865015b756e0a03832e2051de2a9c"],"4c630823e52a651e16e3a73743e11465ac856eed":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["28fc571bd8818afd7de714d775f89b3db6f6686c"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["85032ab568b3f50eabd577aaa994ba197db93758"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["06043fcf612d2cd93636c22cd062e0641406b417","a839eb6696740aa302262e32e6f45b5e70b47bff"],"593370180729325d1d6e43c1dfad05ea2a38b707":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"275019a81d0883a1db4560391b072d1fbe272ec4":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"06043fcf612d2cd93636c22cd062e0641406b417":["5469e1b49cf7f51c02519aff49b848ff8bbbc663","cbd8af67010775ee4b53c58597a30bbe480707ee"],"85032ab568b3f50eabd577aaa994ba197db93758":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d528fd7ae22865015b756e0a03832e2051de2a9c"]},"commit2Childs":{"acd1f5a977dc3b97799ed300423294e2c457774f":[],"28fc571bd8818afd7de714d775f89b3db6f6686c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["191128ac5b85671b1671e2c857437694283b6ebf"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["d470c8182e92b264680e34081b75e70a9f2b3c89","9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","593370180729325d1d6e43c1dfad05ea2a38b707"],"191128ac5b85671b1671e2c857437694283b6ebf":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["275019a81d0883a1db4560391b072d1fbe272ec4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","fb65cc25534f4e0d77ed573d35995eb0b836b818"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85032ab568b3f50eabd577aaa994ba197db93758"],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["650d17e953fb1d54e644f9928e3202e68b88eeb1","191128ac5b85671b1671e2c857437694283b6ebf"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"fb65cc25534f4e0d77ed573d35995eb0b836b818":["acd1f5a977dc3b97799ed300423294e2c457774f","5469e1b49cf7f51c02519aff49b848ff8bbbc663","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"4fcb2881909cfa516790e59f3af6d01b665778a9":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4c630823e52a651e16e3a73743e11465ac856eed":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["28fc571bd8818afd7de714d775f89b3db6f6686c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4c630823e52a651e16e3a73743e11465ac856eed"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"593370180729325d1d6e43c1dfad05ea2a38b707":["d470c8182e92b264680e34081b75e70a9f2b3c89","9c9819d04ff44d2877a5a19257cd662751284a5f"],"275019a81d0883a1db4560391b072d1fbe272ec4":["4fcb2881909cfa516790e59f3af6d01b665778a9"],"06043fcf612d2cd93636c22cd062e0641406b417":["a839eb6696740aa302262e32e6f45b5e70b47bff","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"85032ab568b3f50eabd577aaa994ba197db93758":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["acd1f5a977dc3b97799ed300423294e2c457774f","9c9819d04ff44d2877a5a19257cd662751284a5f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}