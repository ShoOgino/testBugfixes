{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7460755aa94143153400f49c8ac2746f5d092e1a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["7460755aa94143153400f49c8ac2746f5d092e1a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7460755aa94143153400f49c8ac2746f5d092e1a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}