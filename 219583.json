{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    ord = in.readLong();\n    docID = in.readInt();\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    if (longOrds) {\n      ord = in.readLong();\n    } else {\n      ord = in.readInt();\n    }\n    docID = in.readInt();\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    ord = in.readLong();\n    docID = in.readInt();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        ord = in.readLong();\n      } else {\n        ord = in.readInt();\n      }\n      docID = in.readInt();\n    } else {\n      ord = docID = in.readInt();\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    if (longOrds) {\n      ord = in.readLong();\n    } else {\n      ord = in.readInt();\n    }\n    docID = in.readInt();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc57257d8a309205ebefdf9ee778da293673f599","date":1458828168,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    docID = in.readInt();\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        ord = in.readLong();\n      } else {\n        ord = in.readInt();\n      }\n    } else {\n      ord = docID;\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        ord = in.readLong();\n      } else {\n        ord = in.readInt();\n      }\n      docID = in.readInt();\n    } else {\n      ord = docID = in.readInt();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (this.pointsInBuffer == 0) {\n      if (countLeft >= 0) {\n        if (countLeft == 0) {\n          return false;\n        }\n      }\n      try {\n        if (countLeft > maxPointOnHeap) {\n          in.readBytes(onHeapBuffer, 0, maxPointOnHeap * bytesPerDoc);\n          pointsInBuffer = maxPointOnHeap - 1;\n          countLeft -= maxPointOnHeap;\n        } else {\n          in.readBytes(onHeapBuffer, 0, (int) countLeft * bytesPerDoc);\n          pointsInBuffer = Math.toIntExact(countLeft - 1);\n          countLeft = 0;\n        }\n        this.offset = 0;\n      } catch (EOFException eofe) {\n        assert countLeft == -1;\n        return false;\n      }\n    } else {\n      this.pointsInBuffer--;\n      this.offset += bytesPerDoc;\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (countLeft >= 0) {\n      if (countLeft == 0) {\n        return false;\n      }\n      countLeft--;\n    }\n    try {\n      in.readBytes(packedValue, 0, packedValue.length);\n    } catch (EOFException eofe) {\n      assert countLeft == -1;\n      return false;\n    }\n    docID = in.readInt();\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        ord = in.readLong();\n      } else {\n        ord = in.readInt();\n      }\n    } else {\n      ord = docID;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (this.pointsInBuffer == 0) {\n      if (countLeft >= 0) {\n        if (countLeft == 0) {\n          return false;\n        }\n      }\n      try {\n        if (countLeft > maxPointOnHeap) {\n          in.readBytes(onHeapBuffer, 0, maxPointOnHeap * config.bytesPerDoc);\n          pointsInBuffer = maxPointOnHeap - 1;\n          countLeft -= maxPointOnHeap;\n        } else {\n          in.readBytes(onHeapBuffer, 0, (int) countLeft * config.bytesPerDoc);\n          pointsInBuffer = Math.toIntExact(countLeft - 1);\n          countLeft = 0;\n        }\n        this.offset = 0;\n      } catch (EOFException eofe) {\n        assert countLeft == -1;\n        return false;\n      }\n    } else {\n      this.pointsInBuffer--;\n      this.offset += config.bytesPerDoc;\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (this.pointsInBuffer == 0) {\n      if (countLeft >= 0) {\n        if (countLeft == 0) {\n          return false;\n        }\n      }\n      try {\n        if (countLeft > maxPointOnHeap) {\n          in.readBytes(onHeapBuffer, 0, maxPointOnHeap * bytesPerDoc);\n          pointsInBuffer = maxPointOnHeap - 1;\n          countLeft -= maxPointOnHeap;\n        } else {\n          in.readBytes(onHeapBuffer, 0, (int) countLeft * bytesPerDoc);\n          pointsInBuffer = Math.toIntExact(countLeft - 1);\n          countLeft = 0;\n        }\n        this.offset = 0;\n      } catch (EOFException eofe) {\n        assert countLeft == -1;\n        return false;\n      }\n    } else {\n      this.pointsInBuffer--;\n      this.offset += bytesPerDoc;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["bc57257d8a309205ebefdf9ee778da293673f599"],"bc57257d8a309205ebefdf9ee778da293673f599":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"bc57257d8a309205ebefdf9ee778da293673f599":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["bc57257d8a309205ebefdf9ee778da293673f599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}