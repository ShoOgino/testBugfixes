{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","commits":[{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionWithEmptyPolicy() throws IOException {\n    Map m = (Map) loadFromResource(\"testCreateCollectionWithEmptyPolicy.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig(new HashMap());\n    ///Users/noble/work/4solr/solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java\n    //POSITIONS : [shard1:1[NRT] @127.0.0.1:49469_solr, shard1:2[NRT] @127.0.0.1:49469_solr]\n    List<ReplicaPosition> positions = PolicyHelper.getReplicaLocations(\"coll_new\", autoScalingConfig, cloudManagerFromDiagnostics,\n        EMPTY_MAP, Collections.singletonList(\"shard1\"), 2, 0, 0, null);\n\n    List<String> nodes = positions.stream().map(count -> count.node).collect(Collectors.toList());\n    assertTrue(nodes.contains(\"127.0.0.1:49469_solr\"));\n    assertTrue(nodes.contains(\"127.0.0.1:49470_solr\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","sourceNew":"  public void testCreateCollectionWithEmptyPolicy() {\n    Map m = (Map) loadFromResource(\"testCreateCollectionWithEmptyPolicy.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig(new HashMap());\n    //POSITIONS : [shard1:1[NRT] @127.0.0.1:49469_solr, shard1:2[NRT] @127.0.0.1:49469_solr]\n    List<ReplicaPosition> positions = PolicyHelper.getReplicaLocations(\"coll_new\", autoScalingConfig, cloudManagerFromDiagnostics,\n        EMPTY_MAP, Collections.singletonList(\"shard1\"), 2, 0, 0, null);\n\n    List<String> nodes = positions.stream().map(count -> count.node).collect(Collectors.toList());\n    assertTrue(nodes.contains(\"127.0.0.1:49469_solr\"));\n    assertTrue(nodes.contains(\"127.0.0.1:49470_solr\"));\n\n\n  }\n\n","sourceOld":"  public void testCreateCollectionWithEmptyPolicy() throws IOException {\n    Map m = (Map) loadFromResource(\"testCreateCollectionWithEmptyPolicy.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig(new HashMap());\n    ///Users/noble/work/4solr/solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java\n    //POSITIONS : [shard1:1[NRT] @127.0.0.1:49469_solr, shard1:2[NRT] @127.0.0.1:49469_solr]\n    List<ReplicaPosition> positions = PolicyHelper.getReplicaLocations(\"coll_new\", autoScalingConfig, cloudManagerFromDiagnostics,\n        EMPTY_MAP, Collections.singletonList(\"shard1\"), 2, 0, 0, null);\n\n    List<String> nodes = positions.stream().map(count -> count.node).collect(Collectors.toList());\n    assertTrue(nodes.contains(\"127.0.0.1:49469_solr\"));\n    assertTrue(nodes.contains(\"127.0.0.1:49470_solr\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","sourceNew":"  public void testCreateCollectionWithEmptyPolicy() {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) loadFromResource(\"testCreateCollectionWithEmptyPolicy.json\");\n    @SuppressWarnings({\"unchecked\"})\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig(new HashMap<>());\n    //POSITIONS : [shard1:1[NRT] @127.0.0.1:49469_solr, shard1:2[NRT] @127.0.0.1:49469_solr]\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> positions = PolicyHelper.getReplicaLocations(\"coll_new\", autoScalingConfig, cloudManagerFromDiagnostics,\n        EMPTY_MAP, Collections.singletonList(\"shard1\"), 2, 0, 0, null);\n\n    List<String> nodes = positions.stream().map(count -> count.node).collect(Collectors.toList());\n    assertTrue(nodes.contains(\"127.0.0.1:49469_solr\"));\n    assertTrue(nodes.contains(\"127.0.0.1:49470_solr\"));\n\n\n  }\n\n","sourceOld":"  public void testCreateCollectionWithEmptyPolicy() {\n    Map m = (Map) loadFromResource(\"testCreateCollectionWithEmptyPolicy.json\");\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig(new HashMap());\n    //POSITIONS : [shard1:1[NRT] @127.0.0.1:49469_solr, shard1:2[NRT] @127.0.0.1:49469_solr]\n    List<ReplicaPosition> positions = PolicyHelper.getReplicaLocations(\"coll_new\", autoScalingConfig, cloudManagerFromDiagnostics,\n        EMPTY_MAP, Collections.singletonList(\"shard1\"), 2, 0, 0, null);\n\n    List<String> nodes = positions.stream().map(count -> count.node).collect(Collectors.toList());\n    assertTrue(nodes.contains(\"127.0.0.1:49469_solr\"));\n    assertTrue(nodes.contains(\"127.0.0.1:49470_solr\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testCreateCollectionWithEmptyPolicy().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionWithEmptyPolicy() {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) loadFromResource(\"testCreateCollectionWithEmptyPolicy.json\");\n    @SuppressWarnings({\"unchecked\"})\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig(new HashMap<>());\n    //POSITIONS : [shard1:1[NRT] @127.0.0.1:49469_solr, shard1:2[NRT] @127.0.0.1:49469_solr]\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> positions = PolicyHelper.getReplicaLocations(\"coll_new\", autoScalingConfig, cloudManagerFromDiagnostics,\n        EMPTY_MAP, Collections.singletonList(\"shard1\"), 2, 0, 0, null);\n\n    List<String> nodes = positions.stream().map(count -> count.node).collect(Collectors.toList());\n    assertTrue(nodes.contains(\"127.0.0.1:49469_solr\"));\n    assertTrue(nodes.contains(\"127.0.0.1:49470_solr\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["9ba1b632c041956c93c41aa1143d16a567014891"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}