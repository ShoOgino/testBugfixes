{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new CharsRef(word, 0, length));\n      terms.add(word);\n    }\n    List<CharsRef> otherStems = stem(word, length, Dictionary.NOFLAGS, 0);\n    for (CharsRef s : otherStems) {\n      if (!terms.contains(s)) {\n        stems.add(s);\n        terms.add(s);\n      }\n    }\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}