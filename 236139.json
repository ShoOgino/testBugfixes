{"path":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfoPerCommit info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfoPerCommit info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfo info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f9c72dc0e9082b70769643013a67c27bb9f444","date":1343580107,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfoPerCommit info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfoPerCommit info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = _numLargeSegments;\n    \n    if (numSegs <= numLargeSegs) {\n      return null;\n    }\n    \n    long totalLargeSegSize = 0;\n    long totalSmallSegSize = 0;\n    SegmentInfoPerCommit info;\n    \n    // compute the total size of large segments\n    for(int i = 0; i < numLargeSegs; i++) {\n      info = infos.info(i);\n      totalLargeSegSize += size(info);\n    }\n    // compute the total size of small segments\n    for(int i = numLargeSegs; i < numSegs; i++) {\n      info = infos.info(i);\n      totalSmallSegSize += size(info);\n    }\n    \n    long targetSegSize = (totalLargeSegSize / (numLargeSegs - 1));\n    if(targetSegSize <= totalSmallSegSize) {\n      // the total size of small segments is big enough,\n      // promote the small segments to a large segment and do balanced merge,\n      \n      if(totalSmallSegSize < targetSegSize * 2) {\n        MergeSpecification spec = findBalancedMerges(infos, numLargeSegs, (numLargeSegs - 1), _partialExpunge);\n        if(spec == null) spec = new MergeSpecification(); // should not happen\n        spec.add(new OneMerge(infos.asList().subList(numLargeSegs, numSegs)));\n        return spec;\n      } else {\n        return findBalancedMerges(infos, numSegs, numLargeSegs, _partialExpunge);\n      }      \n    } else if (_maxSegments < numSegs) {\n      // we have more than _maxSegments, merge small segments smaller than targetSegSize/4\n      MergeSpecification spec = new MergeSpecification();\n      int startSeg = numLargeSegs;\n      long sizeThreshold = (targetSegSize / 4);\n      while(startSeg < numSegs) {\n        info = infos.info(startSeg);\n        if(size(info) < sizeThreshold) break;\n        startSeg++;\n      }\n      spec.add(new OneMerge(infos.asList().subList(startSeg, numSegs)));\n      return spec;\n    } else {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      MergeSpecification spec = super.findMerges(smallSegments);\n      \n      if(_partialExpunge) {\n        OneMerge expunge  = findOneSegmentToExpunge(infos, numLargeSegs);\n        if(expunge != null) {\n          if(spec == null) spec = new MergeSpecification();\n          spec.add(expunge);\n        }\n      }\n      return spec;\n    }      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03f9c72dc0e9082b70769643013a67c27bb9f444":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","03f9c72dc0e9082b70769643013a67c27bb9f444"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","03f9c72dc0e9082b70769643013a67c27bb9f444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f9c72dc0e9082b70769643013a67c27bb9f444"]},"commit2Childs":{"03f9c72dc0e9082b70769643013a67c27bb9f444":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["03f9c72dc0e9082b70769643013a67c27bb9f444","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}