{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","commits":[{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n\n      if (iter.hasNext()) {\n        Map.Entry<BytesRef,TermData> ent = iter.next();\n        current = ent.getKey();\n        TermData td = ent.getValue();\n        docFreq = td.docFreq;\n        docsStart = td.docsStart;\n        return current;\n      } else {\n        current = null;\n        return null;\n      }\n\n      /*\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n      */\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n    }\n\n","bugFix":null,"bugIntro":["f7d6f751de577f829f8bdc897d050c728075723a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7d6f751de577f829f8bdc897d050c728075723a","date":1288988093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n\n      if (iter.hasNext()) {\n        Map.Entry<BytesRef,TermData> ent = iter.next();\n        current = ent.getKey();\n        TermData td = ent.getValue();\n        docFreq = td.docFreq;\n        docsStart = td.docsStart;\n        return current;\n      } else {\n        current = null;\n        return null;\n      }\n\n      /*\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n      */\n    }\n\n","bugFix":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b2d719eaefc9684ff00084555da5f61a7f32aef","date":1288993916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n\n      if (iter.hasNext()) {\n        Map.Entry<BytesRef,TermData> ent = iter.next();\n        current = ent.getKey();\n        TermData td = ent.getValue();\n        docFreq = td.docFreq;\n        docsStart = td.docsStart;\n        return current;\n      } else {\n        current = null;\n        return null;\n      }\n\n      /*\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n      */\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n\n      if (iter.hasNext()) {\n        Map.Entry<BytesRef,TermData> ent = iter.next();\n        current = ent.getKey();\n        TermData td = ent.getValue();\n        docFreq = td.docFreq;\n        docsStart = td.docsStart;\n        return current;\n      } else {\n        current = null;\n        return null;\n      }\n\n      /*\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n      */\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.next();\n      if (result != null) {\n        final PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n\n      if (iter.hasNext()) {\n        Map.Entry<BytesRef,TermData> ent = iter.next();\n        current = ent.getKey();\n        TermData td = ent.getValue();\n        docFreq = td.docFreq;\n        docsStart = td.docsStart;\n        return current;\n      } else {\n        current = null;\n        return null;\n      }\n\n      /*\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.next();\n      if (result != null) {\n        final PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n\n      if (iter.hasNext()) {\n        Map.Entry<BytesRef,TermData> ent = iter.next();\n        current = ent.getKey();\n        TermData td = ent.getValue();\n        docFreq = td.docFreq;\n        docsStart = td.docsStart;\n        return current;\n      } else {\n        current = null;\n        return null;\n      }\n\n      /*\n      readLine(in, scratch);\n      if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n        ended = true;\n        current = null;\n        return null;\n      } else {\n        assert scratch.startsWith(TERM): \"got \" + scratch.utf8ToString();\n        docsStart = in.getFilePointer();\n        final int len = scratch.length - TERM.length;\n        if (len > scratch2.length) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, TERM.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        current = scratch2;\n        docFreq = 0;\n        long lineStart = 0;\n        while(true) {\n          lineStart = in.getFilePointer();\n          readLine(in, scratch);\n          if (scratch.equals(END) || scratch.startsWith(FIELD) || scratch.startsWith(TERM)) {\n            break;\n          }\n          if (scratch.startsWith(DOC)) {\n            docFreq++;\n          }\n        }\n        in.seek(lineStart);\n        return current;\n      }\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.next();\n      if (result != null) {\n        final PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.next();\n      if (result != null) {\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.next();\n      if (result != null) {\n        final PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.next();\n      if (result != null) {\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.next();\n      if (result != null) {\n        final PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.next();\n      if (result != null) {\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.next();\n      if (result != null) {\n        final PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.next();\n      if (result != null) {\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      assert !ended;\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.next();\n      if (result != null) {\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n        return result.input;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85a883878c0af761245ab048babc63d099f835f3":["8d47f68d60cbff5718136b945ba8c55982342f38","2b2d719eaefc9684ff00084555da5f61a7f32aef"],"16843358872ed92ba92888ab99df297550b9a36a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"8d47f68d60cbff5718136b945ba8c55982342f38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["f7d6f751de577f829f8bdc897d050c728075723a"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["8d47f68d60cbff5718136b945ba8c55982342f38"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"f7d6f751de577f829f8bdc897d050c728075723a":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"16843358872ed92ba92888ab99df297550b9a36a":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8d47f68d60cbff5718136b945ba8c55982342f38":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["16843358872ed92ba92888ab99df297550b9a36a"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["85a883878c0af761245ab048babc63d099f835f3","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d47f68d60cbff5718136b945ba8c55982342f38","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["f7d6f751de577f829f8bdc897d050c728075723a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","29ef99d61cda9641b6250bf9567329a6e65f901d","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"f7d6f751de577f829f8bdc897d050c728075723a":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["16843358872ed92ba92888ab99df297550b9a36a","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}