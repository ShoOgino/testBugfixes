{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","commits":[{"id":"30fc8c22124fdcf9d76449bd2fa04decbe74e2e2","date":1391685460,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"/dev/null","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    return topReader.getSortedSetDocValues(field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    return topReader.getSortedSetDocValues(field);\n  }\n\n","bugFix":["30fc8c22124fdcf9d76449bd2fa04decbe74e2e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = origReader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == origReader.getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa436288346a9508333fc980195ec9f0e80386a","date":1493166840,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    // TODO: why are we lazy about this?  It's better if ctor pays the cost, not first query?  Oh, but we\n    // call this method from ctor, ok.  Also, we only ever store one entry in the map (for key=field) so\n    // why are we using a map?\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = origReader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = origReader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cfd1df435f04d4287925cca73cf22120f723892","date":1493925365,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    // TODO: why are we lazy about this?  It's better if ctor pays the cost, not first query?  Oh, but we\n    // call this method from ctor, ok.  Also, we only ever store one entry in the map (for key=field) so\n    // why are we using a map?\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(reader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = reader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = reader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = reader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = reader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    // TODO: why are we lazy about this?  It's better if ctor pays the cost, not first query?  Oh, but we\n    // call this method from ctor, ok.  Also, we only ever store one entry in the map (for key=field) so\n    // why are we using a map?\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = origReader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState#getDocValues().mjava","sourceNew":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    // TODO: why are we lazy about this?  It's better if ctor pays the cost, not first query?  Oh, but we\n    // call this method from ctor, ok.  Also, we only ever store one entry in the map (for key=field) so\n    // why are we using a map?\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(reader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = reader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = reader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = reader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = reader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","sourceOld":"  /** Return top-level doc values. */\n  @Override\n  public SortedSetDocValues getDocValues() throws IOException {\n    // TODO: this is dup'd from slow composite reader wrapper ... can we factor it out to share?\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(origReader, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = origReader.getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = origReader.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = origReader.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET) {\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = origReader.maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map, cost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cfd1df435f04d4287925cca73cf22120f723892":["9fa436288346a9508333fc980195ec9f0e80386a"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["30fc8c22124fdcf9d76449bd2fa04decbe74e2e2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d211216c83f01894810543d1c107160a9ae3650b","8cfd1df435f04d4287925cca73cf22120f723892"],"9fa436288346a9508333fc980195ec9f0e80386a":["d211216c83f01894810543d1c107160a9ae3650b"],"d211216c83f01894810543d1c107160a9ae3650b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"30fc8c22124fdcf9d76449bd2fa04decbe74e2e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cfd1df435f04d4287925cca73cf22120f723892"]},"commit2Childs":{"8cfd1df435f04d4287925cca73cf22120f723892":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9fa436288346a9508333fc980195ec9f0e80386a":["8cfd1df435f04d4287925cca73cf22120f723892"],"d211216c83f01894810543d1c107160a9ae3650b":["e9017cf144952056066919f1ebc7897ff9bd71b1","9fa436288346a9508333fc980195ec9f0e80386a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d211216c83f01894810543d1c107160a9ae3650b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fc8c22124fdcf9d76449bd2fa04decbe74e2e2"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"30fc8c22124fdcf9d76449bd2fa04decbe74e2e2":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}