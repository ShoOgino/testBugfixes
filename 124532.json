{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","commits":[{"id":"82f063229e39b59c960866c1bc49285b95676491","date":1352733047,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"/dev/null","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n    // nocommit\n    System.out.println(\"start again\");\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderProps(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ffc580829d1c438f5b57c989de81319eb7941a","date":1352736076,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderProps(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n    // nocommit\n    System.out.println(\"start again\");\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderProps(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"/dev/null","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderProps(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderProps(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderProps(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb226061c02bd6cda2385df57a122b1183051a9a","date":1359927211,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    server.shutdown();\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrClient httpSolrClient = new HttpSolrClient(url3);\n    httpSolrClient.setConnectionTimeout(15000);\n    httpSolrClient.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    httpSolrClient.shutdown();\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrServer client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    server.shutdown();\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      int cnt = 3;\n\n      // create the cores\n      createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n\n      executor.shutdown();\n      executor.awaitTermination(120, TimeUnit.SECONDS);\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    final HttpSolrClient httpSolrClient = new HttpSolrClient(url3);\n    httpSolrClient.setConnectionTimeout(15000);\n    httpSolrClient.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = 3;\n    \n    // create the cores\n    createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    httpSolrClient.shutdown();\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor, 120, TimeUnit.SECONDS);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      int cnt = 3;\n\n      // create the cores\n      createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n\n      executor.shutdown();\n      executor.awaitTermination(120, TimeUnit.SECONDS);\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor, 120, TimeUnit.SECONDS);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":["cb5af3afeddbb803fb785098176e6e177c34261b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState();\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState(true);\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().updateClusterState();\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = getHttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = getHttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient()) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = getHttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient()) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = getHttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient()) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    SolrClient client = clients.get(0);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient httpSolrClient = getHttpSolrClient(url3)) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCores(httpSolrClient, executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient()) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient()) {\n      httpSolrClient.setConnectionTimeout(15000);\n      httpSolrClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    cloudJettys.get(0).jetty.stop();\n    printLayout();\n\n    cloudJettys.get(0).jetty.start();\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    ChaosMonkey.stop(cloudJettys.get(0).jetty);\n    printLayout();\n\n    Thread.sleep(5000);\n    ChaosMonkey.start(cloudJettys.get(0).jetty);\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":["82f063229e39b59c960866c1bc49285b95676491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testStopAndStartCoresInOneInstance().mjava","sourceNew":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new SolrNamedThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    cloudJettys.get(0).jetty.stop();\n    printLayout();\n\n    cloudJettys.get(0).jetty.start();\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","sourceOld":"  private void testStopAndStartCoresInOneInstance() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient httpSolrClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      ThreadPoolExecutor executor = null;\n      try {\n        executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n            5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n            new DefaultSolrThreadFactory(\"testExecutor\"));\n        int cnt = 3;\n\n        // create the cores\n        createCollectionInOneInstance(httpSolrClient, jetty.getNodeName(), executor, \"multiunload2\", 1, cnt);\n      } finally {\n        if (executor != null) {\n          ExecutorUtil.shutdownAndAwaitTermination(executor);\n        }\n      }\n    }\n    \n    cloudJettys.get(0).jetty.stop();\n    printLayout();\n\n    cloudJettys.get(0).jetty.start();\n    cloudClient.getZkStateReader().forceUpdateCollection(\"multiunload2\");\n    try {\n      cloudClient.getZkStateReader().getLeaderRetry(\"multiunload2\", \"shard1\", 30000);\n    } catch (SolrException e) {\n      printLayout();\n      throw e;\n    }\n    \n    printLayout();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","a69439d0df009e0bb0038d1e427159f449dd670d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb226061c02bd6cda2385df57a122b1183051a9a"],"a69439d0df009e0bb0038d1e427159f449dd670d":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"bafca15d8e408346a67f4282ad1143b88023893b":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["fb226061c02bd6cda2385df57a122b1183051a9a"],"43d1e498704edd2bba13548a189eed4dfccff11b":["28288370235ed02234a64753cdbf0c6ec096304a"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["30c8e5574b55d57947e989443dfde611646530ee","43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["a7ffc580829d1c438f5b57c989de81319eb7941a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["275019a81d0883a1db4560391b072d1fbe272ec4"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7ffc580829d1c438f5b57c989de81319eb7941a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"30c8e5574b55d57947e989443dfde611646530ee":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"fb226061c02bd6cda2385df57a122b1183051a9a":["a69439d0df009e0bb0038d1e427159f449dd670d"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a7ffc580829d1c438f5b57c989de81319eb7941a":["82f063229e39b59c960866c1bc49285b95676491"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"82f063229e39b59c960866c1bc49285b95676491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"275019a81d0883a1db4560391b072d1fbe272ec4":["cb5af3afeddbb803fb785098176e6e177c34261b"],"cb5af3afeddbb803fb785098176e6e177c34261b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb226061c02bd6cda2385df57a122b1183051a9a"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["bafca15d8e408346a67f4282ad1143b88023893b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","82f063229e39b59c960866c1bc49285b95676491"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["cb5af3afeddbb803fb785098176e6e177c34261b"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["a69439d0df009e0bb0038d1e427159f449dd670d"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"28288370235ed02234a64753cdbf0c6ec096304a":["43d1e498704edd2bba13548a189eed4dfccff11b","30c8e5574b55d57947e989443dfde611646530ee"],"fb226061c02bd6cda2385df57a122b1183051a9a":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"a7ffc580829d1c438f5b57c989de81319eb7941a":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9","407687e67faf6e1f02a211ca078d8e3eed631027"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"82f063229e39b59c960866c1bc49285b95676491":["a7ffc580829d1c438f5b57c989de81319eb7941a"],"275019a81d0883a1db4560391b072d1fbe272ec4":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cb5af3afeddbb803fb785098176e6e177c34261b":["275019a81d0883a1db4560391b072d1fbe272ec4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}