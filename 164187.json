{"path":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","commits":[{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source} set to <i>setNextMergeSource(Source)</i>.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(int docID, int sourceDoc)\n      throws IOException {\n    switch(currentMergeSource.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      add(docID, currentMergeSource.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      add(docID, currentMergeSource.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      add(docID, currentMergeSource.getFloat(sourceDoc));\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa0f44f887719e97183771e977cfc4bfb485b766"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}