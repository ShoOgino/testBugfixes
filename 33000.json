{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getNormValues(FieldInfos,String).mjava","commits":[{"id":"93f724123ee2d5ffea549b41729efe1b2386a815","date":1400842169,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getNormValues(FieldInfos,String).mjava","pathOld":"/dev/null","sourceNew":"  NumericDocValues getNormValues(FieldInfos infos, String field) throws IOException {\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms != null) {\n      return norms;\n    } else {\n      FieldInfo fi = infos.fieldInfo(field);\n      if (fi == null || !fi.hasNorms()) {\n        // Field does not exist or does not index norms\n        return null;\n      }\n      assert normsProducer != null;\n      norms = normsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n      return norms;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getNormValues(FieldInfos,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getNormValues(FieldInfos,String).mjava","sourceNew":"  NumericDocValues getNormValues(FieldInfos infos, String field) throws IOException {\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms != null) {\n      return norms;\n    } else {\n      FieldInfo fi = infos.fieldInfo(field);\n      if (fi == null || !fi.hasNorms()) {\n        // Field does not exist or does not index norms\n        return null;\n      }\n      assert normsProducer != null;\n      norms = normsProducer.getNorms(fi);\n      normFields.put(field, norms);\n      return norms;\n    }\n  }\n\n","sourceOld":"  NumericDocValues getNormValues(FieldInfos infos, String field) throws IOException {\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms != null) {\n      return norms;\n    } else {\n      FieldInfo fi = infos.fieldInfo(field);\n      if (fi == null || !fi.hasNorms()) {\n        // Field does not exist or does not index norms\n        return null;\n      }\n      assert normsProducer != null;\n      norms = normsProducer.getNumeric(fi);\n      normFields.put(field, norms);\n      return norms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CodecReader#getNormValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getNormValues(FieldInfos,String).mjava","sourceNew":"  @Override\n  public final NumericDocValues getNormValues(String field) throws IOException {\n    ensureOpen();\n    Map<String,NumericDocValues> normFields = normsLocal.get();\n\n    NumericDocValues norms = normFields.get(field);\n    if (norms != null) {\n      return norms;\n    } else {\n      FieldInfo fi = getFieldInfos().fieldInfo(field);\n      if (fi == null || !fi.hasNorms()) {\n        // Field does not exist or does not index norms\n        return null;\n      }\n      norms = getNormsReader().getNorms(fi);\n      normFields.put(field, norms);\n      return norms;\n    }\n  }\n\n","sourceOld":"  NumericDocValues getNormValues(FieldInfos infos, String field) throws IOException {\n    Map<String,Object> normFields = normsLocal.get();\n\n    NumericDocValues norms = (NumericDocValues) normFields.get(field);\n    if (norms != null) {\n      return norms;\n    } else {\n      FieldInfo fi = infos.fieldInfo(field);\n      if (fi == null || !fi.hasNorms()) {\n        // Field does not exist or does not index norms\n        return null;\n      }\n      assert normsProducer != null;\n      norms = normsProducer.getNorms(fi);\n      normFields.put(field, norms);\n      return norms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93f724123ee2d5ffea549b41729efe1b2386a815":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["93f724123ee2d5ffea549b41729efe1b2386a815"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"93f724123ee2d5ffea549b41729efe1b2386a815":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93f724123ee2d5ffea549b41729efe1b2386a815"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}