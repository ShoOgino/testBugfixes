{"path":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}