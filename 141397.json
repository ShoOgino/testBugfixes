{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","commits":[{"id":"f1cd9cffef251190badd40d1da8b604d0185d744","date":1421390175,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    protected int deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        System.err.println(\"\\nERROR: Collection \"+collectionName+\" not found!\");\n        System.err.println();\n        return 1;\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      System.out.println(\"\\nDeleting collection '\"+collectionName+\"' using command:\\n\"+deleteCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        System.err.println(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        System.err.println();\n        return 1;\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nERROR: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        System.out.println(arr.toString());\n        System.out.println();\n      }\n\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        System.err.println(\"\\nERROR: Collection \"+collectionName+\" not found!\");\n        System.err.println();\n        return 1;\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      System.out.println(\"\\nDeleting collection '\"+collectionName+\"' using command:\\n\"+deleteCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        System.err.println(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        System.err.println();\n        return 1;\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nERROR: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        System.out.println(arr.toString());\n        System.out.println();\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    protected int deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        System.err.println(\"\\nERROR: Collection \"+collectionName+\" not found!\");\n        System.err.println();\n        return 1;\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      System.out.println(\"\\nDeleting collection '\"+collectionName+\"' using command:\\n\"+deleteCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        System.err.println(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        System.err.println();\n        return 1;\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nERROR: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        System.out.println(arr.toString());\n        System.out.println();\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        System.err.println(\"\\nERROR: Collection \"+collectionName+\" not found!\");\n        System.err.println();\n        return 1;\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      System.out.println(\"\\nDeleting collection '\"+collectionName+\"' using command:\\n\"+deleteCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        System.err.println(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        System.err.println();\n        return 1;\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nERROR: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        System.out.println(arr.toString());\n        System.out.println();\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    protected int deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        System.err.println(\"\\nERROR: Collection \"+collectionName+\" not found!\");\n        System.err.println();\n        return 1;\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      System.out.println(\"\\nDeleting collection '\"+collectionName+\"' using command:\\n\"+deleteCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        System.err.println(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        System.err.println();\n        return 1;\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nERROR: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        System.out.println(arr.toString());\n        System.out.println();\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","sourceOld":"    protected int deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        System.err.println(\"\\nERROR: Collection \"+collectionName+\" not found!\");\n        System.err.println();\n        return 1;\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      System.out.println(\"\\nDeleting collection '\"+collectionName+\"' using command:\\n\"+deleteCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        System.err.println(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        System.err.println();\n        return 1;\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nERROR: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        System.out.println(arr.toString());\n        System.out.println();\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollections();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echo(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          System.err.println(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n      \n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory {} will be deleted with impunity.\", configName);\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            if (log.isInfoEnabled()) {\n              log.info(\"Scanning {} to ensure no other collections are using config {}\", collections.size(), configName);\n            }\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              if (log.isWarnEnabled()) {\n                log.warn(\"Configuration directory {} is also being used by {}\" +\n                        \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\"\n                    , configName, next);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory \"+configName+\" will be deleted with impunity.\");\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            log.info(\"Scanning \" + collections.size() +\n                \" to ensure no other collections are using config \" + configName);\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory \"+configName+\" is also being used by \"+next+\n                  \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory {} will be deleted with impunity.\", configName);\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            if (log.isInfoEnabled()) {\n              log.info(\"Scanning {} to ensure no other collections are using config {}\", collections.size(), configName);\n            }\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory {} is also being used by {}{}\"\n                  , configName, next\n                  , \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory {} will be deleted with impunity.\", configName);\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            if (log.isInfoEnabled()) {\n              log.info(\"Scanning {} to ensure no other collections are using config {}\", collections.size(), configName);\n            }\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              if (log.isWarnEnabled()) {\n                log.warn(\"Configuration directory {} is also being used by {}\" +\n                        \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\"\n                    , configName, next);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.DeleteTool#deleteCollection(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory {} will be deleted with impunity.\", configName);\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            if (log.isInfoEnabled()) {\n              log.info(\"Scanning {} to ensure no other collections are using config {}\", collections.size(), configName);\n            }\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory {} is also being used by {}{}\"\n                  , configName, next\n                  , \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n              exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","sourceOld":"    protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot delete a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String firstLiveNode = liveNodes.iterator().next();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      String baseUrl = zkStateReader.getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(NAME);\n      if (!zkStateReader.getClusterState().hasCollection(collectionName)) {\n        throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n      }\n\n      String configName = zkStateReader.readConfigName(collectionName);\n      boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n      if (deleteConfig && configName != null) {\n        if (cli.hasOption(\"forceDeleteConfig\")) {\n          log.warn(\"Skipping safety checks, configuration directory {} will be deleted with impunity.\", configName);\n        } else {\n          // need to scan all Collections to see if any are using the config\n          Set<String> collections = zkStateReader.getClusterState().getCollectionsMap().keySet();\n\n          // give a little note to the user if there are many collections in case it takes a while\n          if (collections.size() > 50)\n            if (log.isInfoEnabled()) {\n              log.info(\"Scanning {} to ensure no other collections are using config {}\", collections.size(), configName);\n            }\n\n          for (String next : collections) {\n            if (collectionName.equals(next))\n              continue; // don't check the collection we're deleting\n\n            if (configName.equals(zkStateReader.readConfigName(next))) {\n              deleteConfig = false;\n              log.warn(\"Configuration directory {} is also being used by {}{}\"\n                  , configName, next\n                  , \"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete.\");\n              break;\n            }\n          }\n        }\n      }\n\n      String deleteCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=DELETE&name=%s\",\n              baseUrl,\n              collectionName);\n\n      echoIfVerbose(\"\\nDeleting collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl + \"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(deleteCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to delete collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (deleteConfig) {\n        String configZnode = \"/configs/\" + configName;\n        try {\n          zkStateReader.getZkClient().clean(configZnode);\n        } catch (Exception exc) {\n          echo(\"\\nWARNING: Failed to delete configuration directory \"+configZnode+\" in ZooKeeper due to: \"+\n            exc.getMessage()+\"\\nYou'll need to manually delete this znode using the zkcli script.\");\n        }\n      }\n\n      if (json != null) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n        echo(\"\\n\");\n      }\n\n      echo(\"Deleted collection '\" + collectionName + \"' using command:\\n\" + deleteCollectionUrl);\n    }\n\n","bugFix":["f1cd9cffef251190badd40d1da8b604d0185d744"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73450c0955930295d34703e7ddbfc6973b7a121a":["4ca20be81c9284c840498143264e583ccbb8525a","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["4ca20be81c9284c840498143264e583ccbb8525a","73450c0955930295d34703e7ddbfc6973b7a121a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"f1cd9cffef251190badd40d1da8b604d0185d744":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"4ca20be81c9284c840498143264e583ccbb8525a":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["73450c0955930295d34703e7ddbfc6973b7a121a","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["f1cd9cffef251190badd40d1da8b604d0185d744"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["4ca20be81c9284c840498143264e583ccbb8525a","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["f1cd9cffef251190badd40d1da8b604d0185d744","1390137e395d2f07f9ba5b8c43d293befe84d563"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["575e66bd4b2349209027f6801184da7fc3cba13f"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["73450c0955930295d34703e7ddbfc6973b7a121a"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["4ca20be81c9284c840498143264e583ccbb8525a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"f1cd9cffef251190badd40d1da8b604d0185d744":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["4ca20be81c9284c840498143264e583ccbb8525a","d2638f781be724518ff6c2263d14a48cf6e68017"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1cd9cffef251190badd40d1da8b604d0185d744"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}