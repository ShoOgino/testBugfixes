{"path":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testCloneField().mjava","commits":[{"id":"ecb12132f7aef3ad5be4b300f3cea59aa03b6820","date":1339628268,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testCloneField().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloneField() throws Exception {\n\n    SolrInputDocument d = null;\n\n    // regardless of chain, all of these should be equivilent\n    for (String chain : Arrays.asList(\"clone-single\", \"clone-multi\", \n                                      \"clone-array\",\"clone-selector\" )) {\n\n      // simple clone\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\", \"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\", \n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n\n    // should be equivilent for any chain matching source1_s and source2_s\n    for (String chain : Arrays.asList(\"clone-multi\",\n                                      \"clone-array\",\"clone-selector\" )) {\n\n      // simple clone\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\"),\n                         f(\"source2_s\", \"xxx\", 999)));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"xxx\", 999),\n                   d.getFieldValues(\"source2_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\", \"xxx\", 999), \n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\"),\n                         f(\"source2_s\", \"xxx\", 999)));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"xxx\", 999),\n                   d.getFieldValues(\"source2_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\", \n                                 \"123456789\", \"\", 42, \"abcd\",\n                                 \"xxx\", 999),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\", \n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0","date":1446511397,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactoryTest#testCloneField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testCloneField().mjava","sourceNew":"  public void testCloneField() throws Exception {\n\n    SolrInputDocument d;\n\n    // regardless of chain, all of these checks should be equivilent\n    for (String chain : Arrays.asList(\"clone-single\", \"clone-single-regex\",\n                                      \"clone-multi\", \"clone-multi-regex\",\n                                      \"clone-array\", \"clone-array-regex\", \n                                      \"clone-selector\", \"clone-selector-regex\")) {\n      \n      // simple clone\n      d = processAdd(chain,\n                     doc(f(\"id\", \"1111\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,\n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\", \"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\",\n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n\n    // should be equivilent for any chain matching source1_s and source2_s (but not source0_s)\n    for (String chain : Arrays.asList(\"clone-multi\", \"clone-multi-regex\",\n                                      \"clone-array\", \"clone-array-regex\", \n                                      \"clone-selector\", \"clone-selector-regex\")) {\n\n      // simple clone\n      d = processAdd(chain,\n                     doc(f(\"id\", \"1111\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\"),\n                         f(\"source2_s\", \"xxx\", 999)));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"xxx\", 999),\n                   d.getFieldValues(\"source2_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\", \"xxx\", 999),\n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,\n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\"),\n                         f(\"source2_s\", \"xxx\", 999)));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"xxx\", 999),\n                   d.getFieldValues(\"source2_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\",\n                                 \"123456789\", \"\", 42, \"abcd\",\n                                 \"xxx\", 999),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\",\n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n    \n    // any chain that copies source1_s to dest_s should be equivilent for these assertions\n    for (String chain : Arrays.asList(\"clone-simple-regex-syntax\",\n                                      \"clone-single\", \"clone-single-regex\",\n                                      \"clone-multi\", \"clone-multi-regex\",\n                                      \"clone-array\", \"clone-array-regex\", \n                                      \"clone-selector\", \"clone-selector-regex\")) {\n\n      // simple clone\n      d = processAdd(chain,\n                     doc(f(\"id\", \"1111\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,\n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\", \"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\",\n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n  }\n\n","sourceOld":"  public void testCloneField() throws Exception {\n\n    SolrInputDocument d = null;\n\n    // regardless of chain, all of these should be equivilent\n    for (String chain : Arrays.asList(\"clone-single\", \"clone-multi\", \n                                      \"clone-array\",\"clone-selector\" )) {\n\n      // simple clone\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\")));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\", \"123456789\", \"\", 42, \"abcd\"),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\", \n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n\n    // should be equivilent for any chain matching source1_s and source2_s\n    for (String chain : Arrays.asList(\"clone-multi\",\n                                      \"clone-array\",\"clone-selector\" )) {\n\n      // simple clone\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\"),\n                         f(\"source2_s\", \"xxx\", 999)));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"xxx\", 999),\n                   d.getFieldValues(\"source2_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\", \"xxx\", 999), \n                   d.getFieldValues(\"dest_s\"));\n\n      // append to existing values, preserve boost\n      d = processAdd(chain,       \n                     doc(f(\"id\", \"1111\"),\n                         field(\"dest_s\", 2.3f, \"orig1\", \"orig2\"),\n                         f(\"source0_s\", \"NOT COPIED\"),\n                         f(\"source1_s\", \"123456789\", \"\", 42, \"abcd\"),\n                         f(\"source2_s\", \"xxx\", 999)));\n      assertNotNull(chain, d);\n      assertEquals(chain,\n                   Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                   d.getFieldValues(\"source1_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"xxx\", 999),\n                   d.getFieldValues(\"source2_s\"));\n      assertEquals(chain,\n                   Arrays.asList(\"orig1\", \"orig2\", \n                                 \"123456789\", \"\", 42, \"abcd\",\n                                 \"xxx\", 999),\n                   d.getFieldValues(\"dest_s\"));\n      assertEquals(chain + \": dest boost changed\", \n                   2.3f, d.getField(\"dest_s\").getBoost(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0"]},"commit2Childs":{"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}