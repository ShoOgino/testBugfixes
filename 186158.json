{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],Comparator[ScoreDoc]).mjava","commits":[{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],Comparator[ScoreDoc]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],boolean).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits,\n                                  Comparator<ScoreDoc> tieBreaker) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits, tieBreaker);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits, tieBreaker);\n    }\n\n    long totalHitCount = 0;\n    TotalHits.Relation totalHitsRelation = TotalHits.Relation.EQUAL_TO;\n    int availHitCount = 0;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits.value;\n      // If any hit count is a lower bound then the merged\n      // total hit count is a lower bound as well\n      if (shard.totalHits.relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n      }\n    }\n\n    final ScoreDoc[] hits;\n    boolean unsetShardIndex = false;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n\n        // Irrespective of whether we use shard indices for tie breaking or not, we check for consistent\n        // order in shard indices to defend against potential bugs\n        if (hitUpto > 0) {\n          if (unsetShardIndex != (hit.shardIndex == -1)) {\n            throw new IllegalArgumentException(\"Inconsistent order of shard indices\");\n          }\n        }\n\n        unsetShardIndex |= hit.shardIndex == -1;\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    TotalHits totalHits = new TotalHits(totalHitCount, totalHitsRelation);\n    if (sort == null) {\n      return new TopDocs(totalHits, hits);\n    } else {\n      return new TopFieldDocs(totalHits, hits, sort.getSort());\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits, boolean setShardIndex) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    long totalHitCount = 0;\n    TotalHits.Relation totalHitsRelation = TotalHits.Relation.EQUAL_TO;\n    int availHitCount = 0;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits.value;\n      // If any hit count is a lower bound then the merged\n      // total hit count is a lower bound as well\n      if (shard.totalHits.relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX, setShardIndex == false));\n      }\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        if (setShardIndex) {\n          // caller asked us to record shardIndex (index of the TopDocs array) this hit is coming from:\n          hit.shardIndex = ref.shardIndex;\n        } else if (hit.shardIndex == -1) {\n          throw new IllegalArgumentException(\"setShardIndex is false but TopDocs[\" + ref.shardIndex + \"].scoreDocs[\" + (ref.hitIndex-1) + \"] is not set\");\n        }\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    TotalHits totalHits = new TotalHits(totalHitCount, totalHitsRelation);\n    if (sort == null) {\n      return new TopDocs(totalHits, hits);\n    } else {\n      return new TopFieldDocs(totalHits, hits, sort.getSort());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],Comparator[ScoreDoc]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits, boolean setShardIndex) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    long totalHitCount = 0;\n    TotalHits.Relation totalHitsRelation = TotalHits.Relation.EQUAL_TO;\n    int availHitCount = 0;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits.value;\n      // If any hit count is a lower bound then the merged\n      // total hit count is a lower bound as well\n      if (shard.totalHits.relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX, setShardIndex == false));\n      }\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        if (setShardIndex) {\n          // caller asked us to record shardIndex (index of the TopDocs array) this hit is coming from:\n          hit.shardIndex = ref.shardIndex;\n        } else if (hit.shardIndex == -1) {\n          throw new IllegalArgumentException(\"setShardIndex is false but TopDocs[\" + ref.shardIndex + \"].scoreDocs[\" + (ref.hitIndex-1) + \"] is not set\");\n        }\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    TotalHits totalHits = new TotalHits(totalHitCount, totalHitsRelation);\n    if (sort == null) {\n      return new TopDocs(totalHits, hits);\n    } else {\n      return new TopFieldDocs(totalHits, hits, sort.getSort());\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits,\n                                  Comparator<ScoreDoc> tieBreaker) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits, tieBreaker);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits, tieBreaker);\n    }\n\n    long totalHitCount = 0;\n    TotalHits.Relation totalHitsRelation = TotalHits.Relation.EQUAL_TO;\n    int availHitCount = 0;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits.value;\n      // If any hit count is a lower bound then the merged\n      // total hit count is a lower bound as well\n      if (shard.totalHits.relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n      }\n    }\n\n    final ScoreDoc[] hits;\n    boolean unsetShardIndex = false;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n\n        // Irrespective of whether we use shard indices for tie breaking or not, we check for consistent\n        // order in shard indices to defend against potential bugs\n        if (hitUpto > 0) {\n          if (unsetShardIndex != (hit.shardIndex == -1)) {\n            throw new IllegalArgumentException(\"Inconsistent order of shard indices\");\n          }\n        }\n\n        unsetShardIndex |= hit.shardIndex == -1;\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    TotalHits totalHits = new TotalHits(totalHitCount, totalHitsRelation);\n    if (sort == null) {\n      return new TopDocs(totalHits, hits);\n    } else {\n      return new TopFieldDocs(totalHits, hits, sort.getSort());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],Comparator[ScoreDoc]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],boolean).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits,\n                                  Comparator<ScoreDoc> tieBreaker) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits, tieBreaker);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits, tieBreaker);\n    }\n\n    long totalHitCount = 0;\n    TotalHits.Relation totalHitsRelation = TotalHits.Relation.EQUAL_TO;\n    int availHitCount = 0;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits.value;\n      // If any hit count is a lower bound then the merged\n      // total hit count is a lower bound as well\n      if (shard.totalHits.relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n      }\n    }\n\n    final ScoreDoc[] hits;\n    boolean unsetShardIndex = false;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n\n        // Irrespective of whether we use shard indices for tie breaking or not, we check for consistent\n        // order in shard indices to defend against potential bugs\n        if (hitUpto > 0) {\n          if (unsetShardIndex != (hit.shardIndex == -1)) {\n            throw new IllegalArgumentException(\"Inconsistent order of shard indices\");\n          }\n        }\n\n        unsetShardIndex |= hit.shardIndex == -1;\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    TotalHits totalHits = new TotalHits(totalHitCount, totalHitsRelation);\n    if (sort == null) {\n      return new TopDocs(totalHits, hits);\n    } else {\n      return new TopFieldDocs(totalHits, hits, sort.getSort());\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits, boolean setShardIndex) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    long totalHitCount = 0;\n    TotalHits.Relation totalHitsRelation = TotalHits.Relation.EQUAL_TO;\n    int availHitCount = 0;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits.value;\n      // If any hit count is a lower bound then the merged\n      // total hit count is a lower bound as well\n      if (shard.totalHits.relation == TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO) {\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX, setShardIndex == false));\n      }\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        if (setShardIndex) {\n          // caller asked us to record shardIndex (index of the TopDocs array) this hit is coming from:\n          hit.shardIndex = ref.shardIndex;\n        } else if (hit.shardIndex == -1) {\n          throw new IllegalArgumentException(\"setShardIndex is false but TopDocs[\" + ref.shardIndex + \"].scoreDocs[\" + (ref.hitIndex-1) + \"] is not set\");\n        }\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    TotalHits totalHits = new TotalHits(totalHitCount, totalHitsRelation);\n    if (sort == null) {\n      return new TopDocs(totalHits, hits);\n    } else {\n      return new TopFieldDocs(totalHits, hits, sort.getSort());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}