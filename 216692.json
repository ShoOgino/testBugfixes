{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator(null)) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator(null)) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator(null)) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8b3f2faaf05547a6ed4e2769b664522af9514b3","date":1466522779,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    if (q1 instanceof MatchNoDocsQuery) {\n      assertTrue(q1 instanceof MatchNoDocsQuery);\n      assertTrue(q3 instanceof MatchNoDocsQuery);\n    } else {\n      checkBooleanQueryBoosts((BooleanQuery) q1);\n      checkBooleanQueryBoosts((BooleanQuery) q2);\n      checkBooleanQueryBoosts((BooleanQuery) q3);\n      assert false;\n    }\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":["33a8b1f99104f4144f210f5d068411c297cd7163","101117eb159dcdbcaa90405b08170aab248e5b2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    if (q1 instanceof MatchNoDocsQuery) {\n      assertTrue(q1 instanceof MatchNoDocsQuery);\n      assertTrue(q3 instanceof MatchNoDocsQuery);\n    } else {\n      checkBooleanQueryBoosts((BooleanQuery) q1);\n      checkBooleanQueryBoosts((BooleanQuery) q2);\n      checkBooleanQueryBoosts((BooleanQuery) q3);\n      assert false;\n    }\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n\n      @Override\n      public void visit(QueryVisitor visitor) {\n\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    if (q1 instanceof MatchNoDocsQuery) {\n      assertTrue(q1 instanceof MatchNoDocsQuery);\n      assertTrue(q3 instanceof MatchNoDocsQuery);\n    } else {\n      checkBooleanQueryBoosts((BooleanQuery) q1);\n      checkBooleanQueryBoosts((BooleanQuery) q2);\n      checkBooleanQueryBoosts((BooleanQuery) q3);\n      assert false;\n    }\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new FilteredTermsEnum(terms.iterator()) {\n\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            if (term.length == 0) {\n              return AcceptStatus.NO;\n            }\n            char c = (char) (term.bytes[term.offset] & 0xff);\n            if (c >= '2') {\n              if (c <= '7') {\n                return AcceptStatus.YES;\n              } else {\n                return AcceptStatus.END;\n              }\n            } else {\n              return AcceptStatus.NO;\n            }\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    if (q1 instanceof MatchNoDocsQuery) {\n      assertTrue(q1 instanceof MatchNoDocsQuery);\n      assertTrue(q3 instanceof MatchNoDocsQuery);\n    } else {\n      checkBooleanQueryBoosts((BooleanQuery) q1);\n      checkBooleanQueryBoosts((BooleanQuery) q2);\n      checkBooleanQueryBoosts((BooleanQuery) q3);\n      assert false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3e8715d826e588419327562287d5d6a8040d63d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3e8715d826e588419327562287d5d6a8040d63d6"],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3e8715d826e588419327562287d5d6a8040d63d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["d8b3f2faaf05547a6ed4e2769b664522af9514b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"3e8715d826e588419327562287d5d6a8040d63d6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d2638f781be724518ff6c2263d14a48cf6e68017"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}