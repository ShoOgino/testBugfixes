{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set,int,int,int,boolean).mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * \n   * @param input the token stream to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set,int,int,int,boolean).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set,int,int,int,boolean).mjava","sourceNew":"  /**\n   * \n   * @param input the token stream to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param input the token stream to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}