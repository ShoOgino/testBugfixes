{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","commits":[{"id":"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e","date":1367905455,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","pathOld":"/dev/null","sourceNew":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace < len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace < len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, len);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb3caf04aac3b40edd51ef94db0c5d231fcb2ae9","date":1368896651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","sourceNew":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, len);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","sourceOld":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace < len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace < len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, len);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46885bf5f669268ac6235cce5c62fdd68b4e490c","date":1397242003,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","sourceNew":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, len);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.getFilePointer();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","sourceOld":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, len);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb001140b24384c926aaf23d52fec16541ee747","date":1415981675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","sourceNew":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, (int) freeSpace);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.getFilePointer();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","sourceOld":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, len);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.getFilePointer();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#checkDiskFull(byte[],int,DataInput,long).mjava","sourceNew":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.sizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, (int) freeSpace);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.sizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.getFilePointer();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","sourceOld":"  private void checkDiskFull(byte[] b, int offset, DataInput in, long len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        if (b != null) {\n          delegate.writeBytes(b, offset, (int) freeSpace);\n        } else {\n          delegate.copyBytes(in, (int) freeSpace);\n        }\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.getFilePointer();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb001140b24384c926aaf23d52fec16541ee747":["46885bf5f669268ac6235cce5c62fdd68b4e490c"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["9bb001140b24384c926aaf23d52fec16541ee747"],"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb3caf04aac3b40edd51ef94db0c5d231fcb2ae9":["7ffaf83ebe420f1af7578f7a9e9d079c184edd3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"46885bf5f669268ac6235cce5c62fdd68b4e490c":["eb3caf04aac3b40edd51ef94db0c5d231fcb2ae9"]},"commit2Childs":{"9bb001140b24384c926aaf23d52fec16541ee747":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e":["eb3caf04aac3b40edd51ef94db0c5d231fcb2ae9"],"eb3caf04aac3b40edd51ef94db0c5d231fcb2ae9":["46885bf5f669268ac6235cce5c62fdd68b4e490c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ffaf83ebe420f1af7578f7a9e9d079c184edd3e"],"46885bf5f669268ac6235cce5c62fdd68b4e490c":["9bb001140b24384c926aaf23d52fec16541ee747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}