{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":null,"sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}