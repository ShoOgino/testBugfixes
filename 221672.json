{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(string);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(string);\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeZInt(number.intValue());\n      } else if (number instanceof Long) {\n        writeTLong(bufferedDocs, number.longValue());\n      } else if (number instanceof Float) {\n        writeZFloat(bufferedDocs, number.floatValue());\n      } else if (number instanceof Double) {\n        writeZDouble(bufferedDocs, number.doubleValue());\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}