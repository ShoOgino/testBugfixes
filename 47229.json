{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum.Frame#decodeMetaData().mjava","commits":[{"id":"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","date":1400179494,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"    public void decodeMetaData() throws IOException {\n\n      // lazily catch up on metadata decode:\n      final int limit = getTermBlockOrd();\n      boolean absolute = metaDataUpto == 0;\n      assert limit > 0;\n\n      // TODO: better API would be \"jump straight to term=N\"???\n      while (metaDataUpto < limit) {\n\n        // TODO: we could make \"tiers\" of metadata, ie,\n        // decode docFreq/totalTF but don't decode postings\n        // metadata; this way caller could get\n        // docFreq/totalTF w/o paying decode cost for\n        // postings\n\n        // TODO: if docFreq were bulk decoded we could\n        // just skipN here:\n\n        // stats\n        termState.docFreq = statsReader.readVInt();\n        //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n        if (fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n          //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n        }\n        // metadata \n        for (int i = 0; i < fr.longsSize; i++) {\n          longs[i] = bytesReader.readVLong();\n        }\n        fr.parent.postingsReader.decodeTerm(longs, bytesReader, fr.fieldInfo, termState, absolute);\n\n        metaDataUpto++;\n        absolute = false;\n      }\n      termState.termBlockOrd = metaDataUpto;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":"    public void decodeMetaData() throws IOException {\n\n      // lazily catch up on metadata decode:\n      final int limit = getTermBlockOrd();\n      boolean absolute = metaDataUpto == 0;\n      assert limit > 0;\n\n      // TODO: better API would be \"jump straight to term=N\"???\n      while (metaDataUpto < limit) {\n\n        // TODO: we could make \"tiers\" of metadata, ie,\n        // decode docFreq/totalTF but don't decode postings\n        // metadata; this way caller could get\n        // docFreq/totalTF w/o paying decode cost for\n        // postings\n\n        // TODO: if docFreq were bulk decoded we could\n        // just skipN here:\n\n        // stats\n        termState.docFreq = statsReader.readVInt();\n        //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n        if (fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n          //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n        }\n        // metadata \n        for (int i = 0; i < fr.longsSize; i++) {\n          longs[i] = bytesReader.readVLong();\n        }\n        fr.parent.postingsReader.decodeTerm(longs, bytesReader, fr.fieldInfo, termState, absolute);\n\n        metaDataUpto++;\n        absolute = false;\n      }\n      termState.termBlockOrd = metaDataUpto;\n    }\n\n","sourceOld":"    public void decodeMetaData() throws IOException {\n\n      // lazily catch up on metadata decode:\n      final int limit = getTermBlockOrd();\n      boolean absolute = metaDataUpto == 0;\n      assert limit > 0;\n\n      // TODO: better API would be \"jump straight to term=N\"???\n      while (metaDataUpto < limit) {\n\n        // TODO: we could make \"tiers\" of metadata, ie,\n        // decode docFreq/totalTF but don't decode postings\n        // metadata; this way caller could get\n        // docFreq/totalTF w/o paying decode cost for\n        // postings\n\n        // TODO: if docFreq were bulk decoded we could\n        // just skipN here:\n\n        // stats\n        termState.docFreq = statsReader.readVInt();\n        //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n        if (fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n          //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n        }\n        // metadata \n        for (int i = 0; i < fr.longsSize; i++) {\n          longs[i] = bytesReader.readVLong();\n        }\n        fr.parent.postingsReader.decodeTerm(longs, bytesReader, fr.fieldInfo, termState, absolute);\n\n        metaDataUpto++;\n        absolute = false;\n      }\n      termState.termBlockOrd = metaDataUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7266c313bb3b4fbcde3dcc82556182e1fae90080","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}