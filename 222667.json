{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request.  If {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is null, then use\n   * {@link #getParser()}\n   * @param request The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws SolrServerException\n   * @throws IOException\n   *\n   * @see #request(org.apache.solr.client.solrj.SolrRequest, org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = _parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}