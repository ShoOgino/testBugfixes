{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#buildListOfFacetRangeOtherOptions().mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#buildListOfFacetRangeOtherOptions().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper for seeding the re-used static struct, and asserting no one changes the Enum w/o updating this test\n   *\n   * @see #assertBeforeAfterBetween \n   * @see #formatFacetRangeOther\n   * @see #OTHERS\n   */\n  private static final List<EnumSet<FacetRangeOther>> buildListOfFacetRangeOtherOptions() {\n    assertEquals(\"If someone adds to FacetRangeOther this method (and bulk of test) needs updated\",\n                 5, EnumSet.allOf(FacetRangeOther.class).size());\n    \n    // we're not overly concerned about testing *EVERY* permutation,\n    // we just want to make sure we test multiple code paths (some, all, \"ALL\", none)\n    //\n    // NOTE: Don't mix \"ALL\" or \"NONE\" with other options so we don't have to make assertBeforeAfterBetween\n    // overly complicated\n    ArrayList<EnumSet<FacetRangeOther>> results = new ArrayList(5);\n    results.add(EnumSet.of(FacetRangeOther.ALL));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER, FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER));\n    results.add(EnumSet.of(FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.NONE));\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#buildListOfFacetRangeOtherOptions().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper for seeding the re-used static struct, and asserting no one changes the Enum w/o updating this test\n   *\n   * @see #assertBeforeAfterBetween \n   * @see #formatFacetRangeOther\n   * @see #OTHERS\n   */\n  private static final List<EnumSet<FacetRangeOther>> buildListOfFacetRangeOtherOptions() {\n    assertEquals(\"If someone adds to FacetRangeOther this method (and bulk of test) needs updated\",\n                 5, EnumSet.allOf(FacetRangeOther.class).size());\n    \n    // we're not overly concerned about testing *EVERY* permutation,\n    // we just want to make sure we test multiple code paths (some, all, \"ALL\", none)\n    //\n    // NOTE: Don't mix \"ALL\" or \"NONE\" with other options so we don't have to make assertBeforeAfterBetween\n    // overly complicated\n    ArrayList<EnumSet<FacetRangeOther>> results = new ArrayList(5);\n    results.add(EnumSet.of(FacetRangeOther.ALL));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER, FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER));\n    results.add(EnumSet.of(FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.NONE));\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#buildListOfFacetRangeOtherOptions().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper for seeding the re-used static struct, and asserting no one changes the Enum w/o updating this test\n   *\n   * @see #assertBeforeAfterBetween \n   * @see #formatFacetRangeOther\n   * @see #OTHERS\n   */\n  private static final List<EnumSet<FacetRangeOther>> buildListOfFacetRangeOtherOptions() {\n    assertEquals(\"If someone adds to FacetRangeOther this method (and bulk of test) needs updated\",\n                 5, EnumSet.allOf(FacetRangeOther.class).size());\n    \n    // we're not overly concerned about testing *EVERY* permutation,\n    // we just want to make sure we test multiple code paths (some, all, \"ALL\", none)\n    //\n    // NOTE: Don't mix \"ALL\" or \"NONE\" with other options so we don't have to make assertBeforeAfterBetween\n    // overly complicated\n    ArrayList<EnumSet<FacetRangeOther>> results = new ArrayList(5);\n    results.add(EnumSet.of(FacetRangeOther.ALL));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER, FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER));\n    results.add(EnumSet.of(FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.NONE));\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#buildListOfFacetRangeOtherOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#buildListOfFacetRangeOtherOptions().mjava","sourceNew":"  /** \n   * Helper for seeding the re-used static struct, and asserting no one changes the Enum w/o updating this test\n   *\n   * @see #assertBeforeAfterBetween \n   * @see #formatFacetRangeOther\n   * @see #OTHERS\n   */\n  private static final List<EnumSet<FacetRangeOther>> buildListOfFacetRangeOtherOptions() {\n    assertEquals(\"If someone adds to FacetRangeOther this method (and bulk of test) needs updated\",\n                 5, EnumSet.allOf(FacetRangeOther.class).size());\n    \n    // we're not overly concerned about testing *EVERY* permutation,\n    // we just want to make sure we test multiple code paths (some, all, \"ALL\", none)\n    //\n    // NOTE: Don't mix \"ALL\" or \"NONE\" with other options so we don't have to make assertBeforeAfterBetween\n    // overly complicated\n    ArrayList<EnumSet<FacetRangeOther>> results = new ArrayList<>(5);\n    results.add(EnumSet.of(FacetRangeOther.ALL));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER, FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER));\n    results.add(EnumSet.of(FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.NONE));\n    return results;\n  }\n\n","sourceOld":"  /** \n   * Helper for seeding the re-used static struct, and asserting no one changes the Enum w/o updating this test\n   *\n   * @see #assertBeforeAfterBetween \n   * @see #formatFacetRangeOther\n   * @see #OTHERS\n   */\n  private static final List<EnumSet<FacetRangeOther>> buildListOfFacetRangeOtherOptions() {\n    assertEquals(\"If someone adds to FacetRangeOther this method (and bulk of test) needs updated\",\n                 5, EnumSet.allOf(FacetRangeOther.class).size());\n    \n    // we're not overly concerned about testing *EVERY* permutation,\n    // we just want to make sure we test multiple code paths (some, all, \"ALL\", none)\n    //\n    // NOTE: Don't mix \"ALL\" or \"NONE\" with other options so we don't have to make assertBeforeAfterBetween\n    // overly complicated\n    ArrayList<EnumSet<FacetRangeOther>> results = new ArrayList(5);\n    results.add(EnumSet.of(FacetRangeOther.ALL));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER, FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER));\n    results.add(EnumSet.of(FacetRangeOther.BETWEEN));\n    results.add(EnumSet.of(FacetRangeOther.NONE));\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c05b634713ca09b2267477408773904d4c69dd9d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e98520789adb1d5ad05afb4956eca0944a929688","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}