{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36ca1ba26526001796fd1eb71bc239594cbb2a56","date":1328545121,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(15000);\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           CommonsHttpSolrServer server = new CommonsHttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(15000);\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           CommonsHttpSolrServer server = new CommonsHttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        // TODO: do we first everyone register as sync phase? get the overseer\n        // to do it?\n        // TODO: this should be done in parallel\n        QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"getVersions\",\n            Integer.toString(1000), \"sync\", zkLeader.getCoreUrl(), \"distrib\",\n            \"false\"));\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n            node.getCoreUrl());\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(15000);\n        //System.out.println(\"ask \" + node.getCoreUrl() + \" to sync\");\n        NamedList rsp = server.request(qr);\n        //System.out.println(\"response about syncing to leader:\" + rsp + \" node:\"\n        //    + node.getCoreUrl() + \" me:\" + zkController.getBaseUrl());\n        boolean success = (Boolean) rsp.get(\"sync\");\n        //System.out.println(\"success:\" + success);\n        if (!success) {\n         // System.out\n         //     .println(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          log.info(\"try and ask \" + node.getCoreUrl() + \" to recover\");\n          try {\n            server = new CommonsHttpSolrServer(node.getBaseUrl());\n            server.setSoTimeout(5000);\n            server.setConnectionTimeout(5000);\n            \n            RequestRecovery recoverRequestCmd = new RequestRecovery();\n            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n            recoverRequestCmd.setCoreName(node.getCoreName());\n            \n            server.request(recoverRequestCmd);\n          } catch (Exception e) {\n            log.info(\"Could not tell a replica to recover\", e);\n          }\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           CommonsHttpSolrServer server = new CommonsHttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,\n      SolrServerException, IOException {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           \n           // TODO: do this in background threads\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(srsp.getShardAddress());\n           server.setConnectionTimeout(45000);\n           server.setSoTimeout(45000);\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           \n           // TODO: do this in background threads\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(srsp.getShardAddress());\n           server.setConnectionTimeout(45000);\n           server.setSoTimeout(45000);\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce9115008b2600dda16a6765e06b6b380458c02f","date":1343435746,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           \n           // TODO: do this in background threads\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(srsp.getShardAddress());\n           server.setConnectionTimeout(45000);\n           server.setSoTimeout(45000);\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           //System.out.println(\"Sync failed - asking replica to recover.\");\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(zkLeader.getBaseUrl());\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      // System.out.println(\"I have no replicas\");\n      // I have no replicas\n      return;\n    }\n    //System.out.println(\"tell my replicas to sync\");\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n//         System.out\n//             .println(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        log.info(\"try and ask \" + node.getCoreUrl() + \" to sync\");\n        requestSync(node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n\n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      //System.out.println(\"got response:\" + success);\n      if (!success) {\n         try {\n           log.info(\"Sync failed - asking replica to recover.\");\n           \n           // TODO: do this in background threads\n           RequestRecovery recoverRequestCmd = new RequestRecovery();\n           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);\n           \n           HttpSolrServer server = new HttpSolrServer(srsp.getShardAddress());\n           server.setConnectionTimeout(45000);\n           server.setSoTimeout(45000);\n           server.request(recoverRequestCmd);\n         } catch (Exception e) {\n           log.info(\"Could not tell a replica to recover\", e);\n         }\n         shardHandler.cancelAll();\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Exception e) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", e);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.get(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":["fa64435b5902ce266c23755a4a00691a3285dab8","ce9115008b2600dda16a6765e06b6b380458c02f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08404c494c3d7f0f23c26191b824a38ac9384877","date":1348446583,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           \n           requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(cd),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            leaderProps.getStr(ZkStateReader.NODE_NAME_PROP),\n            leaderProps.getStr(ZkStateReader.CORE_NAME_PROP));\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n         try {\n           log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - asking replica (\" + srsp.getShardAddress() + \") to recover.\");\n           if (isClosed) {\n             log.info(\"We have been closed, don't request that a replica recover\");\n           } else {\n             requestRecovery(leaderProps, ((ShardCoreRequest)srsp.getShardRequest()).baseUrl, ((ShardCoreRequest)srsp.getShardRequest()).coreName);\n           }\n         } catch (Throwable t) {\n           SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n         }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["36ca1ba26526001796fd1eb71bc239594cbb2a56"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["36ca1ba26526001796fd1eb71bc239594cbb2a56","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"fa64435b5902ce266c23755a4a00691a3285dab8":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["ce9115008b2600dda16a6765e06b6b380458c02f"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"36ca1ba26526001796fd1eb71bc239594cbb2a56":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ce9115008b2600dda16a6765e06b6b380458c02f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"ce9115008b2600dda16a6765e06b6b380458c02f":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ce9115008b2600dda16a6765e06b6b380458c02f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["08404c494c3d7f0f23c26191b824a38ac9384877"],"08404c494c3d7f0f23c26191b824a38ac9384877":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"]},"commit2Childs":{"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["fa64435b5902ce266c23755a4a00691a3285dab8","05a14b2611ead08655a2b2bdc61632eb31316e57"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["ce9115008b2600dda16a6765e06b6b380458c02f","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"36ca1ba26526001796fd1eb71bc239594cbb2a56":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"a6378064655e76cd7b908b1cab4ce425b384b508":["08404c494c3d7f0f23c26191b824a38ac9384877"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ce9115008b2600dda16a6765e06b6b380458c02f":["6013b4c7388f1627659c8f96c44abd10a294d3a6","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","36ca1ba26526001796fd1eb71bc239594cbb2a56","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08404c494c3d7f0f23c26191b824a38ac9384877":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","05a14b2611ead08655a2b2bdc61632eb31316e57","0d22ac6a4146774c1bc8400160fc0b6150294e92","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}