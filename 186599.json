{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3774640fe0eb88aa05f4c2ed4a743aac84bc063","date":1420906359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n        if (tempSnapPuller != null && tempSnapPuller != snapPuller) {\n          tempSnapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n        if (tempSnapPuller != null && tempSnapPuller != snapPuller) {\n          tempSnapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (snapPuller != null) {\n          snapPuller.destroy();\n        }\n        if (tempSnapPuller != null && tempSnapPuller != snapPuller) {\n          tempSnapPuller.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        ExecutorUtil.shutdownNowAndAwaitTermination(restoreExecutor);\n        if (restoreFuture != null) {\n          restoreFuture.cancel(true);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        ExecutorUtil.shutdownNowAndAwaitTermination(restoreExecutor);\n        if (restoreFuture != null) {\n          restoreFuture.cancel(true);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659","date":1440978271,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown(); // we don't wait for shutdown - this can deadlock core reload\n        } finally {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        ExecutorUtil.shutdownAndAwaitTermination(restoreExecutor);\n        if (restoreFuture != null) {\n          restoreFuture.cancel(false);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown();\n        } finally {\n          try {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n          } finally {\n            if (executorService != null) ExecutorUtil\n                .shutdownNowAndAwaitTermination(executorService);\n          }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        ExecutorUtil.shutdownNowAndAwaitTermination(restoreExecutor);\n        if (restoreFuture != null) {\n          restoreFuture.cancel(true);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerCloseHook().mjava","sourceNew":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (executorService != null) executorService.shutdown(); // we don't wait for shutdown - this can deadlock core reload\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        if (pollingIndexFetcher != null) {\n          pollingIndexFetcher.destroy();\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n    });\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        ExecutorUtil.shutdownAndAwaitTermination(restoreExecutor);\n        if (restoreFuture != null) {\n          restoreFuture.cancel(false);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","sourceOld":"  /**\n   * register a closehook\n   */\n  private void registerCloseHook() {\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        try {\n          if (executorService != null) executorService.shutdown(); // we don't wait for shutdown - this can deadlock core reload\n        } finally {\n            if (pollingIndexFetcher != null) {\n              pollingIndexFetcher.destroy();\n            }\n        }\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        ExecutorUtil.shutdownAndAwaitTermination(restoreExecutor);\n        if (restoreFuture != null) {\n          restoreFuture.cancel(false);\n        }\n      }\n\n      @Override\n      public void postClose(SolrCore core) {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3774640fe0eb88aa05f4c2ed4a743aac84bc063":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d3774640fe0eb88aa05f4c2ed4a743aac84bc063","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"859081acf00749f5dd462772c571d611d4a4d2db":["b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["d3774640fe0eb88aa05f4c2ed4a743aac84bc063"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"d3774640fe0eb88aa05f4c2ed4a743aac84bc063":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3774640fe0eb88aa05f4c2ed4a743aac84bc063"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659":["859081acf00749f5dd462772c571d611d4a4d2db"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","b9248e8833b6ab03d4e0ebbeaa8b26d8798e7659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}