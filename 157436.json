{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#ForUtil(float,DataOutput).mjava","commits":[{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#ForUtil(float,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    formats = new PackedInts.FormatAndBits[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      formats[bpv] = formatAndBits;\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0d2b90b9b7c96860f9c096edae6ed8fad95388","date":1344516744,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#ForUtil(float,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#ForUtil(float,DataOutput).mjava","sourceNew":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      encodedSizes[bpv] = encodedSize(formatAndBits.format, formatAndBits.bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    formats = new PackedInts.FormatAndBits[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      formats[bpv] = formatAndBits;\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(float,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#ForUtil(float,DataOutput).mjava","sourceNew":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      encodedSizes[bpv] = encodedSize(formatAndBits.format, formatAndBits.bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      encodedSizes[bpv] = encodedSize(formatAndBits.format, formatAndBits.bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PACKED_INTS_VERSION, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"]},"commit2Childs":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf88b0fdab72e7a3389fdd9a68ae252142c41511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}