{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#gatherNodes(Node,List[String],String).mjava","commits":[{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#gatherNodes(Node,List[String],String).mjava","pathOld":"/dev/null","sourceNew":"  private void gatherNodes(Node node, List<String> expressions, String path) {\n\n    String nodeName = node.getNodeName();\n    String thisPath = path + \"/\" + nodeName;\n    //Parent[@id='1']/Children/child[@name]\n    // Add in the xpaths for verification of any attributes.\n    NamedNodeMap attrs = node.getAttributes();\n    String qualifier = \"\";\n    if (attrs.getLength() > 0) {\n      // Assemble the prefix for qualifying all of the attributes with the same name\n      if (qualified.contains(nodeName)) {\n        qualifier = \"@name='\" + node.getAttributes().getNamedItem(\"name\").getTextContent() + \"'\";\n      }\n\n      for (int idx = 0; idx < attrs.getLength(); ++idx) {\n\n        Node attr = attrs.item(idx);\n        if (StringUtils.isNotBlank(qualifier) && \"name\".equals(attr.getNodeName())) {\n          continue; // Already added \"name\" attribute in qualifier string.\n        }\n        if (StringUtils.isNotBlank(qualifier)) {\n          // Create [@name=\"stuff\" and @attrib=\"value\"] fragment\n          expressions.add(thisPath +\n              \"[\" + qualifier + \" and @\" + attr.getNodeName() + \"='\" + attr.getTextContent() + \"']\");\n\n        } else {\n          // Create [@attrib=\"value\"] fragment\n          expressions.add(thisPath +\n              \"[\" + qualifier + \" @\" + attr.getNodeName() + \"='\" + attr.getTextContent() + \"']\");\n        }\n      }\n    }\n    // Now add the text for special nodes\n    // a[normalize-space(text())='somesite']\n    if (addText.contains(nodeName)) {\n      expressions.add(thisPath + \"[\" + qualifier + \" and text()='\" + node.getTextContent() + \"']\");\n    }\n    // Now collect all the child element nodes.\n    NodeList nodeList = node.getChildNodes();\n    for (int i = 0; i < nodeList.getLength(); i++) {\n\n      Node currentNode = nodeList.item(i);\n      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {\n        if (StringUtils.isNotBlank(qualifier)) {\n          gatherNodes(currentNode, expressions, thisPath + \"[\" + qualifier + \"]\");\n        } else {\n          gatherNodes(currentNode, expressions, thisPath);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#gatherNodes(Node,List[String],String).mjava","pathOld":"/dev/null","sourceNew":"  private void gatherNodes(Node node, List<String> expressions, String path) {\n\n    String nodeName = node.getNodeName();\n    String thisPath = path + \"/\" + nodeName;\n    //Parent[@id='1']/Children/child[@name]\n    // Add in the xpaths for verification of any attributes.\n    NamedNodeMap attrs = node.getAttributes();\n    String qualifier = \"\";\n    if (attrs.getLength() > 0) {\n      // Assemble the prefix for qualifying all of the attributes with the same name\n      if (qualified.contains(nodeName)) {\n        qualifier = \"@name='\" + node.getAttributes().getNamedItem(\"name\").getTextContent() + \"'\";\n      }\n\n      for (int idx = 0; idx < attrs.getLength(); ++idx) {\n\n        Node attr = attrs.item(idx);\n        if (StringUtils.isNotBlank(qualifier) && \"name\".equals(attr.getNodeName())) {\n          continue; // Already added \"name\" attribute in qualifier string.\n        }\n        if (StringUtils.isNotBlank(qualifier)) {\n          // Create [@name=\"stuff\" and @attrib=\"value\"] fragment\n          expressions.add(thisPath +\n              \"[\" + qualifier + \" and @\" + attr.getNodeName() + \"='\" + attr.getTextContent() + \"']\");\n\n        } else {\n          // Create [@attrib=\"value\"] fragment\n          expressions.add(thisPath +\n              \"[\" + qualifier + \" @\" + attr.getNodeName() + \"='\" + attr.getTextContent() + \"']\");\n        }\n      }\n    }\n    // Now add the text for special nodes\n    // a[normalize-space(text())='somesite']\n    if (addText.contains(nodeName)) {\n      expressions.add(thisPath + \"[\" + qualifier + \" and text()='\" + node.getTextContent() + \"']\");\n    }\n    // Now collect all the child element nodes.\n    NodeList nodeList = node.getChildNodes();\n    for (int i = 0; i < nodeList.getLength(); i++) {\n\n      Node currentNode = nodeList.item(i);\n      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {\n        if (StringUtils.isNotBlank(qualifier)) {\n          gatherNodes(currentNode, expressions, thisPath + \"[\" + qualifier + \"]\");\n        } else {\n          gatherNodes(currentNode, expressions, thisPath);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#gatherNodes(Node,List[String],String).mjava","sourceNew":null,"sourceOld":"  private void gatherNodes(Node node, List<String> expressions, String path) {\n\n    String nodeName = node.getNodeName();\n    String thisPath = path + \"/\" + nodeName;\n    //Parent[@id='1']/Children/child[@name]\n    // Add in the xpaths for verification of any attributes.\n    NamedNodeMap attrs = node.getAttributes();\n    String qualifier = \"\";\n    if (attrs.getLength() > 0) {\n      // Assemble the prefix for qualifying all of the attributes with the same name\n      if (qualified.contains(nodeName)) {\n        qualifier = \"@name='\" + node.getAttributes().getNamedItem(\"name\").getTextContent() + \"'\";\n      }\n\n      for (int idx = 0; idx < attrs.getLength(); ++idx) {\n\n        Node attr = attrs.item(idx);\n        if (StringUtils.isNotBlank(qualifier) && \"name\".equals(attr.getNodeName())) {\n          continue; // Already added \"name\" attribute in qualifier string.\n        }\n        if (StringUtils.isNotBlank(qualifier)) {\n          // Create [@name=\"stuff\" and @attrib=\"value\"] fragment\n          expressions.add(thisPath +\n              \"[\" + qualifier + \" and @\" + attr.getNodeName() + \"='\" + attr.getTextContent() + \"']\");\n\n        } else {\n          // Create [@attrib=\"value\"] fragment\n          expressions.add(thisPath +\n              \"[\" + qualifier + \" @\" + attr.getNodeName() + \"='\" + attr.getTextContent() + \"']\");\n        }\n      }\n    }\n    // Now add the text for special nodes\n    // a[normalize-space(text())='somesite']\n    if (addText.contains(nodeName)) {\n      expressions.add(thisPath + \"[\" + qualifier + \" and text()='\" + node.getTextContent() + \"']\");\n    }\n    // Now collect all the child element nodes.\n    NodeList nodeList = node.getChildNodes();\n    for (int i = 0; i < nodeList.getLength(); i++) {\n\n      Node currentNode = nodeList.item(i);\n      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {\n        if (StringUtils.isNotBlank(qualifier)) {\n          gatherNodes(currentNode, expressions, thisPath + \"[\" + qualifier + \"]\");\n        } else {\n          gatherNodes(currentNode, expressions, thisPath);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc6e48afbb50ae0a22fa76e226f04fd585532938"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}