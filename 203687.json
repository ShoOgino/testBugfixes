{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/PlanetModel#surfaceDistance(GeoPoint,GeoPoint).mjava","commits":[{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/PlanetModel#surfaceDistance(GeoPoint,GeoPoint).mjava","pathOld":"/dev/null","sourceNew":"  /** Compute surface distance between two points.\n   * @param p1 is the first point.\n   * @param p2 is the second point.\n   * @return the adjusted angle, when multiplied by the mean earth radius, yields a surface distance.  This will differ\n   * from GeoPoint.arcDistance() only when the planet model is not a sphere. @see {@link org.apache.lucene.spatial.spatial4j.geo3d.GeoPoint#arcDistance(GeoPoint)}\n   */\n  public double surfaceDistance(final GeoPoint p1, final GeoPoint p2) {\n    final double latA = p1.getLatitude();\n    final double lonA = p1.getLongitude();\n    final double latB = p2.getLatitude();\n    final double lonB = p2.getLongitude();\n\n    final double L = lonB - lonA;\n    final double oF = 1.0 - this.flattening;\n    final double U1 = Math.atan(oF * Math.tan(latA));\n    final double U2 = Math.atan(oF * Math.tan(latB));\n    final double sU1 = Math.sin(U1);\n    final double cU1 = Math.cos(U1);\n    final double sU2 = Math.sin(U2);\n    final double cU2 = Math.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double cos2Alpha, cos2SigmaM;\n    \n    double lambda = L;\n    double iters = 100;\n\n    do {\n      final double sinLambda = Math.sin(lambda);\n      final double cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (Math.abs(sinSigma) < Vector.MINIMUM_RESOLUTION)\n        return 0.0;\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      final double sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1.0 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2.0 * sU1 * sU2 / cos2Alpha;\n\n      final double c = this.flattening * 0.625 * cos2Alpha * (4.0 + this.flattening * (4.0 - 3.0 * cos2Alpha));\n      final double lambdaP = lambda;\n      lambda = L + (1.0 - c) * this.flattening * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM)));\n      if (Math.abs(lambda - lambdaP) < Vector.MINIMUM_RESOLUTION)\n        break;\n    } while (--iters > 0);\n\n    if (iters == 0)\n      return 0.0;\n\n    final double uSq = cos2Alpha * this.squareRatio;\n    final double A = 1.0 + uSq * 0.00006103515625 * (4096.0 + uSq * (-768.0 + uSq * (320.0 - 175.0 * uSq)));\n    final double B = uSq * 0.0009765625 * (256.0 + uSq * (-128.0 + uSq * (74.0 - 47.0 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B * 0.25 * (cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM) - B * 0.16666666666666666666667 * cos2SigmaM\n            * (-3.0 + 4.0 * sinSigma * sinSigma) * (-3.0 + 4.0 * cos2SigmaM * cos2SigmaM)));\n\n    return this.c * A * (sigma - deltaSigma);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PlanetModel#surfaceDistance(GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/PlanetModel#surfaceDistance(GeoPoint,GeoPoint).mjava","sourceNew":"  /** Compute surface distance between two points.\n   * @param p1 is the first point.\n   * @param p2 is the second point.\n   * @return the adjusted angle, when multiplied by the mean earth radius, yields a surface distance.  This will differ\n   * from GeoPoint.arcDistance() only when the planet model is not a sphere. @see {@link org.apache.lucene.geo3d.GeoPoint#arcDistance(GeoPoint)}\n   */\n  public double surfaceDistance(final GeoPoint p1, final GeoPoint p2) {\n    final double latA = p1.getLatitude();\n    final double lonA = p1.getLongitude();\n    final double latB = p2.getLatitude();\n    final double lonB = p2.getLongitude();\n\n    final double L = lonB - lonA;\n    final double oF = 1.0 - this.flattening;\n    final double U1 = Math.atan(oF * Math.tan(latA));\n    final double U2 = Math.atan(oF * Math.tan(latB));\n    final double sU1 = Math.sin(U1);\n    final double cU1 = Math.cos(U1);\n    final double sU2 = Math.sin(U2);\n    final double cU2 = Math.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double cos2Alpha, cos2SigmaM;\n    \n    double lambda = L;\n    double iters = 100;\n\n    do {\n      final double sinLambda = Math.sin(lambda);\n      final double cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (Math.abs(sinSigma) < Vector.MINIMUM_RESOLUTION)\n        return 0.0;\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      final double sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1.0 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2.0 * sU1 * sU2 / cos2Alpha;\n\n      final double c = this.flattening * 0.625 * cos2Alpha * (4.0 + this.flattening * (4.0 - 3.0 * cos2Alpha));\n      final double lambdaP = lambda;\n      lambda = L + (1.0 - c) * this.flattening * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM)));\n      if (Math.abs(lambda - lambdaP) < Vector.MINIMUM_RESOLUTION)\n        break;\n    } while (--iters > 0);\n\n    if (iters == 0)\n      return 0.0;\n\n    final double uSq = cos2Alpha * this.squareRatio;\n    final double A = 1.0 + uSq * 0.00006103515625 * (4096.0 + uSq * (-768.0 + uSq * (320.0 - 175.0 * uSq)));\n    final double B = uSq * 0.0009765625 * (256.0 + uSq * (-128.0 + uSq * (74.0 - 47.0 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B * 0.25 * (cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM) - B * 0.16666666666666666666667 * cos2SigmaM\n            * (-3.0 + 4.0 * sinSigma * sinSigma) * (-3.0 + 4.0 * cos2SigmaM * cos2SigmaM)));\n\n    return this.c * A * (sigma - deltaSigma);\n  }\n\n","sourceOld":"  /** Compute surface distance between two points.\n   * @param p1 is the first point.\n   * @param p2 is the second point.\n   * @return the adjusted angle, when multiplied by the mean earth radius, yields a surface distance.  This will differ\n   * from GeoPoint.arcDistance() only when the planet model is not a sphere. @see {@link org.apache.lucene.spatial.spatial4j.geo3d.GeoPoint#arcDistance(GeoPoint)}\n   */\n  public double surfaceDistance(final GeoPoint p1, final GeoPoint p2) {\n    final double latA = p1.getLatitude();\n    final double lonA = p1.getLongitude();\n    final double latB = p2.getLatitude();\n    final double lonB = p2.getLongitude();\n\n    final double L = lonB - lonA;\n    final double oF = 1.0 - this.flattening;\n    final double U1 = Math.atan(oF * Math.tan(latA));\n    final double U2 = Math.atan(oF * Math.tan(latB));\n    final double sU1 = Math.sin(U1);\n    final double cU1 = Math.cos(U1);\n    final double sU2 = Math.sin(U2);\n    final double cU2 = Math.cos(U2);\n\n    double sigma, sinSigma, cosSigma;\n    double cos2Alpha, cos2SigmaM;\n    \n    double lambda = L;\n    double iters = 100;\n\n    do {\n      final double sinLambda = Math.sin(lambda);\n      final double cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cU2 * sinLambda) * (cU2 * sinLambda) + (cU1 * sU2 - sU1 * cU2 * cosLambda)\n          * (cU1 * sU2 - sU1 * cU2 * cosLambda));\n      if (Math.abs(sinSigma) < Vector.MINIMUM_RESOLUTION)\n        return 0.0;\n\n      cosSigma = sU1 * sU2 + cU1 * cU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      final double sinAlpha = cU1 * cU2 * sinLambda / sinSigma;\n      cos2Alpha = 1.0 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2.0 * sU1 * sU2 / cos2Alpha;\n\n      final double c = this.flattening * 0.625 * cos2Alpha * (4.0 + this.flattening * (4.0 - 3.0 * cos2Alpha));\n      final double lambdaP = lambda;\n      lambda = L + (1.0 - c) * this.flattening * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma *\n          (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM)));\n      if (Math.abs(lambda - lambdaP) < Vector.MINIMUM_RESOLUTION)\n        break;\n    } while (--iters > 0);\n\n    if (iters == 0)\n      return 0.0;\n\n    final double uSq = cos2Alpha * this.squareRatio;\n    final double A = 1.0 + uSq * 0.00006103515625 * (4096.0 + uSq * (-768.0 + uSq * (320.0 - 175.0 * uSq)));\n    final double B = uSq * 0.0009765625 * (256.0 + uSq * (-128.0 + uSq * (74.0 - 47.0 * uSq)));\n    final double deltaSigma = B * sinSigma * (cos2SigmaM + B * 0.25 * (cosSigma * (-1.0 + 2.0 * cos2SigmaM * cos2SigmaM) - B * 0.16666666666666666666667 * cos2SigmaM\n            * (-3.0 + 4.0 * sinSigma * sinSigma) * (-3.0 + 4.0 * cos2SigmaM * cos2SigmaM)));\n\n    return this.c * A * (sigma - deltaSigma);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["535df84251be5af3be84d750beba0021aff9132d"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"535df84251be5af3be84d750beba0021aff9132d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}