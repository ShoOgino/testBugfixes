{"path":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseString().mjava","commits":[{"id":"928077c840ee09456eee199964d886c73fc53314","date":1468594268,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseString().mjava","pathOld":"/dev/null","sourceNew":"  private String parseString() throws ParseException {\n    scan('\"');\n    StringBuilder b = new StringBuilder();\n    while (upto < input.length()) {\n      char ch = input.charAt(upto);\n      if (ch == '\"') {\n        upto++;\n        return b.toString();\n      }\n      if (ch == '\\\\') {\n        // an escaped character\n        upto++;\n        if (upto == input.length()) {\n          throw newParseException(\"hit EOF inside string literal\");\n        }\n        ch = input.charAt(upto);\n        if (ch == 'u') {\n          // 4 hex digit unicode BMP escape\n          upto++;\n          if (upto + 4 > input.length()) {\n            throw newParseException(\"hit EOF inside string literal\");\n          }\n          b.append(Integer.parseInt(input.substring(upto, upto+4), 16));\n        } else if (ch == '\\\\') {\n          b.append('\\\\');\n          upto++;\n        } else {\n          // TODO: allow \\n, \\t, etc.???\n          throw newParseException(\"unsupported string escape character \\\\\" + ch);\n        }\n      } else {\n        b.append(ch);\n        upto++;\n      }\n    }\n\n    throw newParseException(\"hit EOF inside string literal\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseString().mjava","pathOld":"/dev/null","sourceNew":"  private String parseString() throws ParseException {\n    scan('\"');\n    StringBuilder b = new StringBuilder();\n    while (upto < input.length()) {\n      char ch = input.charAt(upto);\n      if (ch == '\"') {\n        upto++;\n        return b.toString();\n      }\n      if (ch == '\\\\') {\n        // an escaped character\n        upto++;\n        if (upto == input.length()) {\n          throw newParseException(\"hit EOF inside string literal\");\n        }\n        ch = input.charAt(upto);\n        if (ch == 'u') {\n          // 4 hex digit unicode BMP escape\n          upto++;\n          if (upto + 4 > input.length()) {\n            throw newParseException(\"hit EOF inside string literal\");\n          }\n          b.append(Integer.parseInt(input.substring(upto, upto+4), 16));\n        } else if (ch == '\\\\') {\n          b.append('\\\\');\n          upto++;\n        } else {\n          // TODO: allow \\n, \\t, etc.???\n          throw newParseException(\"unsupported string escape character \\\\\" + ch);\n        }\n      } else {\n        b.append(ch);\n        upto++;\n      }\n    }\n\n    throw newParseException(\"hit EOF inside string literal\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"928077c840ee09456eee199964d886c73fc53314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","928077c840ee09456eee199964d886c73fc53314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["928077c840ee09456eee199964d886c73fc53314"]},"commit2Childs":{"928077c840ee09456eee199964d886c73fc53314":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["928077c840ee09456eee199964d886c73fc53314","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}