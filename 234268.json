{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/strategy/vector/DistanceValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/strategy/vector/DistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    AtomicReader reader = readerContext.reader();\n\n    final double[] ptX = FieldCache.DEFAULT.getDoubles(reader, fields.getFieldNameX(), true);\n    final double[] ptY = FieldCache.DEFAULT.getDoubles(reader, fields.getFieldNameY(), true);\n    final Bits validX =  FieldCache.DEFAULT.getDocsWithField(reader, fields.getFieldNameX());\n    final Bits validY =  FieldCache.DEFAULT.getDocsWithField(reader, fields.getFieldNameY());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc) && validY.get(doc)) {\n          PointImpl pt = new PointImpl( ptX[doc],  ptY[doc] );\n          return calculator.distance(from, pt);\n        }\n        return 0;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/strategy/vector/DistanceValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/strategy/vector/DistanceValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    AtomicReader reader = readerContext.reader();\n\n    final double[] ptX = FieldCache.DEFAULT.getDoubles(reader, fields.getFieldNameX(), true);\n    final double[] ptY = FieldCache.DEFAULT.getDoubles(reader, fields.getFieldNameY(), true);\n    final Bits validX =  FieldCache.DEFAULT.getDocsWithField(reader, fields.getFieldNameX());\n    final Bits validY =  FieldCache.DEFAULT.getDocsWithField(reader, fields.getFieldNameY());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc) && validY.get(doc)) {\n          PointImpl pt = new PointImpl( ptX[doc],  ptY[doc] );\n          return calculator.distance(from, pt);\n        }\n        return 0;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    AtomicReader reader = readerContext.reader();\n\n    final double[] ptX = FieldCache.DEFAULT.getDoubles(reader, fields.getFieldNameX(), true);\n    final double[] ptY = FieldCache.DEFAULT.getDoubles(reader, fields.getFieldNameY(), true);\n    final Bits validX =  FieldCache.DEFAULT.getDocsWithField(reader, fields.getFieldNameX());\n    final Bits validY =  FieldCache.DEFAULT.getDocsWithField(reader, fields.getFieldNameY());\n\n    return new FunctionValues() {\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc) && validY.get(doc)) {\n          PointImpl pt = new PointImpl( ptX[doc],  ptY[doc] );\n          return calculator.distance(from, pt);\n        }\n        return 0;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}