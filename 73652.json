{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().updateClusterState(true);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().updateClusterState();\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().updateClusterState(true);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().updateClusterState();\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    Collection<Slice> shards = cstate.getActiveSlices(collection);\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","date":1507866341,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        //additional logging\n        log.info(\"cdcr: shardcheckpoint: versions on target: \" + version);\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786","date":1508967813,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        //additional logging\n        log.info(\"cdcr: shardcheckpoint: versions on target: \" + version);\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new DefaultSolrThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleCollectionCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.\n   * This checkpoint is used on the source cluster to setup the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader. <br/>\n   * This method will execute in parallel one\n   * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will\n   * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not\n   * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new\n   * updates to the target cluster while we are currently instantiating the\n   * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.\n   * This solution only works in scenarios where the topology of the source and target clusters are identical.\n   */\n  private void handleCollectionCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException, SolrServerException {\n    ZkController zkController = core.getCoreContainer().getZkController();\n    try {\n      zkController.getZkStateReader().forceUpdateCollection(collection);\n    } catch (Exception e) {\n      log.warn(\"Error when updating cluster state\", e);\n    }\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection docCollection = cstate.getCollectionOrNull(collection);\n    Collection<Slice> shards = docCollection == null? null : docCollection.getActiveSlices();\n\n    ExecutorService parallelExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"parallelCdcrExecutor\"));\n\n    long checkpoint = Long.MAX_VALUE;\n    try {\n      List<Callable<Long>> callables = new ArrayList<>();\n      for (Slice shard : shards) {\n        ZkNodeProps leaderProps = zkController.getZkStateReader().getLeaderRetry(collection, shard.getName());\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n        callables.add(new SliceCheckpointCallable(nodeProps.getCoreUrl(), path));\n      }\n\n      for (final Future<Long> future : parallelExecutor.invokeAll(callables)) {\n        long version = future.get();\n        if (version < checkpoint) { // we must take the lowest checkpoint from all the shards\n          checkpoint = version;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } catch (ExecutionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error while requesting shard's checkpoints\", e);\n    } finally {\n      parallelExecutor.shutdown();\n    }\n\n    rsp.add(CdcrParams.CHECKPOINT, checkpoint);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"344b0840364d990b29b97467bfcc766ff8325d11":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","344b0840364d990b29b97467bfcc766ff8325d11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["344b0840364d990b29b97467bfcc766ff8325d11"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}