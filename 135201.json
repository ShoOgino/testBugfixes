{"path":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"src/demo/org/apache/lucene/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  public static void indexDocs(IndexWriter writer, File file)\n       throws Exception {\n    if (file.isDirectory()) {\n      String[] files = file.list();\n      for (int i = 0; i < files.length; i++)\n\tindexDocs(writer, new File(file, files[i]));\n    } else {\n      System.out.println(\"adding \" + file);\n      writer.addDocument(FileDocument.Document(file));\n    }\n  }\n\n","sourceOld":"  public static void indexDocs(IndexWriter writer, File file)\n       throws Exception {\n    if (file.isDirectory()) {\n      String[] files = file.list();\n      for (int i = 0; i < files.length; i++)\n\tindexDocs(writer, new File(file, files[i]));\n    } else {\n      System.out.println(\"adding \" + file);\n      writer.addDocument(FileDocument.Document(file));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f69c8a96ae80e1a0dcec4ca1702fe3c53c293474","date":1075379110,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  public static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n          ;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void indexDocs(IndexWriter writer, File file)\n       throws Exception {\n    if (file.isDirectory()) {\n      String[] files = file.list();\n      for (int i = 0; i < files.length; i++)\n\tindexDocs(writer, new File(file, files[i]));\n    } else {\n      System.out.println(\"adding \" + file);\n      writer.addDocument(FileDocument.Document(file));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a862b582eb65bb20bb71a7b3890193c3bc02ad99","date":1141070662,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n          ;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n          ;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n          ;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f69c8a96ae80e1a0dcec4ca1702fe3c53c293474":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["f69c8a96ae80e1a0dcec4ca1702fe3c53c293474"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"f69c8a96ae80e1a0dcec4ca1702fe3c53c293474":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["f69c8a96ae80e1a0dcec4ca1702fe3c53c293474"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}