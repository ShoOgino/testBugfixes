{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField + \"_dv\", Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField + \"_dv\", Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4739c84c362b9673ab5ed3e038ff760c718c30c8","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,FirstPassGroupingCollector[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private FirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, FirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,FirstPassGroupingCollector[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","sourceNew":"  private FirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, FirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["97d4692d0c601ff773f0a2231967312428a904e4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0837ab0472feecb3a54260729d845f839e1cbd72"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["854f97cd3613b9579fba83755c80b697e2f3993f"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["97d4692d0c601ff773f0a2231967312428a904e4","20e94e61fe5291647346b70437617e6b6c370408"],"854f97cd3613b9579fba83755c80b697e2f3993f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","854f97cd3613b9579fba83755c80b697e2f3993f"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"854f97cd3613b9579fba83755c80b697e2f3993f":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}