{"path":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","commits":[{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":1,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(String,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(String backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.createURI(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Preconditions.checkNotNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ad92550399520cc0148c3ee5ca087706f12da4","date":1478270512,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is to be returned.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is to be returned.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#readCollectionState(URI,String,String).mjava","sourceNew":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is to be returned.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.createFromJson(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method reads the meta-data information for the backed-up collection.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is to be returned.\n   * @return the meta-data information for the backed-up collection.\n   * @throws IOException in case of errors.\n   */\n  public DocCollection readCollectionState(URI backupLoc, String backupId, String collectionName) throws IOException {\n    Objects.requireNonNull(collectionName);\n\n    URI zkStateDir = repository.resolve(backupLoc, backupId, ZK_STATE_DIR);\n    try (IndexInput is = repository.openInput(zkStateDir, COLLECTION_PROPS_FILE, IOContext.DEFAULT)) {\n      byte[] arr = new byte[(int) is.length()]; // probably ok since the json file should be small.\n      is.readBytes(arr, 0, (int) is.length());\n      ClusterState c_state = ClusterState.load(-1, arr, Collections.emptySet());\n      return c_state.getCollection(collectionName);\n    }\n  }\n\n","bugFix":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3193c66df8e8324d4bce9f66df967af9e8c602"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["b2ad92550399520cc0148c3ee5ca087706f12da4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["320888923ec13b91f53082558f01f4c9960dd226","b2ad92550399520cc0148c3ee5ca087706f12da4"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["b2ad92550399520cc0148c3ee5ca087706f12da4","320888923ec13b91f53082558f01f4c9960dd226"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"320888923ec13b91f53082558f01f4c9960dd226":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","bc8f206328a706450934717bec7ccc22ad166fc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}