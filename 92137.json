{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  // inherit javadoc\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return reader.docFreq(term);\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return reader.docFreq(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subReaders.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return reader.docFreq(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subReaders.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return reader.docFreq(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subSearchers.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subReaders.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subSearchers.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  @Override\n  public int docFreq(Term term) throws IOException {\n    return reader.docFreq(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < leafContexts.length; i++) {\n        final IndexReader leaf = leafContexts[i].reader;\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(leaf.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subSearchers.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < leafContexts.length; i++) {\n        final IndexReader leaf = leafContexts[i].reader;\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(leaf.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subReaders.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < leafContexts.length; i++) {\n        final IndexReader leaf = leafContexts[i].reader;\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(leaf.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","sourceOld":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < subSearchers.length; i++) {\n        final IndexSearcher searchable = subSearchers[i];\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(searchable.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#docFreq(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns total docFreq for this term. */\n  public int docFreq(final Term term) throws IOException {\n    if (executor == null) {\n      return reader.docFreq(term);\n    } else {\n      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);\n      for(int i = 0; i < leafContexts.length; i++) {\n        final IndexReader leaf = leafContexts[i].reader;\n        runner.submit(new Callable<Integer>() {\n            public Integer call() throws IOException {\n              return Integer.valueOf(leaf.docFreq(term));\n            }\n          });\n      }\n      int docFreq = 0;\n      for (Integer num : runner) {\n        docFreq += num.intValue();\n      }\n      return docFreq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","30da203d7de68a87a16025523a483a96c24f4291"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30da203d7de68a87a16025523a483a96c24f4291":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["30da203d7de68a87a16025523a483a96c24f4291"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30da203d7de68a87a16025523a483a96c24f4291":["29ef99d61cda9641b6250bf9567329a6e65f901d","f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}