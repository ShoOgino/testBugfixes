{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","commits":[{"id":"355e2dd55d9b49981e73c768a54a747cd9368043","date":1491217809,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = false;\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40036548b3665dfcf4d03aaf89048c52bed8202d","date":1491220876,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = false;\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9","date":1491296430,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = false;\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e18edf2fddf9b92ee8a51545fdaee23f3b527f73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e18edf2fddf9b92ee8a51545fdaee23f3b527f73","date":1491296430,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = false;\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","bugFix":["0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#implTestOriginalScoreResponseDocsCheck(String,String,String,String).mjava","sourceNew":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    @SuppressWarnings({\"unchecked\"})\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    @SuppressWarnings({\"unchecked\"})\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n\n    @SuppressWarnings({\"unchecked\"})\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    @SuppressWarnings({\"unchecked\"})\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    @SuppressWarnings({\"unchecked\"})\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","sourceOld":"  public static void implTestOriginalScoreResponseDocsCheck(String modelName,\n      String origScoreFeatureName,\n      String nonScoringFeatureName, String nonScoringFeatureValue) throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    final int doc0Id = 1;\n    final int doc1Id = 8;\n    final int doc2Id = 6;\n    final int doc3Id = 7;\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString (res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    final boolean debugQuery = random().nextBoolean();\n    if (debugQuery) {\n      query.add(CommonParams.DEBUG_QUERY, \"true\");\n    }\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rq\", \"{!ltr model=\"+modelName+\" reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='\"+doc0Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='\"+doc1Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='\"+doc2Id+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='\"+doc3Id+\"'\");\n\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 0, doc0Id, origScoreFeatureName, doc0Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 1, doc1Id, origScoreFeatureName, doc1Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 2, doc2Id, origScoreFeatureName, doc2Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n    implTestOriginalScoreResponseDocsCheck(modelName, query, 3, doc3Id, origScoreFeatureName, doc3Score,\n        nonScoringFeatureName, nonScoringFeatureValue, debugQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"355e2dd55d9b49981e73c768a54a747cd9368043":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["40036548b3665dfcf4d03aaf89048c52bed8202d"],"e18edf2fddf9b92ee8a51545fdaee23f3b527f73":["0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"40036548b3665dfcf4d03aaf89048c52bed8202d":["355e2dd55d9b49981e73c768a54a747cd9368043"],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"355e2dd55d9b49981e73c768a54a747cd9368043":["40036548b3665dfcf4d03aaf89048c52bed8202d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["355e2dd55d9b49981e73c768a54a747cd9368043","0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"e18edf2fddf9b92ee8a51545fdaee23f3b527f73":[],"40036548b3665dfcf4d03aaf89048c52bed8202d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":["e18edf2fddf9b92ee8a51545fdaee23f3b527f73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e18edf2fddf9b92ee8a51545fdaee23f3b527f73","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}