{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#remove(Collection[String]).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#remove(Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#remove(Collection[String]).mjava","sourceNew":"  public void remove(Collection<String> paths) throws Exception {\n    if (paths.isEmpty()) return;\n    List<Op> ops = new ArrayList<>();\n    for (String path : paths) {\n      ops.add(Op.delete(dir + \"/\" + path, -1));\n    }\n    for (int from = 0; from < ops.size(); from += 1000) {\n      int to = Math.min(from + 1000, ops.size());\n      if (from < to) {\n        try {\n          stateManager.multi(ops.subList(from, to));\n        } catch (NoSuchElementException e) {\n          // don't know which nodes are not exist, so try to delete one by one node\n          for (int j = from; j < to; j++) {\n            try {\n              stateManager.removeData(ops.get(j).getPath(), -1);\n            } catch (NoSuchElementException e2) {\n              log.debug(\"Can not remove node which is not exist : \" + ops.get(j).getPath());\n            }\n          }\n        }\n      }\n    }\n\n    int cacheSizeBefore = knownChildren.size();\n    knownChildren.removeAll(paths);\n    if (cacheSizeBefore - paths.size() == knownChildren.size() && knownChildren.size() != 0) {\n      stats.setQueueLength(knownChildren.size());\n    } else {\n      // There are elements get deleted but not present in the cache,\n      // the cache seems not valid anymore\n      knownChildren.clear();\n      isDirty = true;\n    }\n  }\n\n","sourceOld":"  public void remove(Collection<String> paths) throws Exception {\n    if (paths.isEmpty()) return;\n    List<Op> ops = new ArrayList<>();\n    for (String path : paths) {\n      ops.add(Op.delete(dir + \"/\" + path, -1));\n    }\n    for (int from = 0; from < ops.size(); from += 1000) {\n      int to = Math.min(from + 1000, ops.size());\n      if (from < to) {\n        try {\n          stateManager.multi(ops.subList(from, to));\n        } catch (NoSuchElementException e) {\n          // don't know which nodes are not exist, so try to delete one by one node\n          for (int j = from; j < to; j++) {\n            try {\n              stateManager.removeData(ops.get(j).getPath(), -1);\n            } catch (NoSuchElementException e2) {\n              log.debug(\"Can not remove node which is not exist : \" + ops.get(j).getPath());\n            }\n          }\n        }\n      }\n    }\n\n    int cacheSizeBefore = knownChildren.size();\n    knownChildren.removeAll(paths);\n    if (cacheSizeBefore - paths.size() == knownChildren.size() && knownChildren.size() != 0) {\n      stats.setQueueLength(knownChildren.size());\n    } else {\n      // There are elements get deleted but not present in the cache,\n      // the cache seems not valid anymore\n      knownChildren.clear();\n      isDirty = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#remove(Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#remove(Collection[String]).mjava","sourceNew":"  public void remove(Collection<String> paths) throws Exception {\n    if (paths.isEmpty()) return;\n    List<Op> ops = new ArrayList<>();\n    for (String path : paths) {\n      ops.add(Op.delete(dir + \"/\" + path, -1));\n    }\n    for (int from = 0; from < ops.size(); from += 1000) {\n      int to = Math.min(from + 1000, ops.size());\n      if (from < to) {\n        try {\n          stateManager.multi(ops.subList(from, to));\n        } catch (NoSuchElementException e) {\n          // don't know which nodes are not exist, so try to delete one by one node\n          for (int j = from; j < to; j++) {\n            try {\n              stateManager.removeData(ops.get(j).getPath(), -1);\n            } catch (NoSuchElementException e2) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Can not remove node which is not exist : {}\", ops.get(j).getPath());\n              }\n            }\n          }\n        }\n      }\n    }\n\n    int cacheSizeBefore = knownChildren.size();\n    knownChildren.removeAll(paths);\n    if (cacheSizeBefore - paths.size() == knownChildren.size() && knownChildren.size() != 0) {\n      stats.setQueueLength(knownChildren.size());\n    } else {\n      // There are elements get deleted but not present in the cache,\n      // the cache seems not valid anymore\n      knownChildren.clear();\n      isDirty = true;\n    }\n  }\n\n","sourceOld":"  public void remove(Collection<String> paths) throws Exception {\n    if (paths.isEmpty()) return;\n    List<Op> ops = new ArrayList<>();\n    for (String path : paths) {\n      ops.add(Op.delete(dir + \"/\" + path, -1));\n    }\n    for (int from = 0; from < ops.size(); from += 1000) {\n      int to = Math.min(from + 1000, ops.size());\n      if (from < to) {\n        try {\n          stateManager.multi(ops.subList(from, to));\n        } catch (NoSuchElementException e) {\n          // don't know which nodes are not exist, so try to delete one by one node\n          for (int j = from; j < to; j++) {\n            try {\n              stateManager.removeData(ops.get(j).getPath(), -1);\n            } catch (NoSuchElementException e2) {\n              log.debug(\"Can not remove node which is not exist : \" + ops.get(j).getPath());\n            }\n          }\n        }\n      }\n    }\n\n    int cacheSizeBefore = knownChildren.size();\n    knownChildren.removeAll(paths);\n    if (cacheSizeBefore - paths.size() == knownChildren.size() && knownChildren.size() != 0) {\n      stats.setQueueLength(knownChildren.size());\n    } else {\n      // There are elements get deleted but not present in the cache,\n      // the cache seems not valid anymore\n      knownChildren.clear();\n      isDirty = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#remove(Collection[String]).mjava","sourceNew":null,"sourceOld":"  public void remove(Collection<String> paths) throws Exception {\n    if (paths.isEmpty()) return;\n    List<Op> ops = new ArrayList<>();\n    for (String path : paths) {\n      ops.add(Op.delete(dir + \"/\" + path, -1));\n    }\n    for (int from = 0; from < ops.size(); from += 1000) {\n      int to = Math.min(from + 1000, ops.size());\n      if (from < to) {\n        try {\n          stateManager.multi(ops.subList(from, to));\n        } catch (NoSuchElementException e) {\n          // don't know which nodes are not exist, so try to delete one by one node\n          for (int j = from; j < to; j++) {\n            try {\n              stateManager.removeData(ops.get(j).getPath(), -1);\n            } catch (NoSuchElementException e2) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Can not remove node which is not exist : {}\", ops.get(j).getPath());\n              }\n            }\n          }\n        }\n      }\n    }\n\n    int cacheSizeBefore = knownChildren.size();\n    knownChildren.removeAll(paths);\n    if (cacheSizeBefore - paths.size() == knownChildren.size() && knownChildren.size() != 0) {\n      stats.setQueueLength(knownChildren.size());\n    } else {\n      // There are elements get deleted but not present in the cache,\n      // the cache seems not valid anymore\n      knownChildren.clear();\n      isDirty = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}