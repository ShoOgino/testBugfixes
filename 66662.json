{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#updateExistingThenNonExistentDoc().mjava","commits":[{"id":"b4eb66898bd78f7d0afde22c21607ac3650e6bd0","date":1517936429,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#updateExistingThenNonExistentDoc().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test scenario:\n   * <ul>\n   *   <li>Send a batch of documents to one node</li>\n   *   <li>Batch consist of an update for document which is existed and an update for documents which is not existed </li>\n   *   <li>Assumption which is made is that both updates will be applied: field for existed document will be updated,\n   *   new document will be created for a non existed one</li>\n   * </ul>\n   *\n   */\n  private void updateExistingThenNonExistentDoc() throws Exception {\n    clearIndex();\n    index(\"id\", 1, \"inplace_updatable_float\", \"1\", \"title_s\", \"newtitle\");\n    commit();\n    SolrInputDocument existingDocUpdate = new SolrInputDocument();\n    existingDocUpdate.setField(\"id\", 1);\n    existingDocUpdate.setField(\"inplace_updatable_float\", map(\"set\", \"50\"));\n\n    SolrInputDocument nonexistentDocUpdate = new SolrInputDocument();\n    nonexistentDocUpdate.setField(\"id\", 2);\n    nonexistentDocUpdate.setField(\"inplace_updatable_float\", map(\"set\", \"50\"));\n    \n    SolrInputDocument docs[] = new SolrInputDocument[] {existingDocUpdate, nonexistentDocUpdate};\n\n    SolrClient solrClient = clients.get(random().nextInt(clients.size()));\n    add(solrClient, null, docs);\n    commit();\n    for (SolrClient client: new SolrClient[] {LEADER, NONLEADERS.get(0), NONLEADERS.get(1)}) {\n      for (SolrInputDocument expectDoc : docs) {\n        String docId = expectDoc.getFieldValue(\"id\").toString();\n        SolrDocument actualDoc = client.getById(docId);\n        assertNotNull(\"expected to get doc by id:\" + docId, actualDoc);\n        assertEquals(\"expected to update \"+actualDoc, \n            50.0f, actualDoc.get(\"inplace_updatable_float\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4eb66898bd78f7d0afde22c21607ac3650e6bd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4eb66898bd78f7d0afde22c21607ac3650e6bd0"]},"commit2Childs":{"b4eb66898bd78f7d0afde22c21607ac3650e6bd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4eb66898bd78f7d0afde22c21607ac3650e6bd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}