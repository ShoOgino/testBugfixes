{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    TVTerms(int numTerms, int flags, int[] prefixLengths, int[] suffixLengths, int[] termFreqs,\n        int[] positionIndex, int[] positions, int[] startOffsets, int[] lengths,\n        int[] payloadIndex, BytesRef payloadBytes,\n        BytesRef termBytes) {\n      this.numTerms = numTerms;\n      this.flags = flags;\n      this.prefixLengths = prefixLengths;\n      this.suffixLengths = suffixLengths;\n      this.termFreqs = termFreqs;\n      this.positionIndex = positionIndex;\n      this.positions = positions;\n      this.startOffsets = startOffsets;\n      this.lengths = lengths;\n      this.payloadIndex = payloadIndex;\n      this.payloadBytes = payloadBytes;\n      this.termBytes = termBytes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    TVTerms(int numTerms, int flags, int[] prefixLengths, int[] suffixLengths, int[] termFreqs,\n        int[] positionIndex, int[] positions, int[] startOffsets, int[] lengths,\n        int[] payloadIndex, BytesRef payloadBytes,\n        BytesRef termBytes) {\n      this.numTerms = numTerms;\n      this.flags = flags;\n      this.prefixLengths = prefixLengths;\n      this.suffixLengths = suffixLengths;\n      this.termFreqs = termFreqs;\n      this.positionIndex = positionIndex;\n      this.positions = positions;\n      this.startOffsets = startOffsets;\n      this.lengths = lengths;\n      this.payloadIndex = payloadIndex;\n      this.payloadBytes = payloadBytes;\n      this.termBytes = termBytes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","sourceNew":"    TVTerms(int numTerms, int flags, int[] prefixLengths, int[] suffixLengths, int[] termFreqs,\n        int[] positionIndex, int[] positions, int[] startOffsets, int[] lengths,\n        int[] payloadIndex, BytesRef payloadBytes,\n        BytesRef termBytes) {\n      this.numTerms = numTerms;\n      this.flags = flags;\n      this.prefixLengths = prefixLengths;\n      this.suffixLengths = suffixLengths;\n      this.termFreqs = termFreqs;\n      this.positionIndex = positionIndex;\n      this.positions = positions;\n      this.startOffsets = startOffsets;\n      this.lengths = lengths;\n      this.payloadIndex = payloadIndex;\n      this.payloadBytes = payloadBytes;\n      this.termBytes = termBytes;\n      long ttf = 0;\n      for (int tf : termFreqs) {\n        ttf += tf;\n      }\n      this.totalTermFreq = ttf;\n    }\n\n","sourceOld":"    TVTerms(int numTerms, int flags, int[] prefixLengths, int[] suffixLengths, int[] termFreqs,\n        int[] positionIndex, int[] positions, int[] startOffsets, int[] lengths,\n        int[] payloadIndex, BytesRef payloadBytes,\n        BytesRef termBytes) {\n      this.numTerms = numTerms;\n      this.flags = flags;\n      this.prefixLengths = prefixLengths;\n      this.suffixLengths = suffixLengths;\n      this.termFreqs = termFreqs;\n      this.positionIndex = positionIndex;\n      this.positions = positions;\n      this.startOffsets = startOffsets;\n      this.lengths = lengths;\n      this.payloadIndex = payloadIndex;\n      this.payloadBytes = payloadBytes;\n      this.termBytes = termBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTerms#TVTerms(int,int,int[],int[],int[],int[],int[],int[],int[],int[],BytesRef,BytesRef).mjava","sourceNew":"    TVTerms(int numTerms, int flags, int[] prefixLengths, int[] suffixLengths, int[] termFreqs,\n        int[] positionIndex, int[] positions, int[] startOffsets, int[] lengths,\n        int[] payloadIndex, BytesRef payloadBytes,\n        BytesRef termBytes) {\n      this.numTerms = numTerms;\n      this.flags = flags;\n      this.prefixLengths = prefixLengths;\n      this.suffixLengths = suffixLengths;\n      this.termFreqs = termFreqs;\n      this.positionIndex = positionIndex;\n      this.positions = positions;\n      this.startOffsets = startOffsets;\n      this.lengths = lengths;\n      this.payloadIndex = payloadIndex;\n      this.payloadBytes = payloadBytes;\n      this.termBytes = termBytes;\n      long ttf = 0;\n      for (int tf : termFreqs) {\n        ttf += tf;\n      }\n      this.totalTermFreq = ttf;\n    }\n\n","sourceOld":"    TVTerms(int numTerms, int flags, int[] prefixLengths, int[] suffixLengths, int[] termFreqs,\n        int[] positionIndex, int[] positions, int[] startOffsets, int[] lengths,\n        int[] payloadIndex, BytesRef payloadBytes,\n        BytesRef termBytes) {\n      this.numTerms = numTerms;\n      this.flags = flags;\n      this.prefixLengths = prefixLengths;\n      this.suffixLengths = suffixLengths;\n      this.termFreqs = termFreqs;\n      this.positionIndex = positionIndex;\n      this.positions = positions;\n      this.startOffsets = startOffsets;\n      this.lengths = lengths;\n      this.payloadIndex = payloadIndex;\n      this.payloadBytes = payloadBytes;\n      this.termBytes = termBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["eda61b1e90b490cc5837200e04c02639a0d272c7","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc","07155cdd910937cdf6877e48884d5782845c8b8b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}