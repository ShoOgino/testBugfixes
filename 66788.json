{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testRandomLUCENE8157().mjava","commits":[{"id":"4dcc28ece27acc5c2d8e62029faa7e30e3a1e1e8","date":1518267216,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testRandomLUCENE8157().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Repeat(iterations = 10)\n  public void testRandomLUCENE8157() {\n    final PlanetModel planetModel = randomPlanetModel();\n    final GeoPoint startPoint = randomGeoPoint(planetModel);\n    double d = random().nextDouble();\n    final double distanceSmall = d * 1e-9  + Vector.MINIMUM_ANGULAR_RESOLUTION;\n    final double distanceBig = d * 1e-7 + Vector.MINIMUM_ANGULAR_RESOLUTION ;\n    final double bearing = random().nextDouble() *  Math.PI;\n    GeoPoint point1 = planetModel.surfacePointOnBearing(startPoint, distanceSmall, bearing*1.001);\n    GeoPoint point2 = planetModel.surfacePointOnBearing(startPoint, distanceBig, bearing);\n    GeoPoint point3 = planetModel.surfacePointOnBearing(startPoint, distanceBig, bearing - 0.5 * Math.PI);\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(startPoint);\n    points.add(point1);\n    points.add(point2);\n    points.add(point3);\n    try {\n      GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, points);\n      assertTrue(polygon != null);\n    }\n    catch(Exception e) {\n      fail(points.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testRandomLUCENE8157().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testRandomLUCENE8157().mjava","sourceNew":"  @Test\n  public void testRandomLUCENE8157() {\n    final PlanetModel planetModel = randomPlanetModel();\n    final GeoPoint startPoint = randomGeoPoint(planetModel);\n    double d = random().nextDouble();\n    final double distanceSmall = d * 1e-9  + Vector.MINIMUM_ANGULAR_RESOLUTION;\n    final double distanceBig = d * 1e-7 + Vector.MINIMUM_ANGULAR_RESOLUTION ;\n    final double bearing = random().nextDouble() *  Math.PI;\n    GeoPoint point1 = planetModel.surfacePointOnBearing(startPoint, distanceSmall, bearing*1.001);\n    GeoPoint point2 = planetModel.surfacePointOnBearing(startPoint, distanceBig, bearing);\n    GeoPoint point3 = planetModel.surfacePointOnBearing(startPoint, distanceBig, bearing - 0.5 * Math.PI);\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(startPoint);\n    points.add(point1);\n    points.add(point2);\n    points.add(point3);\n    try {\n      GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, points);\n      assertTrue(polygon != null);\n    }\n    catch(Exception e) {\n      fail(points.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 10)\n  public void testRandomLUCENE8157() {\n    final PlanetModel planetModel = randomPlanetModel();\n    final GeoPoint startPoint = randomGeoPoint(planetModel);\n    double d = random().nextDouble();\n    final double distanceSmall = d * 1e-9  + Vector.MINIMUM_ANGULAR_RESOLUTION;\n    final double distanceBig = d * 1e-7 + Vector.MINIMUM_ANGULAR_RESOLUTION ;\n    final double bearing = random().nextDouble() *  Math.PI;\n    GeoPoint point1 = planetModel.surfacePointOnBearing(startPoint, distanceSmall, bearing*1.001);\n    GeoPoint point2 = planetModel.surfacePointOnBearing(startPoint, distanceBig, bearing);\n    GeoPoint point3 = planetModel.surfacePointOnBearing(startPoint, distanceBig, bearing - 0.5 * Math.PI);\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(startPoint);\n    points.add(point1);\n    points.add(point2);\n    points.add(point3);\n    try {\n      GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, points);\n      assertTrue(polygon != null);\n    }\n    catch(Exception e) {\n      fail(points.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["4dcc28ece27acc5c2d8e62029faa7e30e3a1e1e8"],"4dcc28ece27acc5c2d8e62029faa7e30e3a1e1e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4dcc28ece27acc5c2d8e62029faa7e30e3a1e1e8":["57c6c784f777a2cc8fa014507ea129526822714d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4dcc28ece27acc5c2d8e62029faa7e30e3a1e1e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}