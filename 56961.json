{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f8ba65dfb38d7382b9dce6751c3060db644202","date":1389780711,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        validateParentDoc();\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb9daa7dac719c9778dc331ca8febcfaa2dc9faa","date":1420215043,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentBits.get(childTarget)) {\n        throw new IllegalStateException(ILLEGAL_ADVANCE_ON_PARENT + childTarget);\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        validateParentDoc();\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      assert childTarget >= parentBits.length() || !parentBits.get(childTarget);\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        validateParentDoc();\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"bugIntro":["1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1406cbbd53036d2d3c80ccaef932a04212ab9ecd","date":1434741435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      if (childTarget >= parentDoc) {\n        if (childTarget == NO_MORE_DOCS) {\n          return childDoc = parentDoc = NO_MORE_DOCS;\n        }\n        parentDoc = parentScorer.advance(childTarget + 1);\n        validateParentDoc();\n\n        if (parentDoc == NO_MORE_DOCS) {\n          return childDoc = NO_MORE_DOCS;\n        }\n\n        // scan to the first parent that has children\n        while (true) {\n          final int firstChild = parentBits.prevSetBit(parentDoc-1) + 1;\n          if (firstChild != parentDoc) {\n            // this parent has children\n            childTarget = Math.max(childTarget, firstChild);\n            break;\n          }\n          // parent with no children, move to the next one\n          parentDoc = parentScorer.nextDoc();\n          validateParentDoc();\n          if (parentDoc == NO_MORE_DOCS) {\n            return childDoc = NO_MORE_DOCS;\n          }\n        }\n\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n      }\n\n      assert childTarget < parentDoc;\n      assert !parentBits.get(childTarget);\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      \n      //System.out.println(\"Q.advance childTarget=\" + childTarget);\n      if (childTarget == NO_MORE_DOCS) {\n        //System.out.println(\"  END\");\n        return childDoc = parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentBits.get(childTarget)) {\n        throw new IllegalStateException(ILLEGAL_ADVANCE_ON_PARENT + childTarget);\n      }\n\n      assert childDoc == -1 || childTarget != parentDoc: \"childTarget=\" + childTarget;\n      if (childDoc == -1 || childTarget > parentDoc) {\n        // Advance to new parent:\n        parentDoc = parentScorer.advance(childTarget);\n        validateParentDoc();\n        //System.out.println(\"  advance to parentDoc=\" + parentDoc);\n        assert parentDoc > childTarget;\n        if (parentDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  END\");\n          return childDoc = NO_MORE_DOCS;\n        }\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n        final int firstChild = parentBits.prevSetBit(parentDoc-1);\n        //System.out.println(\"  firstChild=\" + firstChild);\n        childTarget = Math.max(childTarget, firstChild);\n      }\n\n      assert childTarget < parentDoc;\n\n      // Advance within children of current parent:\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":["6bd4a7478aca8c3880512b730b28bf3239340635","fb9daa7dac719c9778dc331ca8febcfaa2dc9faa","f918f6e4bff7afea488f1928f7a7ec05338d479f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int childTarget) throws IOException {\n      if (childTarget >= parentDoc) {\n        if (childTarget == NO_MORE_DOCS) {\n          return childDoc = parentDoc = NO_MORE_DOCS;\n        }\n        parentDoc = parentScorer.advance(childTarget + 1);\n        validateParentDoc();\n\n        if (parentDoc == NO_MORE_DOCS) {\n          return childDoc = NO_MORE_DOCS;\n        }\n\n        // scan to the first parent that has children\n        while (true) {\n          final int firstChild = parentBits.prevSetBit(parentDoc-1) + 1;\n          if (firstChild != parentDoc) {\n            // this parent has children\n            childTarget = Math.max(childTarget, firstChild);\n            break;\n          }\n          // parent with no children, move to the next one\n          parentDoc = parentScorer.nextDoc();\n          validateParentDoc();\n          if (parentDoc == NO_MORE_DOCS) {\n            return childDoc = NO_MORE_DOCS;\n          }\n        }\n\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n      }\n\n      assert childTarget < parentDoc;\n      assert !parentBits.get(childTarget);\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      return childDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      if (childTarget >= parentDoc) {\n        if (childTarget == NO_MORE_DOCS) {\n          return childDoc = parentDoc = NO_MORE_DOCS;\n        }\n        parentDoc = parentScorer.advance(childTarget + 1);\n        validateParentDoc();\n\n        if (parentDoc == NO_MORE_DOCS) {\n          return childDoc = NO_MORE_DOCS;\n        }\n\n        // scan to the first parent that has children\n        while (true) {\n          final int firstChild = parentBits.prevSetBit(parentDoc-1) + 1;\n          if (firstChild != parentDoc) {\n            // this parent has children\n            childTarget = Math.max(childTarget, firstChild);\n            break;\n          }\n          // parent with no children, move to the next one\n          parentDoc = parentScorer.nextDoc();\n          validateParentDoc();\n          if (parentDoc == NO_MORE_DOCS) {\n            return childDoc = NO_MORE_DOCS;\n          }\n        }\n\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n      }\n\n      assert childTarget < parentDoc;\n      assert !parentBits.get(childTarget);\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      if (acceptDocs != null && !acceptDocs.get(childDoc)) {\n        nextDoc();\n      }\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinScorer#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int childTarget) throws IOException {\n      if (childTarget >= parentDoc) {\n        if (childTarget == NO_MORE_DOCS) {\n          return childDoc = parentDoc = NO_MORE_DOCS;\n        }\n        parentDoc = parentScorer.advance(childTarget + 1);\n        validateParentDoc();\n\n        if (parentDoc == NO_MORE_DOCS) {\n          return childDoc = NO_MORE_DOCS;\n        }\n\n        // scan to the first parent that has children\n        while (true) {\n          final int firstChild = parentBits.prevSetBit(parentDoc-1) + 1;\n          if (firstChild != parentDoc) {\n            // this parent has children\n            childTarget = Math.max(childTarget, firstChild);\n            break;\n          }\n          // parent with no children, move to the next one\n          parentDoc = parentScorer.nextDoc();\n          validateParentDoc();\n          if (parentDoc == NO_MORE_DOCS) {\n            return childDoc = NO_MORE_DOCS;\n          }\n        }\n\n        if (doScores) {\n          parentScore = parentScorer.score();\n          parentFreq = parentScorer.freq();\n        }\n      }\n\n      assert childTarget < parentDoc;\n      assert !parentBits.get(childTarget);\n      childDoc = childTarget;\n      //System.out.println(\"  \" + childDoc);\n      return childDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"fb9daa7dac719c9778dc331ca8febcfaa2dc9faa":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"1406cbbd53036d2d3c80ccaef932a04212ab9ecd":["fb9daa7dac719c9778dc331ca8febcfaa2dc9faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"fb9daa7dac719c9778dc331ca8febcfaa2dc9faa":["1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","d0f8ba65dfb38d7382b9dce6751c3060db644202"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["fb9daa7dac719c9778dc331ca8febcfaa2dc9faa"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1406cbbd53036d2d3c80ccaef932a04212ab9ecd":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}