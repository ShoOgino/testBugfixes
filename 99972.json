{"path":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","commits":[{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (max != null) {\n      if (max.compareTo(this.max) > 0)\n        this.max = max;\n    }\n    if (this.min == null)\n      this.min = min;\n    else if (this.min.compareTo(min) > 0)\n      this.min = min;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (max != null) {\n      if (max.compareTo(this.max) > 0)\n        this.max = max;\n    }\n    if (this.min == null)\n      this.min = min;\n    else if (this.min.compareTo(min) > 0)\n      this.min = min;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (max != null) {\n      if (max.compareTo(this.max) > 0)\n        this.max = max;\n    }\n    if (this.min == null)\n      this.min = min;\n    else if (this.min.compareTo(min) > 0)\n      this.min = min;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","sourceNew":"  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","sourceNew":"  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/EnumStatsValues[StatsValuesFactory]#updateMinMax(EnumFieldValue,EnumFieldValue).mjava","sourceNew":null,"sourceOld":"  protected void updateMinMax(EnumFieldValue min, EnumFieldValue max) {\n    if (computeMin) { // nested if to encourage JIT to optimize aware final var?\n      if (null != min) {\n        if (null == this.min || (min.compareTo(this.min) < 0)) {\n          this.min = min;\n        }\n      }\n    }\n    if (computeMax) { // nested if to encourage JIT to optimize aware final var?\n      if (null != max) {\n        if (null == this.max || (max.compareTo(this.max) > 0)) {\n          this.max = max;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d12bbc45d641864ffe03291bc30f178eb34e434c","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["b94236357aaa22b76c10629851fe4e376e0cea82","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}