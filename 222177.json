{"path":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","commits":[{"id":"07cbaf0735458446c429df54ba816915e8a1f638","date":1476738812,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df04182c748b21c01810ed664fa6bd10272f290d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df04182c748b21c01810ed664fa6bd10272f290d","date":1530385495,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    Integer start = null;\n    Integer rows = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      start = localParams.getInt(CommonParams.START);\n      rows = localParams.getInt(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || start != null || rows != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (start == null) {\n        start = params.getInt(CommonParams.START);\n      }\n      if (rows == null) {\n        rows = params.getInt(CommonParams.ROWS);\n      }\n    }\n\n    start = start != null ? start : CommonParams.START_DEFAULT;\n    rows = rows != null ? rows : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":["07cbaf0735458446c429df54ba816915e8a1f638"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    Integer start = null;\n    Integer rows = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      start = localParams.getInt(CommonParams.START);\n      rows = localParams.getInt(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || start != null || rows != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (start == null) {\n        start = params.getInt(CommonParams.START);\n      }\n      if (rows == null) {\n        rows = params.getInt(CommonParams.ROWS);\n      }\n    }\n\n    start = start != null ? start : CommonParams.START_DEFAULT;\n    rows = rows != null ? rows : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getSortSpec(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    Integer start = null;\n    Integer rows = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      start = localParams.getInt(CommonParams.START);\n      rows = localParams.getInt(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || start != null || rows != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (start == null) {\n        start = params.getInt(CommonParams.START);\n      }\n      if (rows == null) {\n        rows = params.getInt(CommonParams.ROWS);\n      }\n    }\n\n    start = start != null ? start : CommonParams.START_DEFAULT;\n    rows = rows != null ? rows : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSortSpec(boolean useGlobalParams) throws SyntaxError {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : CommonParams.START_DEFAULT;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : CommonParams.ROWS_DEFAULT;\n\n    SortSpec sort = SortSpecParsing.parseSortSpec(sortStr, req);\n\n    sort.setOffset(start);\n    sort.setCount(rows);\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["07cbaf0735458446c429df54ba816915e8a1f638","df04182c748b21c01810ed664fa6bd10272f290d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07cbaf0735458446c429df54ba816915e8a1f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07cbaf0735458446c429df54ba816915e8a1f638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df04182c748b21c01810ed664fa6bd10272f290d"],"df04182c748b21c01810ed664fa6bd10272f290d":["07cbaf0735458446c429df54ba816915e8a1f638"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["07cbaf0735458446c429df54ba816915e8a1f638","df04182c748b21c01810ed664fa6bd10272f290d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07cbaf0735458446c429df54ba816915e8a1f638","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"07cbaf0735458446c429df54ba816915e8a1f638":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","df04182c748b21c01810ed664fa6bd10272f290d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"df04182c748b21c01810ed664fa6bd10272f290d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}