{"path":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","commits":[{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    Random random = newRandom();\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory(random);\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    Random random = newRandom();\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory(random);\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3cefb552695b930cefe85eb7880cccdb914be6b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}