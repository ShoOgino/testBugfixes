{"path":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","commits":[{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"/dev/null","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n//    Thread.sleep(100);\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertEquals(RequestHandlers.MemClassLoader.class.getName(), map.get(\"classloader\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4af27a125c34742efbdda444634c211cf362d1e2","date":1419101033,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n//    Thread.sleep(100);\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n    assertEquals(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), BlobStoreTestRequestHandler.class.getName(), map.get(\"class\"));\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n//    Thread.sleep(100);\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertEquals(RequestHandlers.MemClassLoader.class.getName(), map.get(\"classloader\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3442f1c230c343b7142db6bc3ac2fb6cdb195a13","date":1419246349,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n//    Thread.sleep(100);\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n    assertEquals(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), BlobStoreTestRequestHandler.class.getName(), map.get(\"class\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':'2'}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        \"2\",10);\n\n    success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':'2'}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        \"2\",10);\n\n    success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrServer server = (HttpSolrServer) clients.get(random().nextInt(clients.size()));\n    String baseURL = server.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrServer(baseURL,server.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':'2'}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        \"2\",10);\n\n    success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfd9d23a1597f89fba9349a5b0879e4c8c9efcb","date":1420383026,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':'2'}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        \"2\",10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':'2'}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        \"2\",10);\n\n    success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27785308abb8944af28e85eeacd67a8db055dd76","date":1421424050,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':'2'}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        \"2\",10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    setupHarnesses();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["27785308abb8944af28e85eeacd67a8db055dd76"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3442f1c230c343b7142db6bc3ac2fb6cdb195a13":["4af27a125c34742efbdda444634c211cf362d1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27785308abb8944af28e85eeacd67a8db055dd76":["acfd9d23a1597f89fba9349a5b0879e4c8c9efcb"],"4af27a125c34742efbdda444634c211cf362d1e2":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"bafca15d8e408346a67f4282ad1143b88023893b":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["3442f1c230c343b7142db6bc3ac2fb6cdb195a13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"acfd9d23a1597f89fba9349a5b0879e4c8c9efcb":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["4af27a125c34742efbdda444634c211cf362d1e2"],"3442f1c230c343b7142db6bc3ac2fb6cdb195a13":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"27785308abb8944af28e85eeacd67a8db055dd76":["abb23fcc2461782ab204e61213240feb77d355aa"],"4af27a125c34742efbdda444634c211cf362d1e2":["3442f1c230c343b7142db6bc3ac2fb6cdb195a13"],"bafca15d8e408346a67f4282ad1143b88023893b":["acfd9d23a1597f89fba9349a5b0879e4c8c9efcb"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["bafca15d8e408346a67f4282ad1143b88023893b"],"acfd9d23a1597f89fba9349a5b0879e4c8c9efcb":["27785308abb8944af28e85eeacd67a8db055dd76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}