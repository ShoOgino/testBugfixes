{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","commits":[{"id":"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a","date":1329841033,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, 0);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, 0);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, 0);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, false);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, 0);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, 0);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = _TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, liveDocs, null, PostingsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      DocsEnum td = TestUtil.docs(random(), te, liveDocs, null, DocsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, liveDocs, null, PostingsEnum.NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, liveDocs, null, PostingsEnum.FLAG_NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator();\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, liveDocs, null, PostingsEnum.NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator(null);\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, liveDocs, null, PostingsEnum.NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,String...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#checkTerms(Terms,Bits,String...).mjava","sourceNew":"  private void checkTerms(Terms terms, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator();\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, null, PostingsEnum.NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","sourceOld":"  private void checkTerms(Terms terms, Bits liveDocs, String... termsList) throws IOException {\n    assertNotNull(terms);\n    final TermsEnum te = terms.iterator();\n    \n    for (String t : termsList) {\n      BytesRef b = te.next();\n      assertNotNull(b);\n      assertEquals(t, b.utf8ToString());\n      PostingsEnum td = TestUtil.docs(random(), te, liveDocs, null, PostingsEnum.NONE);\n      assertTrue(td.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, td.docID());\n      assertEquals(td.nextDoc(), DocIdSetIterator.NO_MORE_DOCS);\n    }\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02331260bb246364779cb6f04919ca47900d01bb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}