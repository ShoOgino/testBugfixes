{"path":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"/dev/null","sourceNew":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(Field.Text(\"field\", English.intToEnglish(i), true));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b710dd422ed2d90f021391b466efb3bbc3eb4423","date":1092422324,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(Field.Text(\"field\", English.intToEnglish(i), true));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(Field.Text(\"field\", English.intToEnglish(i), true));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.YES));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(Field.Text(\"field\", English.intToEnglish(i), true));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.YES));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer\n            = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.TOKENIZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {                  \n    super.setUp();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    //writer.setUseCompoundFile(true);\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      Field.TermVector termVector;\n      int mod3 = i % 3;\n      int mod2 = i % 2;\n      if (mod2 == 0 && mod3 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      }\n      else if (mod2 == 0){\n        termVector = Field.TermVector.WITH_POSITIONS;\n      }\n      else if (mod3 == 0){\n        termVector = Field.TermVector.WITH_OFFSETS;\n      }\n      else {\n        termVector = Field.TermVector.YES;\n      }\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n          Field.Store.YES, Field.Index.ANALYZED, termVector));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["773e104db917d6cc9acade5a8aeb91a886192b99"],"b710dd422ed2d90f021391b466efb3bbc3eb4423":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"773e104db917d6cc9acade5a8aeb91a886192b99":["b710dd422ed2d90f021391b466efb3bbc3eb4423"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"b710dd422ed2d90f021391b466efb3bbc3eb4423":["773e104db917d6cc9acade5a8aeb91a886192b99"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["b710dd422ed2d90f021391b466efb3bbc3eb4423"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"773e104db917d6cc9acade5a8aeb91a886192b99":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}