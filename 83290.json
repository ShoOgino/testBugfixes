{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs(), true);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs(), true);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\" + getQuery() + \" in \" + doc + \") [\"\n              + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc,\n              new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs(), true);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\" + getQuery() + \" in \" + doc + \") [\"\n              + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc,\n              new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs(), true);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\" + getQuery() + \" in \" + doc + \") [\"\n              + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc,\n              new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\" + getQuery() + \" in \" + doc + \") [\"\n              + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc,\n              new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Integer.MAX_VALUE);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Integer.MAX_VALUE);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), term.field(), true);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      TermScorer scorer = (TermScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Integer.MAX_VALUE);\n          Explanation freqExplanation = Explanation.match(freq, \"freq, occurrences of term within document\");\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b94236357aaa22b76c10629851fe4e376e0cea82":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["fb17639909a369c1e64866842e5c213440acc17e"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["fb17639909a369c1e64866842e5c213440acc17e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}