{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","commits":[{"id":"009caa80830ac6369c42e5f6515405d686eabfee","date":1494487120,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setListener(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setListener(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testListenerAcceptance().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run(); // starts tracking live nodes\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the new node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["c5fd294da67452cd8d116692194908de00eb5209"],"3f504512a03d978990cbff30db0522b354e846db":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"009caa80830ac6369c42e5f6515405d686eabfee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5fd294da67452cd8d116692194908de00eb5209":["009caa80830ac6369c42e5f6515405d686eabfee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"009caa80830ac6369c42e5f6515405d686eabfee":["c5fd294da67452cd8d116692194908de00eb5209"],"c5fd294da67452cd8d116692194908de00eb5209":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","009caa80830ac6369c42e5f6515405d686eabfee","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}