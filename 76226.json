{"path":"backwards/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Asserts that FieldCacheSanityChecker does not detect any \n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err \n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method, \n   * however IndexReaders scoped inside test methods may be garbage \n   * collected prior to this method being called, causing errors to \n   * be overlooked. Tests are encouraged to keep their IndexReaders \n   * scoped at the class level, or to explicitly call this method \n   * directly in the same scope as the IndexReader.\n   * </p>\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg+ \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\", \n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"backwards/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /** \n   * Asserts that FieldCacheSanityChecker does not detect any \n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err \n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method, \n   * however IndexReaders scoped inside test methods may be garbage \n   * collected prior to this method being called, causing errors to \n   * be overlooked. Tests are encouraged to keep their IndexReaders \n   * scoped at the class level, or to explicitly call this method \n   * directly in the same scope as the IndexReader.\n   * </p>\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg+ \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\", \n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /** \n   * Asserts that FieldCacheSanityChecker does not detect any \n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err \n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method, \n   * however IndexReaders scoped inside test methods may be garbage \n   * collected prior to this method being called, causing errors to \n   * be overlooked. Tests are encouraged to keep their IndexReaders \n   * scoped at the class level, or to explicitly call this method \n   * directly in the same scope as the IndexReader.\n   * </p>\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg+ \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\", \n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}