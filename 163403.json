{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final FilteredTermEnum enumerator = query.getEnum(reader);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            if (collector.collect(t, enumerator.difference())) {\n              count++;\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final FilteredTermEnum enumerator = query.getEnum(reader);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            if (collector.collect(t, enumerator.difference())) {\n              count++;\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n\n      if (query.hasNewAPI) {\n\n        if (query.field == null) {\n          throw new NullPointerException(\"If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.\");\n        }\n\n        final Fields fields = MultiFields.getFields(reader);\n        if (fields == null) {\n          // reader has no fields\n          return 0;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          return 0;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(reader);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          return 0;\n        final BoostAttribute boostAtt =\n          termsEnum.attributes().addAttribute(BoostAttribute.class);\n        collector.boostAtt = boostAtt;\n        int count = 0;\n        BytesRef term;\n        final Term placeholderTerm = new Term(query.field);\n        while ((term = termsEnum.next()) != null) {\n          if (collector.collect(placeholderTerm.createTerm(term.utf8ToString()), boostAtt.getBoost())) {\n            count++;\n          } else {\n            break;\n          }\n        }\n        collector.boostAtt = null;\n        return count;\n      } else {\n        // deprecated case\n        final FilteredTermEnum enumerator = query.getEnum(reader);\n        int count = 0;\n        try {\n          do {\n            Term t = enumerator.term();\n            if (t != null) {\n              if (collector.collect(t, enumerator.difference())) {\n                count++;\n              } else {\n                break;\n              }\n            }\n          } while (enumerator.next());    \n        } finally {\n          enumerator.close();\n        }\n        return count;\n      }\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final FilteredTermEnum enumerator = query.getEnum(reader);\n      int count = 0;\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            if (collector.collect(t, enumerator.difference())) {\n              count++;\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());    \n      } finally {\n        enumerator.close();\n      }\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n\n      if (query.field == null) {\n        throw new NullPointerException(\"If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.\");\n      }\n\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef term;\n      final Term placeholderTerm = new Term(query.field);\n      while ((term = termsEnum.next()) != null) {\n        if (collector.collect(placeholderTerm.createTerm(term.utf8ToString()), boostAtt.getBoost())) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n\n      if (query.hasNewAPI) {\n\n        if (query.field == null) {\n          throw new NullPointerException(\"If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.\");\n        }\n\n        final Fields fields = MultiFields.getFields(reader);\n        if (fields == null) {\n          // reader has no fields\n          return 0;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          return 0;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(reader);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          return 0;\n        final BoostAttribute boostAtt =\n          termsEnum.attributes().addAttribute(BoostAttribute.class);\n        collector.boostAtt = boostAtt;\n        int count = 0;\n        BytesRef term;\n        final Term placeholderTerm = new Term(query.field);\n        while ((term = termsEnum.next()) != null) {\n          if (collector.collect(placeholderTerm.createTerm(term.utf8ToString()), boostAtt.getBoost())) {\n            count++;\n          } else {\n            break;\n          }\n        }\n        collector.boostAtt = null;\n        return count;\n      } else {\n        // deprecated case\n        final FilteredTermEnum enumerator = query.getEnum(reader);\n        int count = 0;\n        try {\n          do {\n            Term t = enumerator.term();\n            if (t != null) {\n              if (collector.collect(t, enumerator.difference())) {\n                count++;\n              } else {\n                break;\n              }\n            }\n          } while (enumerator.next());    \n        } finally {\n          enumerator.close();\n        }\n        return count;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(bytes, boostAtt.getBoost())) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n\n      if (query.field == null) {\n        throw new NullPointerException(\"If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.\");\n      }\n\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef term;\n      final Term placeholderTerm = new Term(query.field);\n      while ((term = termsEnum.next()) != null) {\n        if (collector.collect(placeholderTerm.createTerm(term.utf8ToString()), boostAtt.getBoost())) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(bytes, boostAtt.getBoost())) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n\n      if (query.hasNewAPI) {\n\n        if (query.field == null) {\n          throw new NullPointerException(\"If you implement getTermsEnum(), you must specify a non-null field in the constructor of MultiTermQuery.\");\n        }\n\n        final Fields fields = MultiFields.getFields(reader);\n        if (fields == null) {\n          // reader has no fields\n          return 0;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          return 0;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(reader);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          return 0;\n        final BoostAttribute boostAtt =\n          termsEnum.attributes().addAttribute(BoostAttribute.class);\n        collector.boostAtt = boostAtt;\n        int count = 0;\n        BytesRef term;\n        final Term placeholderTerm = new Term(query.field);\n        while ((term = termsEnum.next()) != null) {\n          if (collector.collect(placeholderTerm.createTerm(term.utf8ToString()), boostAtt.getBoost())) {\n            count++;\n          } else {\n            break;\n          }\n        }\n        collector.boostAtt = null;\n        return count;\n      } else {\n        // deprecated case\n        final FilteredTermEnum enumerator = query.getEnum(reader);\n        int count = 0;\n        try {\n          do {\n            Term t = enumerator.term();\n            if (t != null) {\n              if (collector.collect(t, enumerator.difference())) {\n                count++;\n              } else {\n                break;\n              }\n            }\n          } while (enumerator.next());    \n        } finally {\n          enumerator.close();\n        }\n        return count;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(termsEnum, bytes, boostAtt.getBoost())) {\n          termsEnum.cacheCurrentTerm();\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(bytes, boostAtt.getBoost())) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      int count = 0;\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          if (collector.collect(bytes)) {\n            termsEnum.cacheCurrentTerm();\n            count++;\n          } else {\n            return count; // interrupt whole term collection, so also don't iterate other subReaders\n          }\n        }\n      }\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(termsEnum, bytes, boostAtt.getBoost())) {\n          termsEnum.cacheCurrentTerm();\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      int count = 0;\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          if (collector.collect(bytes)) {\n            termsEnum.cacheCurrentTerm();\n            count++;\n          } else {\n            return count; // interrupt whole term collection, so also don't iterate other subReaders\n          }\n        }\n      }\n      return count;\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(termsEnum, bytes, boostAtt.getBoost())) {\n          termsEnum.cacheCurrentTerm();\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323d61a0a463a55920491f1745ab879942d1fc04","date":1287665466,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          termsEnum.cacheCurrentTerm();\n          if (!collector.collect(bytes))\n            return; // interrupt whole term collection, so also don't iterate other subReaders\n        }\n      }\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      int count = 0;\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          if (collector.collect(bytes)) {\n            termsEnum.cacheCurrentTerm();\n            count++;\n          } else {\n            return count; // interrupt whole term collection, so also don't iterate other subReaders\n          }\n        }\n      }\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"    protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          termsEnum.cacheCurrentTerm();\n          if (!collector.collect(bytes))\n            return; // interrupt whole term collection, so also don't iterate other subReaders\n        }\n      }\n    }\n\n","sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      int count = 0;\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          if (collector.collect(bytes)) {\n            termsEnum.cacheCurrentTerm();\n            count++;\n          } else {\n            return count; // interrupt whole term collection, so also don't iterate other subReaders\n          }\n        }\n      }\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":null,"sourceOld":"    protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          termsEnum.cacheCurrentTerm();\n          if (!collector.collect(bytes))\n            return; // interrupt whole term collection, so also don't iterate other subReaders\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":null,"sourceOld":"    protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, reader);\n      Comparator<BytesRef> lastTermComp = null;\n      \n      for (IndexReader r : subReaders) {\n        final Fields fields = r.fields();\n        if (fields == null) {\n          // reader has no fields\n          continue;\n        }\n\n        final Terms terms = fields.terms(query.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n        assert termsEnum != null;\n\n        if (termsEnum == TermsEnum.EMPTY)\n          continue;\n        \n        // Check comparator compatibility:\n        final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n        if (lastTermComp != null && newTermComp != lastTermComp)\n          throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n        lastTermComp = newTermComp;\n        \n        collector.setNextEnum(termsEnum);\n        BytesRef bytes;\n        while ((bytes = termsEnum.next()) != null) {\n          termsEnum.cacheCurrentTerm();\n          if (!collector.collect(bytes))\n            return; // interrupt whole term collection, so also don't iterate other subReaders\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.BooleanQueryRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":null,"sourceOld":"    protected final int collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n      final Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        // reader has no fields\n        return 0;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        return 0;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(reader);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        return 0;\n      final BoostAttribute boostAtt =\n        termsEnum.attributes().addAttribute(BoostAttribute.class);\n      collector.boostAtt = boostAtt;\n      int count = 0;\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (collector.collect(bytes, boostAtt.getBoost())) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      collector.boostAtt = null;\n      return count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"323d61a0a463a55920491f1745ab879942d1fc04":["33a8b1f99104f4144f210f5d068411c297cd7163"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["b12d3e81e0f95a4527b5703953c503f71120ffcc","744486748bc5bee772100e49230e5bca39bac99a"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","323d61a0a463a55920491f1745ab879942d1fc04"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","744486748bc5bee772100e49230e5bca39bac99a"],"33a8b1f99104f4144f210f5d068411c297cd7163":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","33a8b1f99104f4144f210f5d068411c297cd7163"],"744486748bc5bee772100e49230e5bca39bac99a":["323d61a0a463a55920491f1745ab879942d1fc04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["744486748bc5bee772100e49230e5bca39bac99a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","5f4e87790277826a2aea119328600dfb07761f32"],"323d61a0a463a55920491f1745ab879942d1fc04":["b12d3e81e0f95a4527b5703953c503f71120ffcc","744486748bc5bee772100e49230e5bca39bac99a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"33a8b1f99104f4144f210f5d068411c297cd7163":["323d61a0a463a55920491f1745ab879942d1fc04","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}