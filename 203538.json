{"path":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSTest#testDataDirAndUlogAreMaintained().mjava","commits":[{"id":"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27","date":1499843247,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSTest#testDataDirAndUlogAreMaintained().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDataDirAndUlogAreMaintained() throws IOException, SolrServerException {\n    String coll = \"movereplicatest_coll2\";\n    CollectionAdminRequest.createCollection(coll, \"conf1\", 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    String hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    String dataDir = hdfsUri + \"/dummyFolder/dataDir\";\n    String ulogDir = hdfsUri + \"/dummyFolder2/ulogDir\";\n    CollectionAdminResponse res = CollectionAdminRequest\n        .addReplicaToShard(coll, \"shard1\")\n        .setDataDir(dataDir)\n        .setUlogDir(ulogDir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    ulogDir += \"/tlog\";\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 120000);\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(coll);\n    Replica replica = docCollection.getReplicas().iterator().next();\n    assertTrue(replica.getStr(\"ulogDir\"), replica.getStr(\"ulogDir\").equals(ulogDir) || replica.getStr(\"ulogDir\").equals(ulogDir+'/'));\n    assertTrue(replica.getStr(\"dataDir\"),replica.getStr(\"dataDir\").equals(dataDir) || replica.getStr(\"dataDir\").equals(dataDir+'/'));\n\n    new CollectionAdminRequest.MoveReplica(coll, replica.getName(), cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 120000);\n    docCollection = zkStateReader.getClusterState().getCollection(coll);\n    assertEquals(1, docCollection.getSlice(\"shard1\").getReplicas().size());\n    replica = docCollection.getReplicas().iterator().next();\n    assertEquals(replica.getNodeName(), cluster.getJettySolrRunner(1).getNodeName());\n    assertTrue(replica.getStr(\"ulogDir\"), replica.getStr(\"ulogDir\").equals(ulogDir) || replica.getStr(\"ulogDir\").equals(ulogDir+'/'));\n    assertTrue(replica.getStr(\"dataDir\"),replica.getStr(\"dataDir\").equals(dataDir) || replica.getStr(\"dataDir\").equals(dataDir+'/'));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8915f526ddcc1f30a75d7e1ef16b6627c8af6f7f","date":1499854368,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSUlogDirTest#testDataDirAndUlogAreMaintained().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSTest#testDataDirAndUlogAreMaintained().mjava","sourceNew":"  @Test\n  public void testDataDirAndUlogAreMaintained() throws IOException, SolrServerException {\n    String coll = \"movereplicatest_coll2\";\n    CollectionAdminRequest.createCollection(coll, \"conf1\", 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    String hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    String dataDir = hdfsUri + \"/dummyFolder/dataDir\";\n    String ulogDir = hdfsUri + \"/dummyFolder2/ulogDir\";\n    CollectionAdminResponse res = CollectionAdminRequest\n        .addReplicaToShard(coll, \"shard1\")\n        .setDataDir(dataDir)\n        .setUlogDir(ulogDir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    ulogDir += \"/tlog\";\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 120000);\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(coll);\n    Replica replica = docCollection.getReplicas().iterator().next();\n    assertTrue(replica.getStr(\"ulogDir\"), replica.getStr(\"ulogDir\").equals(ulogDir) || replica.getStr(\"ulogDir\").equals(ulogDir+'/'));\n    assertTrue(replica.getStr(\"dataDir\"),replica.getStr(\"dataDir\").equals(dataDir) || replica.getStr(\"dataDir\").equals(dataDir+'/'));\n\n    new CollectionAdminRequest.MoveReplica(coll, replica.getName(), cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 120000);\n    docCollection = zkStateReader.getClusterState().getCollection(coll);\n    assertEquals(1, docCollection.getSlice(\"shard1\").getReplicas().size());\n    replica = docCollection.getReplicas().iterator().next();\n    assertEquals(replica.getNodeName(), cluster.getJettySolrRunner(1).getNodeName());\n    assertTrue(replica.getStr(\"ulogDir\"), replica.getStr(\"ulogDir\").equals(ulogDir) || replica.getStr(\"ulogDir\").equals(ulogDir+'/'));\n    assertTrue(replica.getStr(\"dataDir\"),replica.getStr(\"dataDir\").equals(dataDir) || replica.getStr(\"dataDir\").equals(dataDir+'/'));\n\n  }\n\n","sourceOld":"  @Test\n  public void testDataDirAndUlogAreMaintained() throws IOException, SolrServerException {\n    String coll = \"movereplicatest_coll2\";\n    CollectionAdminRequest.createCollection(coll, \"conf1\", 1, 1)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    String hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    String dataDir = hdfsUri + \"/dummyFolder/dataDir\";\n    String ulogDir = hdfsUri + \"/dummyFolder2/ulogDir\";\n    CollectionAdminResponse res = CollectionAdminRequest\n        .addReplicaToShard(coll, \"shard1\")\n        .setDataDir(dataDir)\n        .setUlogDir(ulogDir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    ulogDir += \"/tlog\";\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 120000);\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(coll);\n    Replica replica = docCollection.getReplicas().iterator().next();\n    assertTrue(replica.getStr(\"ulogDir\"), replica.getStr(\"ulogDir\").equals(ulogDir) || replica.getStr(\"ulogDir\").equals(ulogDir+'/'));\n    assertTrue(replica.getStr(\"dataDir\"),replica.getStr(\"dataDir\").equals(dataDir) || replica.getStr(\"dataDir\").equals(dataDir+'/'));\n\n    new CollectionAdminRequest.MoveReplica(coll, replica.getName(), cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 120000);\n    docCollection = zkStateReader.getClusterState().getCollection(coll);\n    assertEquals(1, docCollection.getSlice(\"shard1\").getReplicas().size());\n    replica = docCollection.getReplicas().iterator().next();\n    assertEquals(replica.getNodeName(), cluster.getJettySolrRunner(1).getNodeName());\n    assertTrue(replica.getStr(\"ulogDir\"), replica.getStr(\"ulogDir\").equals(ulogDir) || replica.getStr(\"ulogDir\").equals(ulogDir+'/'));\n    assertTrue(replica.getStr(\"dataDir\"),replica.getStr(\"dataDir\").equals(dataDir) || replica.getStr(\"dataDir\").equals(dataDir+'/'));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8915f526ddcc1f30a75d7e1ef16b6627c8af6f7f":["264e2d8faf5f86cbad34a372b65c98e3d9f2bb27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8915f526ddcc1f30a75d7e1ef16b6627c8af6f7f"],"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8915f526ddcc1f30a75d7e1ef16b6627c8af6f7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264e2d8faf5f86cbad34a372b65c98e3d9f2bb27"],"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27":["8915f526ddcc1f30a75d7e1ef16b6627c8af6f7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}