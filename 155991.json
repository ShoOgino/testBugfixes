{"path":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","commits":[{"id":"b51d06e615dc831227c94b4b16cdd5763692d2d4","date":1095169515,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>.\n   * @param prefixLength length of common prefix.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt; 1 or &lt; 0\n   * or if prefixLength &lt; 0 or &gt; <code>term.text().length()</code>.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity > 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity > 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    this.minimumSimilarity = minimumSimilarity;\n    \n    if(prefixLength < 0)\n        throw new IllegalArgumentException(\"prefixLength < 0\");\n    else if(prefixLength >= term.text().length())\n        throw new IllegalArgumentException(\"prefixLength >= term.text().length()\");\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b248993c7462a5535354c560e06dab1d1085051","date":1095277441,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt; 1 or &lt; 0\n   * or if prefixLength &lt; 0 or &gt; <code>term.text().length()</code>.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity > 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity > 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    this.minimumSimilarity = minimumSimilarity;\n    \n    if(prefixLength < 0)\n        throw new IllegalArgumentException(\"prefixLength < 0\");\n    else if(prefixLength >= term.text().length())\n        throw new IllegalArgumentException(\"prefixLength >= term.text().length()\");\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>.\n   * @param prefixLength length of common prefix.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt; 1 or &lt; 0\n   * or if prefixLength &lt; 0 or &gt; <code>term.text().length()</code>.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity > 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity > 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    this.minimumSimilarity = minimumSimilarity;\n    \n    if(prefixLength < 0)\n        throw new IllegalArgumentException(\"prefixLength < 0\");\n    else if(prefixLength >= term.text().length())\n        throw new IllegalArgumentException(\"prefixLength >= term.text().length()\");\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2b17f10a0d622e1a8082a94957764dad150530","date":1097079592,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt; 1 or &lt; 0\n   * or if prefixLength &lt; 0 or &gt; <code>term.text().length()</code>.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    \n    this.minimumSimilarity = minimumSimilarity;\n    if(prefixLength < 0)\n        throw new IllegalArgumentException(\"prefixLength < 0\");\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt; 1 or &lt; 0\n   * or if prefixLength &lt; 0 or &gt; <code>term.text().length()</code>.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity > 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity > 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    this.minimumSimilarity = minimumSimilarity;\n    \n    if(prefixLength < 0)\n        throw new IllegalArgumentException(\"prefixLength < 0\");\n    else if(prefixLength >= term.text().length())\n        throw new IllegalArgumentException(\"prefixLength >= term.text().length()\");\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1643fdf6c2907a61b575360d4e846bdf216c583","date":1099872639,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt; 1 or &lt; 0\n   * or if prefixLength &lt; 0 or &gt; <code>term.text().length()</code>.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    \n    this.minimumSimilarity = minimumSimilarity;\n    if(prefixLength < 0)\n        throw new IllegalArgumentException(\"prefixLength < 0\");\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d308493f28656b4f3d6b6a9e13d5712b679db6ee","date":1232303054,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term); // will be removed in 3.0\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term); // will be removed in 3.0\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n    rewriteMethod = SCORING_BOOLEAN_QUERY_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term); // will be removed in 3.0\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3","date":1255442836,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n    rewriteMethod = SCORING_BOOLEAN_QUERY_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    super(term); // will be removed in 3.0\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n    rewriteMethod = SCORING_BOOLEAN_QUERY_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cac733bfe923fb362d2b289b2996b0bf10ae22e","date":1260443093,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    this.term = term;\n    setRewriteMethod(TOP_TERMS_SCORING_BOOLEAN_REWRITE);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n    rewriteMethod = SCORING_BOOLEAN_QUERY_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33098c76721840ff65df95e81a98a5d4a49a777f","date":1266737266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Calls {@link #FuzzyQuery(Term, float) FuzzyQuery(term, minimumSimilarity, prefixLength, Integer.MAX_VALUE)}.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    this(term, minimumSimilarity, prefixLength, defaultMaxExpansions);\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) throws IllegalArgumentException {\n    this.term = term;\n    setRewriteMethod(TOP_TERMS_SCORING_BOOLEAN_REWRITE);\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int).mjava","sourceNew":"  /**\n   * Calls {@link #FuzzyQuery(Term, float) FuzzyQuery(term, minimumSimilarity, prefixLength, Integer.MAX_VALUE)}.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    this(term, minimumSimilarity, prefixLength, defaultMaxExpansions);\n  }\n\n","sourceOld":"  /**\n   * Calls {@link #FuzzyQuery(Term, float) FuzzyQuery(term, minimumSimilarity, prefixLength, Integer.MAX_VALUE)}.\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength) {\n    this(term, minimumSimilarity, prefixLength, defaultMaxExpansions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d2b17f10a0d622e1a8082a94957764dad150530":["9b248993c7462a5535354c560e06dab1d1085051"],"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["322d95cfb0c59ace7533e19e5cec7f359ce6d6d3"],"b51d06e615dc831227c94b4b16cdd5763692d2d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"9b248993c7462a5535354c560e06dab1d1085051":["b51d06e615dc831227c94b4b16cdd5763692d2d4"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["d308493f28656b4f3d6b6a9e13d5712b679db6ee"],"33098c76721840ff65df95e81a98a5d4a49a777f":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"],"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a1643fdf6c2907a61b575360d4e846bdf216c583":["6d2b17f10a0d622e1a8082a94957764dad150530"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d308493f28656b4f3d6b6a9e13d5712b679db6ee":["a1643fdf6c2907a61b575360d4e846bdf216c583"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["33098c76721840ff65df95e81a98a5d4a49a777f"]},"commit2Childs":{"6d2b17f10a0d622e1a8082a94957764dad150530":["a1643fdf6c2907a61b575360d4e846bdf216c583"],"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["33098c76721840ff65df95e81a98a5d4a49a777f"],"b51d06e615dc831227c94b4b16cdd5763692d2d4":["9b248993c7462a5535354c560e06dab1d1085051"],"9b248993c7462a5535354c560e06dab1d1085051":["6d2b17f10a0d622e1a8082a94957764dad150530"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["322d95cfb0c59ace7533e19e5cec7f359ce6d6d3"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"],"33098c76721840ff65df95e81a98a5d4a49a777f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a1643fdf6c2907a61b575360d4e846bdf216c583":["d308493f28656b4f3d6b6a9e13d5712b679db6ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b51d06e615dc831227c94b4b16cdd5763692d2d4"],"d308493f28656b4f3d6b6a9e13d5712b679db6ee":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}