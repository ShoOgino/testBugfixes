{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c6ce79c21a8da5e778ef9179243bc50d6d42c52","date":1324010267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 },\n        INPUT.length());\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 },\n        INPUT.length());\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 },\n        INPUT.length());\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 },\n        INPUT.length());\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 },\n        INPUT.length());\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 },\n        INPUT.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}