{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testSegmentMerges() throws Exception {\r\n    Directory dir = newDirectory();\r\n    Random random = random();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\r\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\r\n    \r\n    int docid = 0;\r\n    int numRounds = atLeast(10);\r\n    for (int rnd = 0; rnd < numRounds; rnd++) {\r\n      Document doc = new Document();\r\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\r\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\r\n      int numDocs = atLeast(30);\r\n      for (int i = 0; i < numDocs; i++) {\r\n        doc.removeField(\"id\");\r\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\r\n        writer.addDocument(doc);\r\n      }\r\n      \r\n      long value = rnd + 1;\r\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\r\n      \r\n      if (random.nextDouble() < 0.2) { // randomly delete some docs\r\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\r\n      }\r\n      \r\n      // randomly commit or reopen-IW (or nothing), before forceMerge\r\n      if (random.nextDouble() < 0.4) {\r\n        writer.commit();\r\n      } else if (random.nextDouble() < 0.1) {\r\n        writer.close();\r\n        writer = new IndexWriter(dir, conf.clone());\r\n      }\r\n\r\n      // add another document with the current value, to be sure forceMerge has\r\n      // something to merge (for instance, it could be that CMS finished merging\r\n      // all segments down to 1 before the delete was applied, so when\r\n      // forceMerge is called, the index will be with one segment and deletes\r\n      // and some MPs might now merge it, thereby invalidating test's\r\n      // assumption that the reader has no deletes).\r\n      doc = new Document();\r\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\r\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\r\n      doc.add(new NumericDocValuesField(\"ndv\", value));\r\n      writer.addDocument(doc);\r\n\r\n      writer.forceMerge(1, true);\r\n      final DirectoryReader reader;\r\n      if (random.nextBoolean()) {\r\n        writer.commit();\r\n        reader = DirectoryReader.open(dir);\r\n      } else {\r\n        reader = DirectoryReader.open(writer, true);\r\n      }\r\n      \r\n      assertEquals(1, reader.leaves().size());\r\n      final AtomicReader r = reader.leaves().get(0).reader();\r\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\r\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\r\n      assertNotNull(ndv);\r\n      for (int i = 0; i < r.maxDoc(); i++) {\r\n        assertEquals(value, ndv.get(i));\r\n      }\r\n      reader.close();\r\n    }\r\n    \r\n    writer.close();\r\n    dir.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4962e8a1c440950d757f5e295b4f6106ba2ab420","date":1379271654,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        writer = new IndexWriter(dir, conf.clone());\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\r\n  public void testSegmentMerges() throws Exception {\r\n    Directory dir = newDirectory();\r\n    Random random = random();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\r\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\r\n    \r\n    int docid = 0;\r\n    int numRounds = atLeast(10);\r\n    for (int rnd = 0; rnd < numRounds; rnd++) {\r\n      Document doc = new Document();\r\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\r\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\r\n      int numDocs = atLeast(30);\r\n      for (int i = 0; i < numDocs; i++) {\r\n        doc.removeField(\"id\");\r\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\r\n        writer.addDocument(doc);\r\n      }\r\n      \r\n      long value = rnd + 1;\r\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\r\n      \r\n      if (random.nextDouble() < 0.2) { // randomly delete some docs\r\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\r\n      }\r\n      \r\n      // randomly commit or reopen-IW (or nothing), before forceMerge\r\n      if (random.nextDouble() < 0.4) {\r\n        writer.commit();\r\n      } else if (random.nextDouble() < 0.1) {\r\n        writer.close();\r\n        writer = new IndexWriter(dir, conf.clone());\r\n      }\r\n\r\n      // add another document with the current value, to be sure forceMerge has\r\n      // something to merge (for instance, it could be that CMS finished merging\r\n      // all segments down to 1 before the delete was applied, so when\r\n      // forceMerge is called, the index will be with one segment and deletes\r\n      // and some MPs might now merge it, thereby invalidating test's\r\n      // assumption that the reader has no deletes).\r\n      doc = new Document();\r\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\r\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\r\n      doc.add(new NumericDocValuesField(\"ndv\", value));\r\n      writer.addDocument(doc);\r\n\r\n      writer.forceMerge(1, true);\r\n      final DirectoryReader reader;\r\n      if (random.nextBoolean()) {\r\n        writer.commit();\r\n        reader = DirectoryReader.open(dir);\r\n      } else {\r\n        reader = DirectoryReader.open(writer, true);\r\n      }\r\n      \r\n      assertEquals(1, reader.leaves().size());\r\n      final AtomicReader r = reader.leaves().get(0).reader();\r\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\r\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\r\n      assertNotNull(ndv);\r\n      for (int i = 0; i < r.maxDoc(); i++) {\r\n        assertEquals(value, ndv.get(i));\r\n      }\r\n      reader.close();\r\n    }\r\n    \r\n    writer.close();\r\n    dir.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.shutdown();\n        writer = new IndexWriter(dir, conf.clone());\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        writer = new IndexWriter(dir, conf.clone());\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfc45818441587d8004ff1a119fb60ac9ecb9a14","date":1401437797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.shutdown();\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.shutdown();\n        writer = new IndexWriter(dir, conf.clone());\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.shutdown();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.shutdown();\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.shutdown();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final AtomicReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer, true);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(value, ndv.get(i));\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numRounds + \" rounds\");\n    }\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: round=\" + rnd);\n      }\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numDocs + \" docs\");\n      }\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid), Store.YES));\n        if (VERBOSE) {\n          System.out.println(\"TEST: add doc id=\" + docid);\n        }\n        writer.addDocument(doc);\n        docid++;\n      }\n      \n      long value = rnd + 1;\n      if (VERBOSE) {\n        System.out.println(\"TEST: update all ndv values to \" + value);\n      }\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete one doc\n        int delID = random.nextInt(docid);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete random doc id=\" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: commit writer\");\n        }\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: close writer\");\n        }\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid), Store.YES));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: add one more doc id=\" + docid);\n      }\n      writer.addDocument(doc);\n      docid++;\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: force merge\");\n      }\n      writer.forceMerge(1, true);\n      \n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: commit and open non-NRT reader\");\n        }\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: open NRT reader\");\n        }\n        reader = DirectoryReader.open(writer);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got reader=\" + reader);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      if (VERBOSE) {\n        System.out.println(\"TEST: maxDoc=\" + r.maxDoc());\n      }\n      for (int i = 0; i < r.maxDoc(); i++) {\n        Document rdoc = r.document(i);\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(\"docid=\" + i + \" has wrong ndv value; doc=\" + rdoc, value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numRounds + \" rounds\");\n    }\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: round=\" + rnd);\n      }\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numDocs + \" docs\");\n      }\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid), Store.YES));\n        if (VERBOSE) {\n          System.out.println(\"TEST: add doc id=\" + docid);\n        }\n        writer.addDocument(doc);\n        docid++;\n      }\n      \n      long value = rnd + 1;\n      if (VERBOSE) {\n        System.out.println(\"TEST: update all ndv values to \" + value);\n      }\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete one doc\n        int delID = random.nextInt(docid);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete random doc id=\" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: commit writer\");\n        }\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: close writer\");\n        }\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid), Store.YES));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: add one more doc id=\" + docid);\n      }\n      writer.addDocument(doc);\n      docid++;\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: force merge\");\n      }\n      writer.forceMerge(1, true);\n      \n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: commit and open non-NRT reader\");\n        }\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: open NRT reader\");\n        }\n        reader = DirectoryReader.open(writer);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got reader=\" + reader);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      if (VERBOSE) {\n        System.out.println(\"TEST: maxDoc=\" + r.maxDoc());\n      }\n      for (int i = 0; i < r.maxDoc(); i++) {\n        Document rdoc = r.document(i);\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(\"docid=\" + i + \" has wrong ndv value; doc=\" + rdoc, value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testSegmentMerges().mjava","sourceNew":"  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numRounds + \" rounds\");\n    }\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: round=\" + rnd);\n      }\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numDocs + \" docs\");\n      }\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid), Store.YES));\n        if (VERBOSE) {\n          System.out.println(\"TEST: add doc id=\" + docid);\n        }\n        writer.addDocument(doc);\n        docid++;\n      }\n      \n      long value = rnd + 1;\n      if (VERBOSE) {\n        System.out.println(\"TEST: update all ndv values to \" + value);\n      }\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete one doc\n        int delID = random.nextInt(docid);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete random doc id=\" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: commit writer\");\n        }\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: close writer\");\n        }\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid), Store.YES));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: add one more doc id=\" + docid);\n      }\n      writer.addDocument(doc);\n      docid++;\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: force merge\");\n      }\n      writer.forceMerge(1, true);\n      \n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: commit and open non-NRT reader\");\n        }\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: open NRT reader\");\n        }\n        reader = DirectoryReader.open(writer);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got reader=\" + reader);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      if (VERBOSE) {\n        System.out.println(\"TEST: maxDoc=\" + r.maxDoc());\n      }\n      for (int i = 0; i < r.maxDoc(); i++) {\n        Document rdoc = r.document(i);\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(\"docid=\" + i + \" has wrong ndv value; doc=\" + rdoc, value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentMerges() throws Exception {\n    Directory dir = newDirectory();\n    Random random = random();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    int docid = 0;\n    int numRounds = atLeast(10);\n    for (int rnd = 0; rnd < numRounds; rnd++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", -1));\n      int numDocs = atLeast(30);\n      for (int i = 0; i < numDocs; i++) {\n        doc.removeField(\"id\");\n        doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n        writer.addDocument(doc);\n      }\n      \n      long value = rnd + 1;\n      writer.updateNumericDocValue(new Term(\"key\", \"doc\"), \"ndv\", value);\n      \n      if (random.nextDouble() < 0.2) { // randomly delete some docs\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(random.nextInt(docid))));\n      }\n      \n      // randomly commit or reopen-IW (or nothing), before forceMerge\n      if (random.nextDouble() < 0.4) {\n        writer.commit();\n      } else if (random.nextDouble() < 0.1) {\n        writer.close();\n        conf = newIndexWriterConfig(new MockAnalyzer(random));\n        writer = new IndexWriter(dir, conf);\n      }\n\n      // add another document with the current value, to be sure forceMerge has\n      // something to merge (for instance, it could be that CMS finished merging\n      // all segments down to 1 before the delete was applied, so when\n      // forceMerge is called, the index will be with one segment and deletes\n      // and some MPs might now merge it, thereby invalidating test's\n      // assumption that the reader has no deletes).\n      doc = new Document();\n      doc.add(new StringField(\"id\", Integer.toString(docid++), Store.NO));\n      doc.add(new StringField(\"key\", \"doc\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", value));\n      writer.addDocument(doc);\n\n      writer.forceMerge(1, true);\n      final DirectoryReader reader;\n      if (random.nextBoolean()) {\n        writer.commit();\n        reader = DirectoryReader.open(dir);\n      } else {\n        reader = DirectoryReader.open(writer);\n      }\n      \n      assertEquals(1, reader.leaves().size());\n      final LeafReader r = reader.leaves().get(0).reader();\n      assertNull(\"index should have no deletes after forceMerge\", r.getLiveDocs());\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertNotNull(ndv);\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(i, ndv.nextDoc());\n        assertEquals(value, ndv.longValue());\n      }\n      reader.close();\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a1862266772deb28cdcb7d996b64d2177022687","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2a1862266772deb28cdcb7d996b64d2177022687","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["2a1862266772deb28cdcb7d996b64d2177022687"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2a1862266772deb28cdcb7d996b64d2177022687":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}