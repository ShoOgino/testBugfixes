{"path":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","commits":[{"id":"b3f442a8e5e2c34c1144ba1d4d49c597953e6b72","date":1066760663,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"/dev/null","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.*/\n  public abstract void undeleteAll() throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.*/\n  public final synchronized void undeleteAll() throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doUndeleteAll();\n    hasChanges = true;\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.*/\n  public abstract void undeleteAll() throws IOException;\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","696c7f6195b9683173ed379ce507833cf983ae95"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"696c7f6195b9683173ed379ce507833cf983ae95","date":1168362837,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.*/\n  public final synchronized void undeleteAll() throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.*/\n  public final synchronized void undeleteAll() throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doUndeleteAll();\n    hasChanges = true;\n  }\n\n","bugFix":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.*/\n  public final synchronized void undeleteAll() throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":["f653aecb322b74d99e6ecdb93765e453a3d7aa71","b3f442a8e5e2c34c1144ba1d4d49c597953e6b72"],"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3f442a8e5e2c34c1144ba1d4d49c597953e6b72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5712975970a595c28f1988efd007e1b8a617a92f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"1b54a9bc667895a2095a886184bf69a3179e63df":["696c7f6195b9683173ed379ce507833cf983ae95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["b3f442a8e5e2c34c1144ba1d4d49c597953e6b72"],"696c7f6195b9683173ed379ce507833cf983ae95":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5712975970a595c28f1988efd007e1b8a617a92f"]},"commit2Childs":{"b3f442a8e5e2c34c1144ba1d4d49c597953e6b72":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["5712975970a595c28f1988efd007e1b8a617a92f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"5712975970a595c28f1988efd007e1b8a617a92f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3f442a8e5e2c34c1144ba1d4d49c597953e6b72"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["696c7f6195b9683173ed379ce507833cf983ae95"],"696c7f6195b9683173ed379ce507833cf983ae95":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}