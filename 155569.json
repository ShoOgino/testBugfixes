{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public final void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified -1 for indexDivisor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706b903fac3a7a12a1a332474b4bf3e0e7c2472c","date":1275076282,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","sourceNew":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified -1 for indexDivisor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","sourceOld":"    @Override\n    public final void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified -1 for indexDivisor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","sourceNew":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified\n      // indexDivisor < 0 to ctor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","sourceOld":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified -1 for indexDivisor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","sourceNew":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified\n      // indexDivisor < 0 to ctor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","sourceOld":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified -1 for indexDivisor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","sourceNew":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified\n      // indexDivisor < 0 to ctor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","sourceOld":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified\n      // indexDivisor < 0 to ctor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#getIndexOffset(long,TermsIndexResult).mjava","sourceNew":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified\n      // indexDivisor < 0 to ctor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","sourceOld":"    @Override\n    public void getIndexOffset(long ord, TermsIndexResult result) throws IOException {\n      // You must call loadTermsIndex if you had specified\n      // indexDivisor < 0 to ctor\n      if (coreIndex == null) {\n        throw new IllegalStateException(\"terms index was not loaded\");\n      }\n      coreIndex.getIndexOffset(ord, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["706b903fac3a7a12a1a332474b4bf3e0e7c2472c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["706b903fac3a7a12a1a332474b4bf3e0e7c2472c","08932c793647a36953d1816b1060121f48820d3f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"706b903fac3a7a12a1a332474b4bf3e0e7c2472c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["706b903fac3a7a12a1a332474b4bf3e0e7c2472c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"706b903fac3a7a12a1a332474b4bf3e0e7c2472c":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}