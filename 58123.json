{"path":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    cmd.commitWithin = commitWithin;\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else if( \"commitWithin\".equals(key) ) { \n            cmd.commitWithin = Integer.parseInt(parser.getString());\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":["19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    cmd.commitWithin = commitWithin;\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.setId(parser.getString());\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.setQuery(parser.getString());\n          }\n          else if( \"commitWithin\".equals(key) ) { \n            cmd.commitWithin = Integer.parseInt(parser.getString());\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.getId() == null && cmd.getQuery() == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    cmd.commitWithin = commitWithin;\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else if( \"commitWithin\".equals(key) ) { \n            cmd.commitWithin = Integer.parseInt(parser.getString());\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    cmd.commitWithin = commitWithin;\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.setId(parser.getString());\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.setQuery(parser.getString());\n          }\n          else if( \"commitWithin\".equals(key) ) { \n            cmd.commitWithin = Integer.parseInt(parser.getString());\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.getId() == null && cmd.getQuery() == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    cmd.commitWithin = commitWithin;\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.setId(parser.getString());\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.setQuery(parser.getString());\n          }\n          else if( \"commitWithin\".equals(key) ) { \n            cmd.commitWithin = Integer.parseInt(parser.getString());\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.getId() == null && cmd.getQuery() == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":null,"sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    cmd.commitWithin = commitWithin;\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.setId(parser.getString());\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.setQuery(parser.getString());\n          }\n          else if( \"commitWithin\".equals(key) ) { \n            cmd.commitWithin = Integer.parseInt(parser.getString());\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.getId() == null && cmd.getQuery() == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"042e4d934397657ba04c82b46cc5665076bc5c58":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["818d704eaaf0fba0561d0d2752832e1015053482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"818d704eaaf0fba0561d0d2752832e1015053482":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","042e4d934397657ba04c82b46cc5665076bc5c58","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"818d704eaaf0fba0561d0d2752832e1015053482":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}