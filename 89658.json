{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#collect(int).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int parentDoc) throws IOException {\n    //System.out.println(\"C parentDoc=\" + parentDoc);\n    totalHitCount++;\n\n    float score = Float.NaN;\n\n    if (trackMaxScore) {\n      score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n    }\n\n    // TODO: we could sweep all joinScorers here and\n    // aggregate total child hit count, so we can fill this\n    // in getTopGroups (we wire it to 0 now)\n\n    if (queueFull) {\n      //System.out.println(\"  queueFull\");\n      // Fastmatch: return if this hit is not competitive\n      for (int i = 0;; i++) {\n        final int c = reverseMul[i] * comparators[i].compareBottom(parentDoc);\n        if (c < 0) {\n          // Definitely not competitive.\n          //System.out.println(\"    skip\");\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == compEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          //System.out.println(\"    skip\");\n          return;\n        }\n      }\n\n      //System.out.println(\"    competes!  doc=\" + (docBase + parentDoc));\n\n      // This hit is competitive - replace bottom element in queue & adjustTop\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(bottom.slot, parentDoc);\n      }\n      if (!trackMaxScore && trackScores) {\n        score = scorer.score();\n      }\n      bottom.doc = docBase + parentDoc;\n      bottom.readerContext = currentReaderContext;\n      bottom.score = score;\n      copyGroups(bottom);\n      bottom = queue.updateTop();\n\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].setBottom(bottom.slot);\n      }\n    } else {\n      // Startup transient: queue is not yet full:\n      final int comparatorSlot = totalHitCount - 1;\n\n      // Copy hit into queue\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(comparatorSlot, parentDoc);\n      }\n      //System.out.println(\"  startup: new OG doc=\" + (docBase+parentDoc));\n      final OneGroup og = new OneGroup(comparatorSlot, docBase+parentDoc, score, joinScorers.length, trackScores);\n      og.readerContext = currentReaderContext;\n      copyGroups(og);\n      bottom = queue.add(og);\n      queueFull = totalHitCount == numParentHits;\n      if (queueFull) {\n        // End of startup transient: queue just filled up:\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994","ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int parentDoc) throws IOException {\n    //System.out.println(\"C parentDoc=\" + parentDoc);\n    totalHitCount++;\n\n    float score = Float.NaN;\n\n    if (trackMaxScore) {\n      score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n    }\n\n    // TODO: we could sweep all joinScorers here and\n    // aggregate total child hit count, so we can fill this\n    // in getTopGroups (we wire it to 0 now)\n\n    if (queueFull) {\n      //System.out.println(\"  queueFull\");\n      // Fastmatch: return if this hit is not competitive\n      for (int i = 0;; i++) {\n        final int c = reverseMul[i] * comparators[i].compareBottom(parentDoc);\n        if (c < 0) {\n          // Definitely not competitive.\n          //System.out.println(\"    skip\");\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == compEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          //System.out.println(\"    skip\");\n          return;\n        }\n      }\n\n      //System.out.println(\"    competes!  doc=\" + (docBase + parentDoc));\n\n      // This hit is competitive - replace bottom element in queue & adjustTop\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(bottom.slot, parentDoc);\n      }\n      if (!trackMaxScore && trackScores) {\n        score = scorer.score();\n      }\n      bottom.doc = docBase + parentDoc;\n      bottom.readerContext = currentReaderContext;\n      bottom.score = score;\n      copyGroups(bottom);\n      bottom = queue.updateTop();\n\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].setBottom(bottom.slot);\n      }\n    } else {\n      // Startup transient: queue is not yet full:\n      final int comparatorSlot = totalHitCount - 1;\n\n      // Copy hit into queue\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(comparatorSlot, parentDoc);\n      }\n      //System.out.println(\"  startup: new OG doc=\" + (docBase+parentDoc));\n      final OneGroup og = new OneGroup(comparatorSlot, docBase+parentDoc, score, joinScorers.length, trackScores);\n      og.readerContext = currentReaderContext;\n      copyGroups(og);\n      bottom = queue.add(og);\n      queueFull = totalHitCount == numParentHits;\n      if (queueFull) {\n        // End of startup transient: queue just filled up:\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int parentDoc) throws IOException {\n    //System.out.println(\"C parentDoc=\" + parentDoc);\n    totalHitCount++;\n\n    float score = Float.NaN;\n\n    if (trackMaxScore) {\n      score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n    }\n\n    // TODO: we could sweep all joinScorers here and\n    // aggregate total child hit count, so we can fill this\n    // in getTopGroups (we wire it to 0 now)\n\n    if (queueFull) {\n      //System.out.println(\"  queueFull\");\n      // Fastmatch: return if this hit is not competitive\n      for (int i = 0;; i++) {\n        final int c = reverseMul[i] * comparators[i].compareBottom(parentDoc);\n        if (c < 0) {\n          // Definitely not competitive.\n          //System.out.println(\"    skip\");\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == compEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          //System.out.println(\"    skip\");\n          return;\n        }\n      }\n\n      //System.out.println(\"    competes!  doc=\" + (docBase + parentDoc));\n\n      // This hit is competitive - replace bottom element in queue & adjustTop\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(bottom.slot, parentDoc);\n      }\n      if (!trackMaxScore && trackScores) {\n        score = scorer.score();\n      }\n      bottom.doc = docBase + parentDoc;\n      bottom.readerContext = currentReaderContext;\n      bottom.score = score;\n      copyGroups(bottom);\n      bottom = queue.updateTop();\n\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].setBottom(bottom.slot);\n      }\n    } else {\n      // Startup transient: queue is not yet full:\n      final int comparatorSlot = totalHitCount - 1;\n\n      // Copy hit into queue\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(comparatorSlot, parentDoc);\n      }\n      //System.out.println(\"  startup: new OG doc=\" + (docBase+parentDoc));\n      final OneGroup og = new OneGroup(comparatorSlot, docBase+parentDoc, score, joinScorers.length, trackScores);\n      og.readerContext = currentReaderContext;\n      copyGroups(og);\n      bottom = queue.add(og);\n      queueFull = totalHitCount == numParentHits;\n      if (queueFull) {\n        // End of startup transient: queue just filled up:\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#collect(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int parentDoc) throws IOException {\n    //System.out.println(\"C parentDoc=\" + parentDoc);\n    totalHitCount++;\n\n    float score = Float.NaN;\n\n    if (trackMaxScore) {\n      score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n    }\n\n    // TODO: we could sweep all joinScorers here and\n    // aggregate total child hit count, so we can fill this\n    // in getTopGroups (we wire it to 0 now)\n\n    if (queueFull) {\n      //System.out.println(\"  queueFull\");\n      // Fastmatch: return if this hit is not competitive\n      for (int i = 0;; i++) {\n        final int c = reverseMul[i] * comparators[i].compareBottom(parentDoc);\n        if (c < 0) {\n          // Definitely not competitive.\n          //System.out.println(\"    skip\");\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == compEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          //System.out.println(\"    skip\");\n          return;\n        }\n      }\n\n      //System.out.println(\"    competes!  doc=\" + (docBase + parentDoc));\n\n      // This hit is competitive - replace bottom element in queue & adjustTop\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(bottom.slot, parentDoc);\n      }\n      if (!trackMaxScore && trackScores) {\n        score = scorer.score();\n      }\n      bottom.doc = docBase + parentDoc;\n      bottom.readerContext = currentReaderContext;\n      bottom.score = score;\n      copyGroups(bottom);\n      bottom = queue.updateTop();\n\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].setBottom(bottom.slot);\n      }\n    } else {\n      // Startup transient: queue is not yet full:\n      final int comparatorSlot = totalHitCount - 1;\n\n      // Copy hit into queue\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(comparatorSlot, parentDoc);\n      }\n      //System.out.println(\"  startup: new OG doc=\" + (docBase+parentDoc));\n      final OneGroup og = new OneGroup(comparatorSlot, docBase+parentDoc, score, joinScorers.length, trackScores);\n      og.readerContext = currentReaderContext;\n      copyGroups(og);\n      bottom = queue.add(og);\n      queueFull = totalHitCount == numParentHits;\n      if (queueFull) {\n        // End of startup transient: queue just filled up:\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int parentDoc) throws IOException {\n    //System.out.println(\"C parentDoc=\" + parentDoc);\n    totalHitCount++;\n\n    float score = Float.NaN;\n\n    if (trackMaxScore) {\n      score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n    }\n\n    // TODO: we could sweep all joinScorers here and\n    // aggregate total child hit count, so we can fill this\n    // in getTopGroups (we wire it to 0 now)\n\n    if (queueFull) {\n      //System.out.println(\"  queueFull\");\n      // Fastmatch: return if this hit is not competitive\n      for (int i = 0;; i++) {\n        final int c = reverseMul[i] * comparators[i].compareBottom(parentDoc);\n        if (c < 0) {\n          // Definitely not competitive.\n          //System.out.println(\"    skip\");\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == compEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          //System.out.println(\"    skip\");\n          return;\n        }\n      }\n\n      //System.out.println(\"    competes!  doc=\" + (docBase + parentDoc));\n\n      // This hit is competitive - replace bottom element in queue & adjustTop\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(bottom.slot, parentDoc);\n      }\n      if (!trackMaxScore && trackScores) {\n        score = scorer.score();\n      }\n      bottom.doc = docBase + parentDoc;\n      bottom.readerContext = currentReaderContext;\n      bottom.score = score;\n      copyGroups(bottom);\n      bottom = queue.updateTop();\n\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].setBottom(bottom.slot);\n      }\n    } else {\n      // Startup transient: queue is not yet full:\n      final int comparatorSlot = totalHitCount - 1;\n\n      // Copy hit into queue\n      for (int i = 0; i < comparators.length; i++) {\n        comparators[i].copy(comparatorSlot, parentDoc);\n      }\n      //System.out.println(\"  startup: new OG doc=\" + (docBase+parentDoc));\n      final OneGroup og = new OneGroup(comparatorSlot, docBase+parentDoc, score, joinScorers.length, trackScores);\n      og.readerContext = currentReaderContext;\n      copyGroups(og);\n      bottom = queue.add(og);\n      queueFull = totalHitCount == numParentHits;\n      if (queueFull) {\n        // End of startup transient: queue just filled up:\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["6bd4a7478aca8c3880512b730b28bf3239340635","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}