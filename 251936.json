{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testEnum(TermsEnum,List[String]).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testEnum(TermsEnum,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void testEnum(TermsEnum te, List<String> terms) throws IOException {\n    Collections.sort(terms);\n    for(int i=terms.size()-1;i>=0;i--) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: seek to ord=\" + i);\n      }\n      te.seekExact(i);\n      assertEquals(i, te.ord());\n      assertEquals(terms.get(i), te.term().utf8ToString());\n    }\n\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      int ord = random().nextInt(terms.size());\n      if (random().nextBoolean()) {\n        te.seekExact(ord);\n        assertEquals(terms.get(ord), te.term().utf8ToString());\n      } else {\n        te.seekExact(new BytesRef(terms.get(ord)));\n        assertEquals(ord, te.ord());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}