{"path":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","commits":[{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Persists all snapshots information.\n   */\n  private void persist() throws IOException {\n    writer.deleteAll();\n    Document d = new Document();\n    d.add(new StoredField(SNAPSHOTS_GENS, \"\"));\n    for (Entry<Long,Integer> e : refCounts.entrySet()) {\n      d.add(new StoredField(e.getKey().toString(), e.getValue().toString()));\n    }\n    writer.addDocument(d);\n    writer.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","sourceNew":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        try {\n          dir.deleteFile(fileName);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    nextWriteGen++;\n  }\n\n","sourceOld":"  /**\n   * Persists all snapshots information.\n   */\n  private void persist() throws IOException {\n    writer.deleteAll();\n    Document d = new Document();\n    d.add(new StoredField(SNAPSHOTS_GENS, \"\"));\n    for (Entry<Long,Integer> e : refCounts.entrySet()) {\n      d.add(new StoredField(e.getKey().toString(), e.getValue().toString()));\n    }\n    writer.addDocument(d);\n    writer.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd68bbbc1649a951d15832c9923b1fbd4714d39a","date":1367787970,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","sourceNew":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        try {\n          dir.deleteFile(fileName);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    dir.sync(Collections.singletonList(fileName));\n    \n    if (nextWriteGen > 0) {\n      String lastSaveFile = SNAPSHOTS_PREFIX + (nextWriteGen-1);\n      if (dir.fileExists(lastSaveFile)) {\n        dir.deleteFile(lastSaveFile);\n      }\n    }\n\n    nextWriteGen++;\n  }\n\n","sourceOld":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        try {\n          dir.deleteFile(fileName);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    nextWriteGen++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","sourceNew":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        try {\n          dir.deleteFile(fileName);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    dir.sync(Collections.singletonList(fileName));\n    \n    if (nextWriteGen > 0) {\n      String lastSaveFile = SNAPSHOTS_PREFIX + (nextWriteGen-1);\n      try {\n        dir.deleteFile(lastSaveFile);\n      } catch (IOException ioe) {\n        // OK: likely it didn't exist\n      }\n    }\n\n    nextWriteGen++;\n  }\n\n","sourceOld":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        try {\n          dir.deleteFile(fileName);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    dir.sync(Collections.singletonList(fileName));\n    \n    if (nextWriteGen > 0) {\n      String lastSaveFile = SNAPSHOTS_PREFIX + (nextWriteGen-1);\n      if (dir.fileExists(lastSaveFile)) {\n        dir.deleteFile(lastSaveFile);\n      }\n    }\n\n    nextWriteGen++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy#persist().mjava","sourceNew":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        IOUtils.deleteFilesIgnoringExceptions(dir, fileName);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    dir.sync(Collections.singletonList(fileName));\n    \n    if (nextWriteGen > 0) {\n      String lastSaveFile = SNAPSHOTS_PREFIX + (nextWriteGen-1);\n      // exception OK: likely it didn't exist\n      IOUtils.deleteFilesIgnoringExceptions(dir, lastSaveFile);\n    }\n\n    nextWriteGen++;\n  }\n\n","sourceOld":"  synchronized private void persist() throws IOException {\n    String fileName = SNAPSHOTS_PREFIX + nextWriteGen;\n    IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);   \n      out.writeVInt(refCounts.size());\n      for(Entry<Long,Integer> ent : refCounts.entrySet()) {\n        out.writeVLong(ent.getKey());\n        out.writeVInt(ent.getValue());\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n        try {\n          dir.deleteFile(fileName);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      } else {\n        IOUtils.close(out);\n      }\n    }\n\n    dir.sync(Collections.singletonList(fileName));\n    \n    if (nextWriteGen > 0) {\n      String lastSaveFile = SNAPSHOTS_PREFIX + (nextWriteGen-1);\n      try {\n        dir.deleteFile(lastSaveFile);\n      } catch (IOException ioe) {\n        // OK: likely it didn't exist\n      }\n    }\n\n    nextWriteGen++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dce99db8590cdd065839ae4e6b228b66eeee8f38":["8a207624ce3e468bca1819861084438d936e3b1c"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["bd68bbbc1649a951d15832c9923b1fbd4714d39a"],"bd68bbbc1649a951d15832c9923b1fbd4714d39a":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"8a207624ce3e468bca1819861084438d936e3b1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"]},"commit2Childs":{"dce99db8590cdd065839ae4e6b228b66eeee8f38":["bd68bbbc1649a951d15832c9923b1fbd4714d39a"],"8a207624ce3e468bca1819861084438d936e3b1c":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"bd68bbbc1649a951d15832c9923b1fbd4714d39a":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a207624ce3e468bca1819861084438d936e3b1c"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}