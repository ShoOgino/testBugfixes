{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for TermRangeQueryNode children and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn.getParent() instanceof TermRangeQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for TermRangeQueryNode children and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn.getParent() instanceof TermRangeQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for TermRangeQueryNode children and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn.getParent() instanceof TermRangeQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      \n      if (isWildcard(text)) {\n        Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n        if (analyzer != null) {\n          text = analyzeWildcard(analyzer, fqn.getFieldAsString(), text.toString());\n        }\n        if (isPrefixWildcard(text)) {\n          return new PrefixWildcardQueryNode(fqn.getField(), text, fqn.getBegin(), fqn.getEnd());\n        } else {\n          return new WildcardQueryNode(fqn.getField(), text, fqn.getBegin(), fqn.getEnd());\n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for TermRangeQueryNode children and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn.getParent() instanceof TermRangeQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for TermRangeQueryNode children and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn.getParent() instanceof TermRangeQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      \n      if (isWildcard(text)) {\n        Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n        if (analyzer != null) {\n          text = analyzeWildcard(analyzer, fqn.getFieldAsString(), text.toString());\n        }\n        if (isPrefixWildcard(text)) {\n          return new PrefixWildcardQueryNode(fqn.getField(), text, fqn.getBegin(), fqn.getEnd());\n        } else {\n          return new WildcardQueryNode(fqn.getField(), text, fqn.getBegin(), fqn.getEnd());\n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for TermRangeQueryNode children and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn.getParent() instanceof TermRangeQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}