{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}