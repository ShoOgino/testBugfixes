{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localMakeRequest(SolrCore,String...).mjava","commits":[{"id":"60ea5ab7e7b4b94aba6a057f59cee528a1028b3b","date":1592841746,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localMakeRequest(SolrCore,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Code copied with some adaptations from {@link org.apache.solr.util.TestHarness.LocalRequestFactory#makeRequest(String...)}.\n   */\n  private static LocalSolrQueryRequest localMakeRequest(SolrCore core, String ... q) {\n    if (q.length==1) {\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.VERSION,\"2.2\");\n\n      return new LocalSolrQueryRequest(core, q[0], \"\", 0, 20, args);\n    }\n    if (q.length%2 != 0) {\n      throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map.Entry<String, String> [] entries = new NamedList.NamedListEntry[q.length / 2];\n    for (int i = 0; i < q.length; i += 2) {\n      entries[i/2] = new NamedList.NamedListEntry<>(q[i], q[i+1]);\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList(entries);\n    if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n    return new LocalSolrQueryRequest(core, nl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4a7a466fffe9e3a0edeccbcb80c255cdc9839b","date":1592943670,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localMakeRequest(SolrCore,String...).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localMakeRequest(SolrCore,String...).mjava","sourceNew":"  /**\n   * Code copied with some adaptations from {@link org.apache.solr.util.TestHarness.LocalRequestFactory#makeRequest(String...)}.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private static LocalSolrQueryRequest localMakeRequest(SolrCore core, String ... q) {\n    if (q.length==1) {\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.VERSION,\"2.2\");\n\n      return new LocalSolrQueryRequest(core, q[0], \"\", 0, 20, args);\n    }\n    if (q.length%2 != 0) {\n      throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map.Entry<String, String> [] entries = new NamedList.NamedListEntry[q.length / 2];\n    for (int i = 0; i < q.length; i += 2) {\n      entries[i/2] = new NamedList.NamedListEntry<>(q[i], q[i+1]);\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList(entries);\n    if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n    return new LocalSolrQueryRequest(core, nl);\n  }\n\n","sourceOld":"  /**\n   * Code copied with some adaptations from {@link org.apache.solr.util.TestHarness.LocalRequestFactory#makeRequest(String...)}.\n   */\n  private static LocalSolrQueryRequest localMakeRequest(SolrCore core, String ... q) {\n    if (q.length==1) {\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.VERSION,\"2.2\");\n\n      return new LocalSolrQueryRequest(core, q[0], \"\", 0, 20, args);\n    }\n    if (q.length%2 != 0) {\n      throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map.Entry<String, String> [] entries = new NamedList.NamedListEntry[q.length / 2];\n    for (int i = 0; i < q.length; i += 2) {\n      entries[i/2] = new NamedList.NamedListEntry<>(q[i], q[i+1]);\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList(entries);\n    if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n    return new LocalSolrQueryRequest(core, nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localMakeRequest(SolrCore,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Code copied with some adaptations from {@link org.apache.solr.util.TestHarness.LocalRequestFactory#makeRequest(String...)}.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private static LocalSolrQueryRequest localMakeRequest(SolrCore core, String ... q) {\n    if (q.length==1) {\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.VERSION,\"2.2\");\n\n      return new LocalSolrQueryRequest(core, q[0], \"\", 0, 20, args);\n    }\n    if (q.length%2 != 0) {\n      throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map.Entry<String, String> [] entries = new NamedList.NamedListEntry[q.length / 2];\n    for (int i = 0; i < q.length; i += 2) {\n      entries[i/2] = new NamedList.NamedListEntry<>(q[i], q[i+1]);\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList(entries);\n    if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n    return new LocalSolrQueryRequest(core, nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["6b4a7a466fffe9e3a0edeccbcb80c255cdc9839b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b4a7a466fffe9e3a0edeccbcb80c255cdc9839b":["60ea5ab7e7b4b94aba6a057f59cee528a1028b3b"],"60ea5ab7e7b4b94aba6a057f59cee528a1028b3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ea5ab7e7b4b94aba6a057f59cee528a1028b3b"],"6b4a7a466fffe9e3a0edeccbcb80c255cdc9839b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"60ea5ab7e7b4b94aba6a057f59cee528a1028b3b":["6b4a7a466fffe9e3a0edeccbcb80c255cdc9839b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}