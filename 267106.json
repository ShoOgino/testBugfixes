{"path":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public String init(NamedList config, SolrResourceLoader loader) {\n    super.init(config, loader);\n    indexDir = (String) config.get(INDEX_DIR);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) loader.newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e75a1d96274371d7e4cf859ebf69f72ada2e353","date":1214265552,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","sourceNew":"  public String init(NamedList config, SolrResourceLoader loader) {\n    super.init(config, loader);\n    indexDir = (String) config.get(INDEX_DIR);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = loader.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) loader.newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrResourceLoader loader) {\n    super.init(config, loader);\n    indexDir = (String) config.get(INDEX_DIR);\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) loader.newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d510537f70066395832b2b46e58473c373e8b2","date":1216580762,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","sourceNew":"  public String init(NamedList config, SolrResourceLoader loader) {\n    super.init(config, loader);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = loader.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) loader.newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrResourceLoader loader) {\n    super.init(config, loader);\n    indexDir = (String) config.get(INDEX_DIR);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = loader.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) loader.newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","date":1216996119,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrResourceLoader).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      LOG.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrResourceLoader loader) {\n    super.init(config, loader);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = loader.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    StringDistance sd = null;\n    if (strDistanceName != null) {\n      sd = (StringDistance) loader.newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":["d042843368f0d289e28164525546259d89d6dbb6","d042843368f0d289e28164525546259d89d6dbb6","d042843368f0d289e28164525546259d89d6dbb6","ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b3d510537f70066395832b2b46e58473c373e8b2":["6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["b3d510537f70066395832b2b46e58473c373e8b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75a1d96274371d7e4cf859ebf69f72ada2e353":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"]},"commit2Childs":{"b3d510537f70066395832b2b46e58473c373e8b2":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":[],"6e75a1d96274371d7e4cf859ebf69f72ada2e353":["b3d510537f70066395832b2b46e58473c373e8b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}