{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: \" + configFileName);\n\n    Config cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new Config(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new Config(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: \" + configFileName);\n\n    Config cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new Config(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new Config(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: \" + configFileName);\n\n    Config cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new Config(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new Config(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","sourceNew":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: \" + configFileName);\n\n    XmlConfigFile cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new XmlConfigFile(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new XmlConfigFile(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","sourceOld":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: \" + configFileName);\n\n    Config cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new Config(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new Config(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(SolrCore).mjava","sourceNew":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: {}\", configFileName);\n\n    XmlConfigFile cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new XmlConfigFile(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new XmlConfigFile(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","sourceOld":"  /**\n   * Loads the {@link ElevationProvider} from the data dir.\n   *\n   * @return The loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  private ElevationProvider loadElevationProvider(SolrCore core) throws IOException, SAXException, ParserConfigurationException {\n    String configFileName = initArgs.get(CONFIG_FILE);\n    if (configFileName == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"QueryElevationComponent must specify argument: \" + CONFIG_FILE);\n    }\n    log.info(\"Loading QueryElevation from data dir: \" + configFileName);\n\n    XmlConfigFile cfg;\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      cfg = new XmlConfigFile(core.getResourceLoader(), configFileName, null, null);\n    } else {\n      InputStream is = VersionedFile.getLatestFile(core.getDataDir(), configFileName);\n      cfg = new XmlConfigFile(core.getResourceLoader(), configFileName, new InputSource(is), null);\n    }\n    ElevationProvider elevationProvider = loadElevationProvider(cfg);\n    assert elevationProvider != null;\n    return elevationProvider;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["2ad458affd82a1d762eb506003907d9363a333cb"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["575e66bd4b2349209027f6801184da7fc3cba13f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["ee622110ba6021d0390037e77574743c1e55348c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}