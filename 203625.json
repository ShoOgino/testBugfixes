{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null, null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"id\"));\n    fields.add(createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = createMap(\"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", createMap(\"id\", 1));\n    Context context = getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(createMap(\"id\", 1, \"desc\", \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null, null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    assertEquals(2, rows.size());\n    assertEquals(2, rows.get(0).size());\n    assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baf341ad3a1a8fb73fb37091af85f8aef0398367"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}