{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (int index=0;index < docs.length; index++) {\n        final int docId = docs[index];\n        if (docId >= docBase && docId < limit) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (int index=0;index < docs.length; index++) {\n        final int docId = docs[index];\n        if (docId >= docBase && docId < limit) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null : new FixedBitDocIdSet(set);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (int index=0;index < docs.length; index++) {\n        final int docId = docs[index];\n        if (docId >= docBase && docId < limit) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null:set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (int index=0;index < docs.length; index++) {\n        final int docId = docs[index];\n        if (docId >= docBase && docId < limit) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null : new BitDocIdSet(set);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (int index=0;index < docs.length; index++) {\n        final int docId = docs[index];\n        if (docId >= docBase && docId < limit) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null : new FixedBitDocIdSet(set);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch.SimpleDocIdSetFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n      assertNull(\"acceptDocs should be null, as we have an index without deletions\", acceptDocs);\n      final FixedBitSet set = new FixedBitSet(context.reader().maxDoc());\n      int docBase = context.docBase;\n      final int limit = docBase+context.reader().maxDoc();\n      for (int index=0;index < docs.length; index++) {\n        final int docId = docs[index];\n        if (docId >= docBase && docId < limit) {\n          set.set(docId-docBase);\n        }\n      }\n      return set.cardinality() == 0 ? null : new BitDocIdSet(set);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["1db68e96dd908fcd79ef809095822736aa601d08"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}