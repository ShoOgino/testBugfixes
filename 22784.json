{"path":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"cd601dcb2e94bd4cc97a3f603ab1c65b480a0be3","date":1407434411,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \" \");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new BooleanQuery();//Matches nothing.\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          BytesRef term = new BytesRef();\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term;\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4861e30a499100f61274a97de931c33fe3ea1b0","date":1407450280,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new BooleanQuery();//Matches nothing.\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          BytesRef term = new BytesRef();\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term;\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \" \");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new BooleanQuery();//Matches nothing.\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          BytesRef term = new BytesRef();\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term;\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new BooleanQuery();//Matches nothing.\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new BooleanQuery();//Matches nothing.\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          BytesRef term = new BytesRef();\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term;\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":["cd601dcb2e94bd4cc97a3f603ab1c65b480a0be3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new BooleanQuery();//Matches nothing.\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ddef54907d52d0079217460aacd73c5d3bb1d39","date":1527887541,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return new SolrConstantScoreQuery(method.makeFilter(fname, bytesRefs));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32b832a37c116a61a7e58893eb45eb8c940cc0f","date":1578915801,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldType(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldType(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldTypeNoEx(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new IllegalArgumentException(\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d83e1c737017d2a25777c53b0cc9cb4a398273","date":1592434968,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        if (fname == null || fname.isEmpty()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing field to query\");\n        }\n        FieldType ft = req.getSchema().getFieldType(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fname = localParams.get(QueryParsing.F);\n        FieldType ft = req.getSchema().getFieldType(fname);\n        String separator = localParams.get(SEPARATOR, \",\");\n        String qstr = localParams.get(QueryParsing.V);//never null\n        Method method = Method.valueOf(localParams.get(METHOD, Method.termsFilter.name()));\n        //TODO pick the default method based on various heuristics from benchmarks\n        //TODO pick the default using FieldType.getSetQuery\n\n        //if space then split on all whitespace & trim, otherwise strictly interpret\n        final boolean sepIsSpace = separator.equals(\" \");\n        if (sepIsSpace)\n          qstr = qstr.trim();\n        if (qstr.length() == 0)\n          return new MatchNoDocsQuery();\n        final String[] splitVals = sepIsSpace ? qstr.split(\"\\\\s+\") : qstr.split(Pattern.quote(separator), -1);\n        assert splitVals.length > 0;\n        \n        if (ft.isPointField()) {\n          if (localParams.get(METHOD) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                String.format(Locale.ROOT, \"Method '%s' not supported in TermsQParser when using PointFields\", localParams.get(METHOD)));\n          }\n          return ((PointField)ft).getSetQuery(this, req.getSchema().getField(fname), Arrays.asList(splitVals));\n        }\n\n        BytesRef[] bytesRefs = new BytesRef[splitVals.length];\n        BytesRefBuilder term = new BytesRefBuilder();\n        for (int i = 0; i < splitVals.length; i++) {\n          String stringVal = splitVals[i];\n          //logic same as TermQParserPlugin\n          if (ft != null) {\n            ft.readableToIndexed(stringVal, term);\n          } else {\n            term.copyChars(stringVal);\n          }\n          bytesRefs[i] = term.toBytesRef();\n        }\n\n        return method.makeFilter(fname, bytesRefs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19d83e1c737017d2a25777c53b0cc9cb4a398273":["a32b832a37c116a61a7e58893eb45eb8c940cc0f"],"46dc9ac8b3e748407baaef82453138ff3974480c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a32b832a37c116a61a7e58893eb45eb8c940cc0f":["4ddef54907d52d0079217460aacd73c5d3bb1d39"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f4861e30a499100f61274a97de931c33fe3ea1b0"],"f4861e30a499100f61274a97de931c33fe3ea1b0":["cd601dcb2e94bd4cc97a3f603ab1c65b480a0be3"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","46dc9ac8b3e748407baaef82453138ff3974480c"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["46dc9ac8b3e748407baaef82453138ff3974480c"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd601dcb2e94bd4cc97a3f603ab1c65b480a0be3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["46dc9ac8b3e748407baaef82453138ff3974480c","4ddef54907d52d0079217460aacd73c5d3bb1d39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19d83e1c737017d2a25777c53b0cc9cb4a398273"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["4ddef54907d52d0079217460aacd73c5d3bb1d39","a32b832a37c116a61a7e58893eb45eb8c940cc0f"]},"commit2Childs":{"19d83e1c737017d2a25777c53b0cc9cb4a398273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","4ddef54907d52d0079217460aacd73c5d3bb1d39","b70042a8a492f7054d480ccdd2be9796510d4327"],"a32b832a37c116a61a7e58893eb45eb8c940cc0f":["19d83e1c737017d2a25777c53b0cc9cb4a398273","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f4861e30a499100f61274a97de931c33fe3ea1b0":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["a32b832a37c116a61a7e58893eb45eb8c940cc0f","b70042a8a492f7054d480ccdd2be9796510d4327","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"cd601dcb2e94bd4cc97a3f603ab1c65b480a0be3":["f4861e30a499100f61274a97de931c33fe3ea1b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd601dcb2e94bd4cc97a3f603ab1c65b480a0be3"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}