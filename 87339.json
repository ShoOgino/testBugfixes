{"path":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#[T-extends-Comparable[T]]_test(T,T,Converter).mjava","commits":[{"id":"4916a60d95bb3cb5d443ebf7b0207efff56fc4aa","date":1347957056,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#[T-extends-Comparable[T]]_test(T,T,Converter).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#test(Comparable,Comparable,Converter).mjava","sourceNew":"  public static <T extends Comparable<T>> void test(T n1, T n2, Converter conv) {\n    String s1=n1.toString();\n    String s2=n2.toString();\n    String v1 = conv.toInternal(s1);\n    String v2 = conv.toInternal(s2);\n    String out1=conv.toExternal(v1);\n    String out2=conv.toExternal(v2);\n\n    Assert.assertEquals(conv + \" :: n1 :: input!=output\", s1, out1);\n    Assert.assertEquals(conv + \" :: n2 :: input!=output\", s2, out2);\n    \n    int c1 = n1.compareTo(n2);\n    int c2 = v1.compareTo(v2);\n\n    Assert.assertFalse( (c1==0 && !(c2==0)) );\n//    Assert.assertFalse( c1 < 0 && !(c2<0) );\n//    Assert.assertFalse( c1 > 0 && !(c2>0) );\n//    \n    //    if (c1==0 && !(c2==0) \n//    || c1 < 0 && !(c2<0) \n//    || c1 > 0 && !(c2>0)\n//    || !out1.equals(s1) || !out2.equals(s2))\n//    {\n//      Assert.fail(\"Comparison error:\"+s1+\",\"+s2 + \" :: \" + conv);\n//      System.out.print(\"v1=\");\n//      for (int ii=0; ii<v1.length(); ii++) {\n//        System.out.print(\" \" + (int)v1.charAt(ii));\n//      }\n//      System.out.print(\"\\nv2=\");\n//      for (int ii=0; ii<v2.length(); ii++) {\n//        System.out.print(\" \" + (int)v2.charAt(ii));\n//      }\n//      System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n//    }\n  }\n\n","sourceOld":"  public static void test(Comparable n1, Comparable n2, Converter conv) {\n    String s1=n1.toString();\n    String s2=n2.toString();\n    String v1 = conv.toInternal(s1);\n    String v2 = conv.toInternal(s2);\n    String out1=conv.toExternal(v1);\n    String out2=conv.toExternal(v2);\n\n    Assert.assertEquals(conv + \" :: n1 :: input!=output\", s1, out1);\n    Assert.assertEquals(conv + \" :: n2 :: input!=output\", s2, out2);\n    \n    int c1 = n1.compareTo(n2);\n    int c2 = v1.compareTo(v2);\n\n    Assert.assertFalse( (c1==0 && !(c2==0)) );\n//    Assert.assertFalse( c1 < 0 && !(c2<0) );\n//    Assert.assertFalse( c1 > 0 && !(c2>0) );\n//    \n    //    if (c1==0 && !(c2==0) \n//    || c1 < 0 && !(c2<0) \n//    || c1 > 0 && !(c2>0)\n//    || !out1.equals(s1) || !out2.equals(s2))\n//    {\n//      Assert.fail(\"Comparison error:\"+s1+\",\"+s2 + \" :: \" + conv);\n//      System.out.print(\"v1=\");\n//      for (int ii=0; ii<v1.length(); ii++) {\n//        System.out.print(\" \" + (int)v1.charAt(ii));\n//      }\n//      System.out.print(\"\\nv2=\");\n//      for (int ii=0; ii<v2.length(); ii++) {\n//        System.out.print(\" \" + (int)v2.charAt(ii));\n//      }\n//      System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#[T-extends-Comparable[T]]_test(T,T,Converter).mjava","sourceNew":null,"sourceOld":"  public static <T extends Comparable<T>> void test(T n1, T n2, Converter conv) {\n    String s1=n1.toString();\n    String s2=n2.toString();\n    String v1 = conv.toInternal(s1);\n    String v2 = conv.toInternal(s2);\n    String out1=conv.toExternal(v1);\n    String out2=conv.toExternal(v2);\n\n    Assert.assertEquals(conv + \" :: n1 :: input!=output\", s1, out1);\n    Assert.assertEquals(conv + \" :: n2 :: input!=output\", s2, out2);\n    \n    int c1 = n1.compareTo(n2);\n    int c2 = v1.compareTo(v2);\n\n    Assert.assertFalse( (c1==0 && !(c2==0)) );\n//    Assert.assertFalse( c1 < 0 && !(c2<0) );\n//    Assert.assertFalse( c1 > 0 && !(c2>0) );\n//    \n    //    if (c1==0 && !(c2==0) \n//    || c1 < 0 && !(c2<0) \n//    || c1 > 0 && !(c2>0)\n//    || !out1.equals(s1) || !out2.equals(s2))\n//    {\n//      Assert.fail(\"Comparison error:\"+s1+\",\"+s2 + \" :: \" + conv);\n//      System.out.print(\"v1=\");\n//      for (int ii=0; ii<v1.length(); ii++) {\n//        System.out.print(\" \" + (int)v1.charAt(ii));\n//      }\n//      System.out.print(\"\\nv2=\");\n//      for (int ii=0; ii<v2.length(); ii++) {\n//        System.out.print(\" \" + (int)v2.charAt(ii));\n//      }\n//      System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4916a60d95bb3cb5d443ebf7b0207efff56fc4aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["4916a60d95bb3cb5d443ebf7b0207efff56fc4aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"4916a60d95bb3cb5d443ebf7b0207efff56fc4aa":["2106271e380c198349e0f6eac0395bb462913fab"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4916a60d95bb3cb5d443ebf7b0207efff56fc4aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}