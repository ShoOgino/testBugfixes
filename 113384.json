{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/BottomFunctionTest#multipleSingleValueDateTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/BottomFunctionTest#multipleSingleValueDateTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void multipleSingleValueDateTest() throws DateTimeParseException {\n    TestDateValue val1 = new TestDateValue();\n    TestDateValue val2 = new TestDateValue();\n    TestDateValue val3 = new TestDateValue();\n    TestDateValue val4 = new TestDateValue();\n    \n    AnalyticsValueStream uncasted = BottomFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2, val3, val4});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // None exist\n    val1.setExists(false);\n    val2.setExists(false);\n    val3.setExists(false);\n    val4.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    \n    // Some exist\n    val1.setValue(\"9999-05-03T10:30:50Z\").setExists(false);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"0000-05-03T10:30:50Z\").setExists(false);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1850-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n    \n    // All exist values, one value\n    val1.setValue(\"2200-05-03T10:30:50Z\").setExists(true);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"1700-05-03T10:30:50Z\").setExists(true);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1700-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/BottomFunctionTest#multipleSingleValueDateTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/BottomFunctionTest#multipleSingleValueDateTest().mjava","sourceNew":"  @Test\n  public void multipleSingleValueDateTest() throws DateTimeParseException {\n    TestDateValue val1 = new TestDateValue();\n    TestDateValue val2 = new TestDateValue();\n    TestDateValue val3 = new TestDateValue();\n    TestDateValue val4 = new TestDateValue();\n\n    AnalyticsValueStream uncasted = BottomFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2, val3, val4});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // None exist\n    val1.setExists(false);\n    val2.setExists(false);\n    val3.setExists(false);\n    val4.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n\n    // Some exist\n    val1.setValue(\"9999-05-03T10:30:50Z\").setExists(false);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"0000-05-03T10:30:50Z\").setExists(false);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1850-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n\n    // All exist values, one value\n    val1.setValue(\"2200-05-03T10:30:50Z\").setExists(true);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"1700-05-03T10:30:50Z\").setExists(true);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1700-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n  }\n\n","sourceOld":"  @Test\n  public void multipleSingleValueDateTest() throws DateTimeParseException {\n    TestDateValue val1 = new TestDateValue();\n    TestDateValue val2 = new TestDateValue();\n    TestDateValue val3 = new TestDateValue();\n    TestDateValue val4 = new TestDateValue();\n    \n    AnalyticsValueStream uncasted = BottomFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2, val3, val4});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // None exist\n    val1.setExists(false);\n    val2.setExists(false);\n    val3.setExists(false);\n    val4.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    \n    // Some exist\n    val1.setValue(\"9999-05-03T10:30:50Z\").setExists(false);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"0000-05-03T10:30:50Z\").setExists(false);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1850-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n    \n    // All exist values, one value\n    val1.setValue(\"2200-05-03T10:30:50Z\").setExists(true);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"1700-05-03T10:30:50Z\").setExists(true);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1700-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/BottomFunctionTest#multipleSingleValueDateTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/BottomFunctionTest#multipleSingleValueDateTest().mjava","sourceNew":"  @Test\n  public void multipleSingleValueDateTest() throws DateTimeParseException {\n    TestDateValue val1 = new TestDateValue();\n    TestDateValue val2 = new TestDateValue();\n    TestDateValue val3 = new TestDateValue();\n    TestDateValue val4 = new TestDateValue();\n\n    AnalyticsValueStream uncasted = BottomFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2, val3, val4});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // None exist\n    val1.setExists(false);\n    val2.setExists(false);\n    val3.setExists(false);\n    val4.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n\n    // Some exist\n    val1.setValue(\"9999-05-03T10:30:50Z\").setExists(false);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"0000-05-03T10:30:50Z\").setExists(false);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1850-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n\n    // All exist values, one value\n    val1.setValue(\"2200-05-03T10:30:50Z\").setExists(true);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"1700-05-03T10:30:50Z\").setExists(true);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1700-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n  }\n\n","sourceOld":"  @Test\n  public void multipleSingleValueDateTest() throws DateTimeParseException {\n    TestDateValue val1 = new TestDateValue();\n    TestDateValue val2 = new TestDateValue();\n    TestDateValue val3 = new TestDateValue();\n    TestDateValue val4 = new TestDateValue();\n    \n    AnalyticsValueStream uncasted = BottomFunction.creatorFunction.apply(new AnalyticsValueStream[] {val1, val2, val3, val4});\n    assertTrue(uncasted instanceof DateValue);\n    DateValue func = (DateValue) uncasted;\n\n    // None exist\n    val1.setExists(false);\n    val2.setExists(false);\n    val3.setExists(false);\n    val4.setExists(false);\n    func.getDate();\n    assertFalse(func.exists());\n    \n    // Some exist\n    val1.setValue(\"9999-05-03T10:30:50Z\").setExists(false);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"0000-05-03T10:30:50Z\").setExists(false);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1850-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n    \n    // All exist values, one value\n    val1.setValue(\"2200-05-03T10:30:50Z\").setExists(true);\n    val2.setValue(\"1950-05-03T10:30:50Z\").setExists(true);\n    val3.setValue(\"1700-05-03T10:30:50Z\").setExists(true);\n    val4.setValue(\"1850-05-03T10:30:50Z\").setExists(true);\n    assertEquals(Date.from(Instant.parse(\"1700-05-03T10:30:50Z\")), func.getDate());\n    assertTrue(func.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}