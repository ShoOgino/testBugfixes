{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e818a930274c36c14447e50ba474ebf7c8d27f73","date":1336312324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee20bfa64726b0bbcfacbb60bfe6260aa57e38b","date":1337521293,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 10) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b512a6470fbb93c320e0cc8519ec0fe94efa13e","date":1337522360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 10) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b636b51c2311557a2700f6e08c6b66c56e2ded","date":1348952362,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 1000) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 10) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090","date":1349125657,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (rateLimiter != null && len >= 1000) {\n      rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 1000) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a37269f7ae6b4e61f0bfa661c642ad751e05c8","date":1349391311,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 1000) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (rateLimiter != null && len >= 1000) {\n      rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 1000) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    if (dir.rateLimiter != null && len >= 1000) {\n      dir.rateLimiter.pause(len);\n    }\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e","date":1367905455,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    checkCrashed();\n    checkDiskFull(b, offset, null, len);\n    \n    if (dir.randomState.nextInt(200) == 0) {\n      final int half = len/2;\n      delegate.writeBytes(b, offset, half);\n      Thread.yield();\n      delegate.writeBytes(b, offset+half, len-half);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextInt(200) == 0) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f35b6636d641ec7fe9d7e9dbb0a443d47bdf784a","date":1419273748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    ensureOpen();\n    checkCrashed();\n    checkDiskFull(b, offset, null, len);\n    \n    if (dir.randomState.nextInt(200) == 0) {\n      final int half = len/2;\n      delegate.writeBytes(b, offset, half);\n      Thread.yield();\n      delegate.writeBytes(b, offset+half, len-half);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    checkCrashed();\n    checkDiskFull(b, offset, null, len);\n    \n    if (dir.randomState.nextInt(200) == 0) {\n      final int half = len/2;\n      delegate.writeBytes(b, offset, half);\n      Thread.yield();\n      delegate.writeBytes(b, offset+half, len-half);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f35b6636d641ec7fe9d7e9dbb0a443d47bdf784a":["7ffaf83ebe420f1af7578f7a9e9d079c184edd3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eee20bfa64726b0bbcfacbb60bfe6260aa57e38b":["e818a930274c36c14447e50ba474ebf7c8d27f73"],"407687e67faf6e1f02a211ca078d8e3eed631027":["09a37269f7ae6b4e61f0bfa661c642ad751e05c8","e4583d4aac44f313f9af74ab6d81baab3f976232"],"11b636b51c2311557a2700f6e08c6b66c56e2ded":["eee20bfa64726b0bbcfacbb60bfe6260aa57e38b"],"e818a930274c36c14447e50ba474ebf7c8d27f73":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["09a37269f7ae6b4e61f0bfa661c642ad751e05c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09a37269f7ae6b4e61f0bfa661c642ad751e05c8":["e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090"],"e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090":["11b636b51c2311557a2700f6e08c6b66c56e2ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f35b6636d641ec7fe9d7e9dbb0a443d47bdf784a"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["e818a930274c36c14447e50ba474ebf7c8d27f73"]},"commit2Childs":{"f35b6636d641ec7fe9d7e9dbb0a443d47bdf784a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e818a930274c36c14447e50ba474ebf7c8d27f73"],"eee20bfa64726b0bbcfacbb60bfe6260aa57e38b":["11b636b51c2311557a2700f6e08c6b66c56e2ded"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"11b636b51c2311557a2700f6e08c6b66c56e2ded":["e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090"],"e818a930274c36c14447e50ba474ebf7c8d27f73":["eee20bfa64726b0bbcfacbb60bfe6260aa57e38b","4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e":["f35b6636d641ec7fe9d7e9dbb0a443d47bdf784a"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["407687e67faf6e1f02a211ca078d8e3eed631027","7ffaf83ebe420f1af7578f7a9e9d079c184edd3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"09a37269f7ae6b4e61f0bfa661c642ad751e05c8":["407687e67faf6e1f02a211ca078d8e3eed631027","e4583d4aac44f313f9af74ab6d81baab3f976232"],"e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090":["09a37269f7ae6b4e61f0bfa661c642ad751e05c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817","4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}