{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random.nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random.nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random.nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.shutdown();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.shutdown();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.shutdown();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.shutdown();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd","date":1417101195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.search(q, 10).totalHits;\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      sum += searcher.search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.search(q, 10).totalHits.value;\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits.value;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.search(q, 10).totalHits;\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f","date":1533501662,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.count(q);\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.count(q);\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.search(q, 10).totalHits.value;\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.search(q, 10).totalHits.value;\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b1c36f6a4fc8ec7499ba72d55df633f821d6bc","date":1588915116,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy(2));\n    if (TEST_NIGHTLY) {\n      // if we have a ton of iterations we need to make sure we don't do unnecessary\n      // extra flushing otherwise we will timeout on nightly\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    }\n    final IndexWriter writer = new IndexWriter(\n        dir1,iwc);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.count(q);\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.count(q);\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    DirectoryReader r = writer.getReader();\n\n    final int iters = TEST_NIGHTLY ? 1000 : 10;\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    final AtomicInteger remainingThreads = new AtomicInteger(numThreads);\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          final Random r = new Random(random().nextLong());\n\n          @Override\n          public void run() {\n            int count = 0;\n            do {\n              try {\n                for(int docUpto=0;docUpto<10;docUpto++) {\n                  writer.addDocument(DocHelper.createDocument(10*count+docUpto, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int delUpto=0;delUpto<5;delUpto++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(count < iters);\n            remainingThreads.decrementAndGet();\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(remainingThreads.get() > 0) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n        Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n        IndexSearcher searcher = newSearcher(r);\n        sum += searcher.count(q);\n      }\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    sum += searcher.count(q);\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b1c36f6a4fc8ec7499ba72d55df633f821d6bc":["d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b1c36f6a4fc8ec7499ba72d55df633f821d6bc"]},"commit2Childs":{"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f":["f0b1c36f6a4fc8ec7499ba72d55df633f821d6bc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f0b1c36f6a4fc8ec7499ba72d55df633f821d6bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}