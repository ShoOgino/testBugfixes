{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/XLSXResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"056868364d4e4a9ab9351ae5cc55e0506fe19769","date":1473148338,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/XLSXResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(OutputStream out, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    // throw away arraywriter just to satisfy super requirements; we're grabbing\n    // all writes before they go to it anyway\n    XLSXWriter w = new XLSXWriter(new CharArrayWriter(), req, rsp);\n\n    LinkedHashMap<String,String> reqNamesMap = new LinkedHashMap<>();\n    LinkedHashMap<String,Integer> reqWidthsMap = new LinkedHashMap<>();\n\n    Iterator<String> paramNamesIter = req.getParams().getParameterNamesIterator();\n    while (paramNamesIter.hasNext()) {\n      String nextParam = paramNamesIter.next();\n      if (nextParam.startsWith(\"colname.\")) {\n        String field = nextParam.substring(\"colname.\".length());\n        reqNamesMap.put(field, req.getParams().get(nextParam));\n      } else if (nextParam.startsWith(\"colwidth.\")) {\n        String field = nextParam.substring(\"colwidth.\".length());\n        reqWidthsMap.put(field, req.getParams().getInt(nextParam));\n      }\n    }\n\n    try {\n      w.writeResponse(out, reqNamesMap, reqWidthsMap);\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/XLSXResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(OutputStream out, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    // throw away arraywriter just to satisfy super requirements; we're grabbing\n    // all writes before they go to it anyway\n    XLSXWriter w = new XLSXWriter(new CharArrayWriter(), req, rsp);\n\n    LinkedHashMap<String,String> reqNamesMap = new LinkedHashMap<>();\n    LinkedHashMap<String,Integer> reqWidthsMap = new LinkedHashMap<>();\n\n    Iterator<String> paramNamesIter = req.getParams().getParameterNamesIterator();\n    while (paramNamesIter.hasNext()) {\n      String nextParam = paramNamesIter.next();\n      if (nextParam.startsWith(\"colname.\")) {\n        String field = nextParam.substring(\"colname.\".length());\n        reqNamesMap.put(field, req.getParams().get(nextParam));\n      } else if (nextParam.startsWith(\"colwidth.\")) {\n        String field = nextParam.substring(\"colwidth.\".length());\n        reqWidthsMap.put(field, req.getParams().getInt(nextParam));\n      }\n    }\n\n    try {\n      w.writeResponse(out, reqNamesMap, reqWidthsMap);\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/XLSXResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(OutputStream out, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    // throw away arraywriter just to satisfy super requirements; we're grabbing\n    // all writes before they go to it anyway\n    XLSXWriter w = new XLSXWriter(new CharArrayWriter(), req, rsp);\n\n    LinkedHashMap<String,String> reqNamesMap = new LinkedHashMap<>();\n    LinkedHashMap<String,Integer> reqWidthsMap = new LinkedHashMap<>();\n\n    Iterator<String> paramNamesIter = req.getParams().getParameterNamesIterator();\n    while (paramNamesIter.hasNext()) {\n      String nextParam = paramNamesIter.next();\n      if (nextParam.startsWith(\"colname.\")) {\n        String field = nextParam.substring(\"colname.\".length());\n        reqNamesMap.put(field, req.getParams().get(nextParam));\n      } else if (nextParam.startsWith(\"colwidth.\")) {\n        String field = nextParam.substring(\"colwidth.\".length());\n        reqWidthsMap.put(field, req.getParams().getInt(nextParam));\n      }\n    }\n\n    try {\n      w.writeResponse(out, reqNamesMap, reqWidthsMap);\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/XLSXResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(OutputStream out, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    // throw away arraywriter just to satisfy super requirements; we're grabbing\n    // all writes before they go to it anyway\n    XLSXWriter w = new XLSXWriter(new CharArrayWriter(), req, rsp);\n\n    LinkedHashMap<String,String> reqNamesMap = new LinkedHashMap<>();\n    LinkedHashMap<String,Integer> reqWidthsMap = new LinkedHashMap<>();\n\n    Iterator<String> paramNamesIter = req.getParams().getParameterNamesIterator();\n    while (paramNamesIter.hasNext()) {\n      String nextParam = paramNamesIter.next();\n      if (nextParam.startsWith(\"colname.\")) {\n        String field = nextParam.substring(\"colname.\".length());\n        reqNamesMap.put(field, req.getParams().get(nextParam));\n      } else if (nextParam.startsWith(\"colwidth.\")) {\n        String field = nextParam.substring(\"colwidth.\".length());\n        reqWidthsMap.put(field, req.getParams().getInt(nextParam));\n      }\n    }\n\n    try {\n      w.writeResponse(out, reqNamesMap, reqWidthsMap);\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"056868364d4e4a9ab9351ae5cc55e0506fe19769":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","056868364d4e4a9ab9351ae5cc55e0506fe19769"]},"commit2Childs":{"056868364d4e4a9ab9351ae5cc55e0506fe19769":["89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["056868364d4e4a9ab9351ae5cc55e0506fe19769","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}