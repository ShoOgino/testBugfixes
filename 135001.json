{"path":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // heap sort\n  void slowSelect(int from, int to, int k) {\n    new Sorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        IntroSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return IntroSelector.this.compare(i, j);\n      }\n\n      public void sort(int from, int to) {\n        heapSort(from, to);\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","sourceNew":"  // heap sort\n  // TODO: use median of median instead to have linear worst-case rather than\n  // n*log(n)\n  void slowSelect(int from, int to, int k) {\n    new Sorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        IntroSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return IntroSelector.this.compare(i, j);\n      }\n\n      public void sort(int from, int to) {\n        heapSort(from, to);\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  // heap sort\n  void slowSelect(int from, int to, int k) {\n    new Sorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        IntroSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return IntroSelector.this.compare(i, j);\n      }\n\n      public void sort(int from, int to) {\n        heapSort(from, to);\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // heap sort\n  // TODO: use median of median instead to have linear worst-case rather than\n  // n*log(n)\n  void slowSelect(int from, int to, int k) {\n    new Sorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        IntroSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return IntroSelector.this.compare(i, j);\n      }\n\n      public void sort(int from, int to) {\n        heapSort(from, to);\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // heap sort\n  // TODO: use median of median instead to have linear worst-case rather than\n  // n*log(n)\n  void slowSelect(int from, int to, int k) {\n    new Sorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        IntroSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return IntroSelector.this.compare(i, j);\n      }\n\n      public void sort(int from, int to) {\n        heapSort(from, to);\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1350151a7fc1433e7de0bed0bc180ad4d850c7e","date":1572337312,"type":3,"author":"Paul Sanwald","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntroSelector#slowSelect(int,int,int).mjava","sourceNew":"  int slowSelect(int from, int to, int k) {\n    return medianOfMediansSelect(from, to-1, k);\n  }\n\n","sourceOld":"  // heap sort\n  // TODO: use median of median instead to have linear worst-case rather than\n  // n*log(n)\n  void slowSelect(int from, int to, int k) {\n    new Sorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        IntroSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return IntroSelector.this.compare(i, j);\n      }\n\n      public void sort(int from, int to) {\n        heapSort(from, to);\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1350151a7fc1433e7de0bed0bc180ad4d850c7e":["a20457919db052812998f60294d17daa883ff972"],"a20457919db052812998f60294d17daa883ff972":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1350151a7fc1433e7de0bed0bc180ad4d850c7e"]},"commit2Childs":{"e1350151a7fc1433e7de0bed0bc180ad4d850c7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a20457919db052812998f60294d17daa883ff972":["e1350151a7fc1433e7de0bed0bc180ad4d850c7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a20457919db052812998f60294d17daa883ff972"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}