{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery#SlowCollatedTermRangeQuery(String,String,String,boolean,boolean,Collator).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery#SlowCollatedTermRangeQuery(String,String,String,boolean,boolean,Collator).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery#SlowCollatedTermRangeQuery(String,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /** Constructs a query selecting all terms greater/equal than\n   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.\n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * <p>\n   *\n   * @param lowerTerm The Term text at the lower end of the range\n   * @param upperTerm The Term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeQuery(String field, String lowerTerm, String upperTerm, \n      boolean includeLower, boolean includeUpper,  Collator collator) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.collator = collator;\n  }\n\n","sourceOld":"  /** Constructs a query selecting all terms greater/equal than\n   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.\n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * <p>\n   *\n   * @param lowerTerm The Term text at the lower end of the range\n   * @param upperTerm The Term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeQuery(String field, String lowerTerm, String upperTerm, \n      boolean includeLower, boolean includeUpper,  Collator collator) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.collator = collator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery#SlowCollatedTermRangeQuery(String,String,String,boolean,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /** Constructs a query selecting all terms greater/equal than\n   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.\n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * <p>\n   *\n   * @param lowerTerm The Term text at the lower end of the range\n   * @param upperTerm The Term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public SlowCollatedTermRangeQuery(String field, String lowerTerm, String upperTerm, \n      boolean includeLower, boolean includeUpper,  Collator collator) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.collator = collator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}