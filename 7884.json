{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","sourceOld":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","sourceOld":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}