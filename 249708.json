{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFullWithThreads().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void xxxtestImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void xxxtestImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}