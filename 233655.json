{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get all the rows from the the datasource for the given query. Only used by\n   * cache implementations.\n   * <p/>\n   * This <b>must</b> be implemented by sub-classes which intend to provide a\n   * cached implementation\n   *\n   * @return\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1","date":1217855899,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","sourceNew":"  /**\n   * <p>\n   * Get all the rows from the the datasource for the given query. Only used by\n   * cache implementations.\n   * </p>\n   * This <b>must</b> be implemented by sub-classes which intend to provide a\n   * cached implementation\n   *\n   * @return the list of all rows fetched from the datasource.\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","sourceOld":"  /**\n   * Get all the rows from the the datasource for the given query. Only used by\n   * cache implementations.\n   * <p/>\n   * This <b>must</b> be implemented by sub-classes which intend to provide a\n   * cached implementation\n   *\n   * @return\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","sourceNew":"  /**\n   * <p> Get all the rows from the the datasource for the given query. Only used by cache implementations. </p> This\n   * <b>must</b> be implemented by sub-classes which intend to provide a cached implementation\n   *\n   * @return the list of all rows fetched from the datasource.\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Get all the rows from the the datasource for the given query. Only used by\n   * cache implementations.\n   * </p>\n   * This <b>must</b> be implemented by sub-classes which intend to provide a\n   * cached implementation\n   *\n   * @return the list of all rows fetched from the datasource.\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getAllNonCachedRows().mjava","sourceNew":"  /**\n   * <p> Get all the rows from the the datasource for the given query. Only used by cache implementations. </p> This\n   * <b>must</b> be implemented by sub-classes which intend to provide a cached implementation\n   *\n   * @return the list of all rows fetched from the datasource.\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","sourceOld":"  /**\n   * <p> Get all the rows from the the datasource for the given query. Only used by cache implementations. </p> This\n   * <b>must</b> be implemented by sub-classes which intend to provide a cached implementation\n   *\n   * @return the list of all rows fetched from the datasource.\n   */\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    return Collections.EMPTY_LIST;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["ad94625fb8d088209f46650c8097196fec67f00c"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}