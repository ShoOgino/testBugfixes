{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(String,Counter,Predicate[CharSequence],boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(String,Counter,Predicate[CharSequence],boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(String,Counter,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Counter}\n   * @param counter counter instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param compact if true then only return {@link Counter#getCount()}. If false\n   *                then return a map with a \"count\" field.\n   */\n  static void convertCounter(String name, Counter counter, Predicate<CharSequence> propertyFilter, boolean compact, BiConsumer<String, Object> consumer) {\n    if (compact) {\n      consumer.accept(name, counter.getCount());\n    } else {\n      if (propertyFilter.test(\"count\")) {\n        consumer.accept(name, (MapWriter) ew -> ew.putNoEx(\"count\", counter.getCount()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Counter}\n   * @param counter counter instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param compact if true then only return {@link Counter#getCount()}. If false\n   *                then return a map with a \"count\" field.\n   */\n  static void convertCounter(String name, Counter counter, PropertyFilter propertyFilter, boolean compact, BiConsumer<String, Object> consumer) {\n    if (compact) {\n      consumer.accept(name, counter.getCount());\n    } else {\n      if (propertyFilter.accept(\"count\")) {\n        Map<String, Object> response = new LinkedHashMap<>();\n        response.put(\"count\", counter.getCount());\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}