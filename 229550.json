{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","commits":[{"id":"6e619491f96eb1c2c64d9f8134326816b0bcd2e4","date":1395198663,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    for (int i = jettys.size() - 1; i >= 0; --i) {\n      stopJettySolrRunner(i);\n    }\n    zkServer.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70da87babb51c44b25e100e52ba71a944790aff1","date":1395333028,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    for (int i = jettys.size() - 1; i >= 0; --i) {\n      stopJettySolrRunner(i);\n    }\n    zkServer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4b636de9d648a57c06c19d05a2344be9a96ee11","date":1420139952,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      solrClient.shutdown();\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      solrClient.close();\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      solrClient.shutdown();\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ae1e051eb54651f97786343944abe292d64b50","date":1425934288,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      solrClient.close();\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e7f1c4c6036266b3b18d87602c698de56702520c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      solrClient.close();\n      for (int i = jettys.size() - 1; i >= 0; --i) {\n        stopJettySolrRunner(i);\n      }\n    } finally {\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9bf0405a1117d91d112b095f83c2df500c7b3c","date":1437869727,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"solr.solrxml.location\");\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        zkServer.shutdown();\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(new Callable<JettySolrRunner>() {\n          @Override\n          public JettySolrRunner call() throws Exception {\n            return stopJettySolrRunner(jetty);\n          }\n        });\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7f1c4c6036266b3b18d87602c698de56702520c","date":1487092004,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(15, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":["82ae1e051eb54651f97786343944abe292d64b50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(15, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(15, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(15, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(2, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d32e632a4641366d674c7dbfd8fd155b0f96dc31","date":1487797092,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      // accept no new tasks\n      executorLauncher.shutdown();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n      if (solrClient != null)\n        solrClient.close();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executor.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      executor.shutdown();\n      executor.awaitTermination(15, TimeUnit.SECONDS);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"040bf6d317e5bde94816bd7fe6eb0ed324306e2a","date":1544756375,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      final ExecutorService executorCloser = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"jetty-closer\"));\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      // accept no new tasks\n      executorLauncher.shutdown();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9","date":1544802186,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      final ExecutorService executorCloser = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"jetty-closer\"));\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      // accept no new tasks\n      executorLauncher.shutdown();\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#shutdown().mjava","sourceNew":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      final ExecutorService executorCloser = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"jetty-closer\"));\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Shut down the cluster, including all Solr nodes and ZooKeeper\n   */\n  public void shutdown() throws Exception {\n    try {\n    \n      IOUtils.closeQuietly(solrClient);\n      List<Callable<JettySolrRunner>> shutdowns = new ArrayList<>(jettys.size());\n      for (final JettySolrRunner jetty : jettys) {\n        shutdowns.add(() -> stopJettySolrRunner(jetty));\n      }\n      jettys.clear();\n      final ExecutorService executorCloser = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"jetty-closer\"));\n      Collection<Future<JettySolrRunner>> futures = executorCloser.invokeAll(shutdowns);\n      ExecutorUtil.shutdownAndAwaitTermination(executorCloser);\n      Exception shutdownError = checkForExceptions(\"Error shutting down MiniSolrCloudCluster\", futures);\n      if (shutdownError != null) {\n        throw shutdownError;\n      }\n    } finally {\n      try {\n        if (!externalZkServer) {\n          zkServer.shutdown();\n        }\n      } finally {\n        System.clearProperty(\"zkHost\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043df2e9a841864922c32756a44c939ed768cb89":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["0f9bf0405a1117d91d112b095f83c2df500c7b3c"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"e4b636de9d648a57c06c19d05a2344be9a96ee11":["70da87babb51c44b25e100e52ba71a944790aff1"],"d32e632a4641366d674c7dbfd8fd155b0f96dc31":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"0f9bf0405a1117d91d112b095f83c2df500c7b3c":["82ae1e051eb54651f97786343944abe292d64b50"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","82ae1e051eb54651f97786343944abe292d64b50"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b6284684320a9808c41a5e43de958b2da22f89bd","e7f1c4c6036266b3b18d87602c698de56702520c"],"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9":["d32e632a4641366d674c7dbfd8fd155b0f96dc31","040bf6d317e5bde94816bd7fe6eb0ed324306e2a"],"b6284684320a9808c41a5e43de958b2da22f89bd":["2209af2c265d2258ec4b29c8cc78622d36994a15","043df2e9a841864922c32756a44c939ed768cb89"],"e7f1c4c6036266b3b18d87602c698de56702520c":["b6284684320a9808c41a5e43de958b2da22f89bd"],"82ae1e051eb54651f97786343944abe292d64b50":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6e619491f96eb1c2c64d9f8134326816b0bcd2e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"040bf6d317e5bde94816bd7fe6eb0ed324306e2a":["d32e632a4641366d674c7dbfd8fd155b0f96dc31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e4b636de9d648a57c06c19d05a2344be9a96ee11"],"70da87babb51c44b25e100e52ba71a944790aff1":["6e619491f96eb1c2c64d9f8134326816b0bcd2e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["d32e632a4641366d674c7dbfd8fd155b0f96dc31"],"e4b636de9d648a57c06c19d05a2344be9a96ee11":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d32e632a4641366d674c7dbfd8fd155b0f96dc31":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9","040bf6d317e5bde94816bd7fe6eb0ed324306e2a"],"0f9bf0405a1117d91d112b095f83c2df500c7b3c":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"b6284684320a9808c41a5e43de958b2da22f89bd":["022a4de90e0479b604264ca9c2e134c996454ab3","e7f1c4c6036266b3b18d87602c698de56702520c"],"e7f1c4c6036266b3b18d87602c698de56702520c":["022a4de90e0479b604264ca9c2e134c996454ab3"],"82ae1e051eb54651f97786343944abe292d64b50":["0f9bf0405a1117d91d112b095f83c2df500c7b3c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"6e619491f96eb1c2c64d9f8134326816b0bcd2e4":["70da87babb51c44b25e100e52ba71a944790aff1"],"040bf6d317e5bde94816bd7fe6eb0ed324306e2a":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e619491f96eb1c2c64d9f8134326816b0bcd2e4"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","82ae1e051eb54651f97786343944abe292d64b50"],"70da87babb51c44b25e100e52ba71a944790aff1":["e4b636de9d648a57c06c19d05a2344be9a96ee11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}