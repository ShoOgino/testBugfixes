{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","commits":[{"id":"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","date":1423733077,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(HashMap[String,List[String]],ResponseBuilder,int).mjava","sourceNew":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT_MINCOUNT);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","sourceOld":"  private void enqueuePivotFacetShardRequests\n    (HashMap<String,List<String>> pivotFacetRefinements, \n     ResponseBuilder rb, int shardNum) {\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT_MINCOUNT);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9874be20d2b434883108f2fd050817c222e74f99","date":1424839331,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","sourceNew":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n\n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    removeMainFacetTypeParams(shardsRefineRequestPivot);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","sourceOld":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT_MINCOUNT);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","sourceNew":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n\n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    removeMainFacetTypeParams(shardsRefineRequestPivot);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","sourceOld":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT_MINCOUNT);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_PIVOT);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ee67591e264becb38dd89e8a00e846753a3bf1","date":1433291396,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#enqueuePivotFacetShardRequests(ResponseBuilder,int).mjava","sourceNew":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n\n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    removeMainFacetTypeParams(shardsRefineRequestPivot);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + fi.pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + fi.pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + fi.pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      fi.pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","sourceOld":"  private void enqueuePivotFacetShardRequests(ResponseBuilder rb, int shardNum) {\n\n    FacetInfo fi = rb._facetInfo;\n    \n    ShardRequest shardsRefineRequestPivot = new ShardRequest();\n    shardsRefineRequestPivot.shards = new String[] {rb.shards[shardNum]};\n    shardsRefineRequestPivot.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // don't request any documents\n    shardsRefineRequestPivot.params.remove(CommonParams.START);\n    shardsRefineRequestPivot.params.set(CommonParams.ROWS, \"0\");\n    \n    shardsRefineRequestPivot.purpose |= ShardRequest.PURPOSE_REFINE_PIVOT_FACETS;\n    shardsRefineRequestPivot.params.set(FacetParams.FACET, \"true\");\n    removeMainFacetTypeParams(shardsRefineRequestPivot);\n    shardsRefineRequestPivot.params.set(FacetParams.FACET_PIVOT_MINCOUNT, -1);\n    shardsRefineRequestPivot.params.remove(FacetParams.FACET_OFFSET);\n    \n    for (int pivotIndex = 0; pivotIndex < fi.pivotFacets.size(); pivotIndex++) {\n      String pivotFacetKey = fi.pivotFacets.getName(pivotIndex);\n      PivotFacet pivotFacet = fi.pivotFacets.getVal(pivotIndex);\n\n      List<PivotFacetValue> queuedRefinementsForShard = \n        pivotFacet.getQueuedRefinements(shardNum);\n\n      if ( ! queuedRefinementsForShard.isEmpty() ) {\n        \n        String fieldsKey = PivotFacet.REFINE_PARAM + pivotRefinementCounter;\n        String command;\n        \n        if (pivotFacet.localParams != null) {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \" \"\n            + pivotFacet.facetStr.substring(2);\n        } else {\n          command = PIVOT_REFINE_PREFIX + pivotRefinementCounter + \"}\"\n            + pivotFacet.getKey();\n        }\n        \n        shardsRefineRequestPivot.params.add(FacetParams.FACET_PIVOT, command);\n        for (PivotFacetValue refinementValue : queuedRefinementsForShard) {\n          String refinementStr = PivotFacetHelper\n            .encodeRefinementValuePath(refinementValue.getValuePath());\n          shardsRefineRequestPivot.params.add(fieldsKey, refinementStr);\n          \n        }\n      }\n      pivotRefinementCounter++;\n    }\n    \n    rb.addRequest(this, shardsRefineRequestPivot);\n  }\n\n","bugFix":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81ee67591e264becb38dd89e8a00e846753a3bf1":["9874be20d2b434883108f2fd050817c222e74f99"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","9874be20d2b434883108f2fd050817c222e74f99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9874be20d2b434883108f2fd050817c222e74f99":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81ee67591e264becb38dd89e8a00e846753a3bf1"]},"commit2Childs":{"81ee67591e264becb38dd89e8a00e846753a3bf1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"],"9874be20d2b434883108f2fd050817c222e74f99":["81ee67591e264becb38dd89e8a00e846753a3bf1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9874be20d2b434883108f2fd050817c222e74f99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}