{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","sourceNew":"  public void testMaxValues() throws Exception {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","sourceOld":"  public void testMaxValues() throws Exception {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","sourceNew":"  public void testMaxValues() {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","sourceOld":"  public void testMaxValues() throws Exception {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","sourceNew":"  public void testMaxValues() {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","sourceOld":"  public void testMaxValues() throws Exception {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMaxValues().mjava","sourceNew":"  public void testMaxValues() {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","sourceOld":"  public void testMaxValues() throws Exception {\n    assertEquals(\"1 bit -> max == 1\",\n            1, PackedInts.maxValue(1));\n    assertEquals(\"2 bit -> max == 3\",\n            3, PackedInts.maxValue(2));\n    assertEquals(\"8 bit -> max == 255\",\n            255, PackedInts.maxValue(8));\n    assertEquals(\"63 bit -> max == Long.MAX_VALUE\",\n            Long.MAX_VALUE, PackedInts.maxValue(63));\n    assertEquals(\"64 bit -> max == Long.MAX_VALUE (same as for 63 bit)\", \n            Long.MAX_VALUE, PackedInts.maxValue(64));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","829d9441b99897377d279219000bb71b50c026be"],"829d9441b99897377d279219000bb71b50c026be":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["829d9441b99897377d279219000bb71b50c026be"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"829d9441b99897377d279219000bb71b50c026be":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}