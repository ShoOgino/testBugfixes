{"path":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testFarsi().mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testFarsi().mjava","pathOld":"/dev/null","sourceNew":"    public void testFarsi() throws Exception {\n            \n        /* build an index */\n        RAMDirectory farsiIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T, \n                                             IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                          Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"body\", \"body\",\n                          Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n            \n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(farsiIndex);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n        // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n        // characters properly.\n        Collator c = Collator.getInstance(new Locale(\"ar\"));\n        \n        // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n        // orders the U+0698 character before the U+0633 character, so the single\n        // index Term below should NOT be returned by a ConstantScoreRangeQuery\n        // with a Farsi Collator (or an Arabic one for the case when Farsi is \n        // not supported).\n        ScoreDoc[] result = search.search(csrq(\"content\",\"\\u062F\", \"\\u0698\", T, T, c), null, 1000).scoreDocs;\n        assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n        result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null, 1000).scoreDocs;\n        assertEquals(\"The index Term should be included.\", 1, result.length);\n        search.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testFarsi().mjava","sourceNew":null,"sourceOld":"    public void testFarsi() throws Exception {\n            \n        /* build an index */\n        RAMDirectory farsiIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T, \n                                             IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                          Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"body\", \"body\",\n                          Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n            \n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(farsiIndex);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n        // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n        // characters properly.\n        Collator c = Collator.getInstance(new Locale(\"ar\"));\n        \n        // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n        // orders the U+0698 character before the U+0633 character, so the single\n        // index Term below should NOT be returned by a ConstantScoreRangeQuery\n        // with a Farsi Collator (or an Arabic one for the case when Farsi is \n        // not supported).\n        ScoreDoc[] result = search.search(csrq(\"content\",\"\\u062F\", \"\\u0698\", T, T, c), null, 1000).scoreDocs;\n        assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n        result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null, 1000).scoreDocs;\n        assertEquals(\"The index Term should be included.\", 1, result.length);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}