{"path":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","commits":[{"id":"d029fbe10fe5651865203eddc5b9d07fa3c59128","date":1456214468,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new SnitchContext(null, node);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9db5fcef0c59566ad373ff7844f8a985f0017c","date":1467374856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new SnitchContext(null, node, new HashMap<>());\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new SnitchContext(null, node);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new SnitchContext(null, node, new HashMap<>());\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new SnitchContext(null, node, new HashMap<>());\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new SnitchContext(null, node);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3917983f0a19df5f31b4fb2ee0918ca7f7490b4f","date":1509827350,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    \n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/ImplicitSnitchTest#testGetTags_withHostNameRequestedTag_ip99999_returns_nothing().mjava","sourceNew":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    \n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","sourceOld":"  @Test\n  public void testGetTags_withHostNameRequestedTag_ip99999_returns_nothing() throws Exception {\n    String node = \"serv01.dc01.london.uk.apache.org:8983_solr\";\n\n    SnitchContext context = new ServerSnitchContext(null, node, new HashMap<>(),null);\n    //We need mocking here otherwise, we would need proper DNS entry for this test to pass\n    ImplicitSnitch mockedSnitch = Mockito.spy(snitch);\n    when(mockedSnitch.getHostIp(anyString())).thenReturn(\"10.11.12.13\");\n    mockedSnitch.getTags(node, Sets.newHashSet(\"ip_99999\"), context);\n\n    Map<String, Object> tags = context.getTags();\n    assertThat(tags.entrySet().size(), is(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3917983f0a19df5f31b4fb2ee0918ca7f7490b4f"],"3917983f0a19df5f31b4fb2ee0918ca7f7490b4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","dded3df9e710f258905cff1def2f25eb51c62e0f"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d029fbe10fe5651865203eddc5b9d07fa3c59128","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3917983f0a19df5f31b4fb2ee0918ca7f7490b4f":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","3917983f0a19df5f31b4fb2ee0918ca7f7490b4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}