{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/StreamComparator#assignComparator().mjava","commits":[{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/StreamComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      comparator = new ComparatorLambda() {\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/StreamComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(fieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(fieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(fieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(fieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e431b0806b8db369da896b66a74e304a49953c7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0891a6931fc352fc7e61f2752ef9add758d3fb89"]},"commit2Childs":{"0891a6931fc352fc7e61f2752ef9add758d3fb89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e431b0806b8db369da896b66a74e304a49953c7b"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}