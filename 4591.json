{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 99\n            // [, line 100\n            ket = cursor;\n            // substring, line 100\n            among_var = find_among_b(a_5, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 100\n            bra = cursor;\n            // call R1, line 100\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 102\n                    // <-, line 102\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 104\n                    // <-, line 104\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 111\n                    // <-, line 111\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 112\n                    // <-, line 112\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 114\n                    // <-, line 114\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 116\n                    // <-, line 116\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 118\n                    // <-, line 118\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 119\n                    // literal, line 119\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 119\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 120\n                    // <-, line 120\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 121\n                    // <-, line 121\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 122\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 122\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","sourceOld":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 99\n            // [, line 100\n            ket = cursor;\n            // substring, line 100\n            among_var = find_among_b(a_5, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 100\n            bra = cursor;\n            // call R1, line 100\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 102\n                    // <-, line 102\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 104\n                    // <-, line 104\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 111\n                    // <-, line 111\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 112\n                    // <-, line 112\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 114\n                    // <-, line 114\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 116\n                    // <-, line 116\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 118\n                    // <-, line 118\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 119\n                    // literal, line 119\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 119\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 120\n                    // <-, line 120\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 121\n                    // <-, line 121\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 122\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 122\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a6a9e301c12ab07b1d0428b5aad813fff317b3","date":1343846505,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"                private boolean r_Step_2() {\n            int among_var;\n                    // (, line 99\n                    // [, line 100\n                    ket = cursor;\n                    // substring, line 100\n                    among_var = find_among_b(a_5, 24);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 100\n                    bra = cursor;\n                    // call R1, line 100\n                    if (!r_R1())\n                    {\n                        return false;\n                    }\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 101\n                            // <-, line 101\n                            slice_from(\"tion\");\n                            break;\n                        case 2:\n                            // (, line 102\n                            // <-, line 102\n                            slice_from(\"ence\");\n                            break;\n                        case 3:\n                            // (, line 103\n                            // <-, line 103\n                            slice_from(\"ance\");\n                            break;\n                        case 4:\n                            // (, line 104\n                            // <-, line 104\n                            slice_from(\"able\");\n                            break;\n                        case 5:\n                            // (, line 105\n                            // <-, line 105\n                            slice_from(\"ent\");\n                            break;\n                        case 6:\n                            // (, line 107\n                            // <-, line 107\n                            slice_from(\"ize\");\n                            break;\n                        case 7:\n                            // (, line 109\n                            // <-, line 109\n                            slice_from(\"ate\");\n                            break;\n                        case 8:\n                            // (, line 111\n                            // <-, line 111\n                            slice_from(\"al\");\n                            break;\n                        case 9:\n                            // (, line 112\n                            // <-, line 112\n                            slice_from(\"ful\");\n                            break;\n                        case 10:\n                            // (, line 114\n                            // <-, line 114\n                            slice_from(\"ous\");\n                            break;\n                        case 11:\n                            // (, line 116\n                            // <-, line 116\n                            slice_from(\"ive\");\n                            break;\n                        case 12:\n                            // (, line 118\n                            // <-, line 118\n                            slice_from(\"ble\");\n                            break;\n                        case 13:\n                            // (, line 119\n                            // literal, line 119\n                            if (!(eq_s_b(1, \"l\")))\n                            {\n                                return false;\n                            }\n                            // <-, line 119\n                            slice_from(\"og\");\n                            break;\n                        case 14:\n                            // (, line 120\n                            // <-, line 120\n                            slice_from(\"ful\");\n                            break;\n                        case 15:\n                            // (, line 121\n                            // <-, line 121\n                            slice_from(\"less\");\n                            break;\n                        case 16:\n                            // (, line 122\n                            if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                            {\n                                return false;\n                            }\n                            // delete, line 122\n                            slice_del();\n                            break;\n                    }\n                    return true;\n                }\n\n","sourceOld":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 99\n            // [, line 100\n            ket = cursor;\n            // substring, line 100\n            among_var = find_among_b(a_5, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 100\n            bra = cursor;\n            // call R1, line 100\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 102\n                    // <-, line 102\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 104\n                    // <-, line 104\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 111\n                    // <-, line 111\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 112\n                    // <-, line 112\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 114\n                    // <-, line 114\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 116\n                    // <-, line 116\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 118\n                    // <-, line 118\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 119\n                    // literal, line 119\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 119\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 120\n                    // <-, line 120\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 121\n                    // <-, line 121\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 122\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 122\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"                private boolean r_Step_2() {\n            int among_var;\n                    // (, line 99\n                    // [, line 100\n                    ket = cursor;\n                    // substring, line 100\n                    among_var = find_among_b(a_5, 24);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 100\n                    bra = cursor;\n                    // call R1, line 100\n                    if (!r_R1())\n                    {\n                        return false;\n                    }\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 101\n                            // <-, line 101\n                            slice_from(\"tion\");\n                            break;\n                        case 2:\n                            // (, line 102\n                            // <-, line 102\n                            slice_from(\"ence\");\n                            break;\n                        case 3:\n                            // (, line 103\n                            // <-, line 103\n                            slice_from(\"ance\");\n                            break;\n                        case 4:\n                            // (, line 104\n                            // <-, line 104\n                            slice_from(\"able\");\n                            break;\n                        case 5:\n                            // (, line 105\n                            // <-, line 105\n                            slice_from(\"ent\");\n                            break;\n                        case 6:\n                            // (, line 107\n                            // <-, line 107\n                            slice_from(\"ize\");\n                            break;\n                        case 7:\n                            // (, line 109\n                            // <-, line 109\n                            slice_from(\"ate\");\n                            break;\n                        case 8:\n                            // (, line 111\n                            // <-, line 111\n                            slice_from(\"al\");\n                            break;\n                        case 9:\n                            // (, line 112\n                            // <-, line 112\n                            slice_from(\"ful\");\n                            break;\n                        case 10:\n                            // (, line 114\n                            // <-, line 114\n                            slice_from(\"ous\");\n                            break;\n                        case 11:\n                            // (, line 116\n                            // <-, line 116\n                            slice_from(\"ive\");\n                            break;\n                        case 12:\n                            // (, line 118\n                            // <-, line 118\n                            slice_from(\"ble\");\n                            break;\n                        case 13:\n                            // (, line 119\n                            // literal, line 119\n                            if (!(eq_s_b(1, \"l\")))\n                            {\n                                return false;\n                            }\n                            // <-, line 119\n                            slice_from(\"og\");\n                            break;\n                        case 14:\n                            // (, line 120\n                            // <-, line 120\n                            slice_from(\"ful\");\n                            break;\n                        case 15:\n                            // (, line 121\n                            // <-, line 121\n                            slice_from(\"less\");\n                            break;\n                        case 16:\n                            // (, line 122\n                            if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                            {\n                                return false;\n                            }\n                            // delete, line 122\n                            slice_del();\n                            break;\n                    }\n                    return true;\n                }\n\n","sourceOld":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 99\n            // [, line 100\n            ket = cursor;\n            // substring, line 100\n            among_var = find_among_b(a_5, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 100\n            bra = cursor;\n            // call R1, line 100\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 102\n                    // <-, line 102\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 104\n                    // <-, line 104\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 111\n                    // <-, line 111\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 112\n                    // <-, line 112\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 114\n                    // <-, line 114\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 116\n                    // <-, line 116\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 118\n                    // <-, line 118\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 119\n                    // literal, line 119\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 119\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 120\n                    // <-, line 120\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 121\n                    // <-, line 121\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 122\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 122\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"                private boolean r_Step_2() {\n            int among_var;\n                    // (, line 99\n                    // [, line 100\n                    ket = cursor;\n                    // substring, line 100\n                    among_var = find_among_b(a_5, 24);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 100\n                    bra = cursor;\n                    // call R1, line 100\n                    if (!r_R1())\n                    {\n                        return false;\n                    }\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 101\n                            // <-, line 101\n                            slice_from(\"tion\");\n                            break;\n                        case 2:\n                            // (, line 102\n                            // <-, line 102\n                            slice_from(\"ence\");\n                            break;\n                        case 3:\n                            // (, line 103\n                            // <-, line 103\n                            slice_from(\"ance\");\n                            break;\n                        case 4:\n                            // (, line 104\n                            // <-, line 104\n                            slice_from(\"able\");\n                            break;\n                        case 5:\n                            // (, line 105\n                            // <-, line 105\n                            slice_from(\"ent\");\n                            break;\n                        case 6:\n                            // (, line 107\n                            // <-, line 107\n                            slice_from(\"ize\");\n                            break;\n                        case 7:\n                            // (, line 109\n                            // <-, line 109\n                            slice_from(\"ate\");\n                            break;\n                        case 8:\n                            // (, line 111\n                            // <-, line 111\n                            slice_from(\"al\");\n                            break;\n                        case 9:\n                            // (, line 112\n                            // <-, line 112\n                            slice_from(\"ful\");\n                            break;\n                        case 10:\n                            // (, line 114\n                            // <-, line 114\n                            slice_from(\"ous\");\n                            break;\n                        case 11:\n                            // (, line 116\n                            // <-, line 116\n                            slice_from(\"ive\");\n                            break;\n                        case 12:\n                            // (, line 118\n                            // <-, line 118\n                            slice_from(\"ble\");\n                            break;\n                        case 13:\n                            // (, line 119\n                            // literal, line 119\n                            if (!(eq_s_b(1, \"l\")))\n                            {\n                                return false;\n                            }\n                            // <-, line 119\n                            slice_from(\"og\");\n                            break;\n                        case 14:\n                            // (, line 120\n                            // <-, line 120\n                            slice_from(\"ful\");\n                            break;\n                        case 15:\n                            // (, line 121\n                            // <-, line 121\n                            slice_from(\"less\");\n                            break;\n                        case 16:\n                            // (, line 122\n                            if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                            {\n                                return false;\n                            }\n                            // delete, line 122\n                            slice_del();\n                            break;\n                    }\n                    return true;\n                }\n\n","sourceOld":"        private boolean r_Step_2() {\n            int among_var;\n            // (, line 99\n            // [, line 100\n            ket = cursor;\n            // substring, line 100\n            among_var = find_among_b(a_5, 24);\n            if (among_var == 0)\n            {\n                return false;\n            }\n            // ], line 100\n            bra = cursor;\n            // call R1, line 100\n            if (!r_R1())\n            {\n                return false;\n            }\n            switch(among_var) {\n                case 0:\n                    return false;\n                case 1:\n                    // (, line 101\n                    // <-, line 101\n                    slice_from(\"tion\");\n                    break;\n                case 2:\n                    // (, line 102\n                    // <-, line 102\n                    slice_from(\"ence\");\n                    break;\n                case 3:\n                    // (, line 103\n                    // <-, line 103\n                    slice_from(\"ance\");\n                    break;\n                case 4:\n                    // (, line 104\n                    // <-, line 104\n                    slice_from(\"able\");\n                    break;\n                case 5:\n                    // (, line 105\n                    // <-, line 105\n                    slice_from(\"ent\");\n                    break;\n                case 6:\n                    // (, line 107\n                    // <-, line 107\n                    slice_from(\"ize\");\n                    break;\n                case 7:\n                    // (, line 109\n                    // <-, line 109\n                    slice_from(\"ate\");\n                    break;\n                case 8:\n                    // (, line 111\n                    // <-, line 111\n                    slice_from(\"al\");\n                    break;\n                case 9:\n                    // (, line 112\n                    // <-, line 112\n                    slice_from(\"ful\");\n                    break;\n                case 10:\n                    // (, line 114\n                    // <-, line 114\n                    slice_from(\"ous\");\n                    break;\n                case 11:\n                    // (, line 116\n                    // <-, line 116\n                    slice_from(\"ive\");\n                    break;\n                case 12:\n                    // (, line 118\n                    // <-, line 118\n                    slice_from(\"ble\");\n                    break;\n                case 13:\n                    // (, line 119\n                    // literal, line 119\n                    if (!(eq_s_b(1, \"l\")))\n                    {\n                        return false;\n                    }\n                    // <-, line 119\n                    slice_from(\"og\");\n                    break;\n                case 14:\n                    // (, line 120\n                    // <-, line 120\n                    slice_from(\"ful\");\n                    break;\n                case 15:\n                    // (, line 121\n                    // <-, line 121\n                    slice_from(\"less\");\n                    break;\n                case 16:\n                    // (, line 122\n                    if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                    {\n                        return false;\n                    }\n                    // delete, line 122\n                    slice_del();\n                    break;\n            }\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer#r_Step_2().mjava","sourceNew":"private boolean r_Step_2() {\n  int among_var;\n  ket = cursor;\n  among_var = find_among_b(a_5);\n  if (among_var == 0)\n  {\n    return false;\n  }\n  bra = cursor;\n  if (!r_R1())\n  {\n    return false;\n  }\n  switch (among_var) {\n    case 1:\n      slice_from(\"tion\");\n      break;\n    case 2:\n      slice_from(\"ence\");\n      break;\n    case 3:\n      slice_from(\"ance\");\n      break;\n    case 4:\n      slice_from(\"able\");\n      break;\n    case 5:\n      slice_from(\"ent\");\n      break;\n    case 6:\n      slice_from(\"ize\");\n      break;\n    case 7:\n      slice_from(\"ate\");\n      break;\n    case 8:\n      slice_from(\"al\");\n      break;\n    case 9:\n      slice_from(\"ful\");\n      break;\n    case 10:\n      slice_from(\"ous\");\n      break;\n    case 11:\n      slice_from(\"ive\");\n      break;\n    case 12:\n      slice_from(\"ble\");\n      break;\n    case 13:\n      if (!(eq_s_b(\"l\")))\n      {\n        return false;\n      }\n      slice_from(\"og\");\n      break;\n    case 14:\n      slice_from(\"less\");\n      break;\n    case 15:\n      if (!(in_grouping_b(g_valid_LI, 99, 116)))\n      {\n        return false;\n      }\n      slice_del();\n      break;\n  }\n  return true;\n}\n\n","sourceOld":"                private boolean r_Step_2() {\n            int among_var;\n                    // (, line 99\n                    // [, line 100\n                    ket = cursor;\n                    // substring, line 100\n                    among_var = find_among_b(a_5, 24);\n                    if (among_var == 0)\n                    {\n                        return false;\n                    }\n                    // ], line 100\n                    bra = cursor;\n                    // call R1, line 100\n                    if (!r_R1())\n                    {\n                        return false;\n                    }\n                    switch(among_var) {\n                        case 0:\n                            return false;\n                        case 1:\n                            // (, line 101\n                            // <-, line 101\n                            slice_from(\"tion\");\n                            break;\n                        case 2:\n                            // (, line 102\n                            // <-, line 102\n                            slice_from(\"ence\");\n                            break;\n                        case 3:\n                            // (, line 103\n                            // <-, line 103\n                            slice_from(\"ance\");\n                            break;\n                        case 4:\n                            // (, line 104\n                            // <-, line 104\n                            slice_from(\"able\");\n                            break;\n                        case 5:\n                            // (, line 105\n                            // <-, line 105\n                            slice_from(\"ent\");\n                            break;\n                        case 6:\n                            // (, line 107\n                            // <-, line 107\n                            slice_from(\"ize\");\n                            break;\n                        case 7:\n                            // (, line 109\n                            // <-, line 109\n                            slice_from(\"ate\");\n                            break;\n                        case 8:\n                            // (, line 111\n                            // <-, line 111\n                            slice_from(\"al\");\n                            break;\n                        case 9:\n                            // (, line 112\n                            // <-, line 112\n                            slice_from(\"ful\");\n                            break;\n                        case 10:\n                            // (, line 114\n                            // <-, line 114\n                            slice_from(\"ous\");\n                            break;\n                        case 11:\n                            // (, line 116\n                            // <-, line 116\n                            slice_from(\"ive\");\n                            break;\n                        case 12:\n                            // (, line 118\n                            // <-, line 118\n                            slice_from(\"ble\");\n                            break;\n                        case 13:\n                            // (, line 119\n                            // literal, line 119\n                            if (!(eq_s_b(1, \"l\")))\n                            {\n                                return false;\n                            }\n                            // <-, line 119\n                            slice_from(\"og\");\n                            break;\n                        case 14:\n                            // (, line 120\n                            // <-, line 120\n                            slice_from(\"ful\");\n                            break;\n                        case 15:\n                            // (, line 121\n                            // <-, line 121\n                            slice_from(\"less\");\n                            break;\n                        case 16:\n                            // (, line 122\n                            if (!(in_grouping_b(g_valid_LI, 99, 116)))\n                            {\n                                return false;\n                            }\n                            // delete, line 122\n                            slice_del();\n                            break;\n                    }\n                    return true;\n                }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"b6a6a9e301c12ab07b1d0428b5aad813fff317b3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d6f074e73200c07d54f242d3880a8da5a35ff97b","b6a6a9e301c12ab07b1d0428b5aad813fff317b3","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b6a6a9e301c12ab07b1d0428b5aad813fff317b3":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","09479cd2de06c67a115b7346a8e5de8af4d62e81"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}