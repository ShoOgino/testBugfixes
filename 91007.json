{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","commits":[{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"/dev/null","sourceNew":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"/dev/null","sourceNew":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52209f74dc33b64e2e3576fe15b8c2d312809d7","date":1408896505,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n        commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n        commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n        commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n        commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n        commondCloudSolrServer.connect();\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n          commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":null,"sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n        commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n        commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n        commondCloudSolrServer.getLbServer().setConnectionTimeout(15000);\n        commondCloudSolrServer.getLbServer().setSoTimeout(30000);\n        commondCloudSolrServer.connect();\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","a69439d0df009e0bb0038d1e427159f449dd670d"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["81a4a1810b619aea1d002a09c1878b498e20bf33"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["a69439d0df009e0bb0038d1e427159f449dd670d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["81a4a1810b619aea1d002a09c1878b498e20bf33","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c215736a9e29403edd2132d9f0829a287b428df4"],"a69439d0df009e0bb0038d1e427159f449dd670d":["c215736a9e29403edd2132d9f0829a287b428df4"],"bafca15d8e408346a67f4282ad1143b88023893b":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["a69439d0df009e0bb0038d1e427159f449dd670d","81a4a1810b619aea1d002a09c1878b498e20bf33"],"c215736a9e29403edd2132d9f0829a287b428df4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c","09c8567c25c02eeeb3e719841606a1269f3538ca"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["bafca15d8e408346a67f4282ad1143b88023893b"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","a69439d0df009e0bb0038d1e427159f449dd670d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","c215736a9e29403edd2132d9f0829a287b428df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}