{"path":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","commits":[{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6627e96da3f5efc85314b83db335fea8518ad464","date":1117908960,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   * @deprecated use {@link #isCurrent()} instead\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe","date":1118175686,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   * @deprecated use {@link #isCurrent()} instead\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read\n   */\n  public static long getCurrentVersion(File directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f658c721de6fbc0c439a5288182c4a6bb53ac21b","date":1244025537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #getCurrentVersion(Directory)} instead\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #getCurrentVersion(Directory)} instead\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #getCurrentVersion(Directory)} instead\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #getCurrentVersion(Directory)} instead\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return getCurrentVersion(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #getCurrentVersion(Directory)} instead\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    long version = getCurrentVersion(dir);\n    dir.close();\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #getCurrentVersion(Directory)} instead.\n   *             This method will be removed in the 3.0 release.\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return getCurrentVersion(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #getCurrentVersion(Directory)} instead\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return getCurrentVersion(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #getCurrentVersion(Directory)} instead.\n   *             This method will be removed in the 3.0 release.\n   */\n  public static long getCurrentVersion(File directory) throws CorruptIndexException, IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return getCurrentVersion(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"66b12ba4967665216eeb706b58d424c51fb3641a":["0060868dbe170ecf61556c5f4a6e9dfb800d5dbe"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["4e54e4a9a2442944e55f58e835877841cdac1271"],"1b54a9bc667895a2095a886184bf69a3179e63df":["66b12ba4967665216eeb706b58d424c51fb3641a"],"6627e96da3f5efc85314b83db335fea8518ad464":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"4e54e4a9a2442944e55f58e835877841cdac1271":["ba712167ee848727018d8b77aa0c273839fbe15c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["1b54a9bc667895a2095a886184bf69a3179e63df"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"ba712167ee848727018d8b77aa0c273839fbe15c":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe":["6627e96da3f5efc85314b83db335fea8518ad464"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66b12ba4967665216eeb706b58d424c51fb3641a":["1b54a9bc667895a2095a886184bf69a3179e63df"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"1b54a9bc667895a2095a886184bf69a3179e63df":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"6627e96da3f5efc85314b83db335fea8518ad464":["0060868dbe170ecf61556c5f4a6e9dfb800d5dbe"],"4e54e4a9a2442944e55f58e835877841cdac1271":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["ba712167ee848727018d8b77aa0c273839fbe15c"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["6627e96da3f5efc85314b83db335fea8518ad464"],"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe":["66b12ba4967665216eeb706b58d424c51fb3641a"],"ba712167ee848727018d8b77aa0c273839fbe15c":["4e54e4a9a2442944e55f58e835877841cdac1271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}