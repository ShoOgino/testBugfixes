{"path":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(CMD_INDEX_VERSION, versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n\n      if (isSlave) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        list.add(\"confFilesToReplicate\", includeConfFiles.toString());\n        if (replicateOnCommit)\n          list.add(REPLICATE_AFTER, \"commit\");\n        if (replicateOnOptimize)\n          list.add(REPLICATE_AFTER, \"optimize\");\n      }\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","4f1a1d7f1604a41328b566b1be0c5ad6038117e8","e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(CMD_INDEX_VERSION, versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n\n      if (isSlave) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        if (includeConfFiles != null)\n          list.add(\"confFilesToReplicate\", includeConfFiles);\n        if (replicateOnCommit)\n          list.add(REPLICATE_AFTER, \"commit\");\n        if (replicateOnOptimize)\n          list.add(REPLICATE_AFTER, \"optimize\");\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(CMD_INDEX_VERSION, versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n\n      if (isSlave) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        list.add(\"confFilesToReplicate\", includeConfFiles.toString());\n        if (replicateOnCommit)\n          list.add(REPLICATE_AFTER, \"commit\");\n        if (replicateOnOptimize)\n          list.add(REPLICATE_AFTER, \"optimize\");\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd564545498afb928bdfecf369ec06cd377413d2","date":1230103123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(CMD_INDEX_VERSION, versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        if (includeConfFiles != null)\n          list.add(\"confFilesToReplicate\", includeConfFiles);\n        if (replicateOnCommit)\n          list.add(REPLICATE_AFTER, \"commit\");\n        if (replicateOnOptimize)\n          list.add(REPLICATE_AFTER, \"optimize\");\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(CMD_INDEX_VERSION, versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n\n      if (isSlave) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        if (includeConfFiles != null)\n          list.add(\"confFilesToReplicate\", includeConfFiles);\n        if (replicateOnCommit)\n          list.add(REPLICATE_AFTER, \"commit\");\n        if (replicateOnOptimize)\n          list.add(REPLICATE_AFTER, \"optimize\");\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c62d84fa064ee3b226a7ed01c37d152d0253bb","date":1234445125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        if (includeConfFiles != null)\n          list.add(\"confFilesToReplicate\", includeConfFiles);\n        String replicateAfterString=\"\";\n        if (replicateOnCommit)\n          replicateAfterString += \"commit, \";\n        if (replicateOnOptimize)\n          replicateAfterString += \"optimize, \";\n        if(replicateOnStart)\n          replicateAfterString += \"startup, \";\n        if(replicateAfterString.lastIndexOf(',') > -1)\n          replicateAfterString = replicateAfterString.substring(0, replicateAfterString.lastIndexOf(','));\n        list.add(REPLICATE_AFTER, replicateAfterString);\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(CMD_INDEX_VERSION, versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        if (includeConfFiles != null)\n          list.add(\"confFilesToReplicate\", includeConfFiles);\n        if (replicateOnCommit)\n          list.add(REPLICATE_AFTER, \"commit\");\n        if (replicateOnOptimize)\n          list.add(REPLICATE_AFTER, \"optimize\");\n      }\n    }\n    return list;\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":["8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f1a1d7f1604a41328b566b1be0c5ad6038117e8","date":1252499131,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n      }\n      if (isMaster) {\n        if (includeConfFiles != null)\n          list.add(\"confFilesToReplicate\", includeConfFiles);\n        String replicateAfterString=\"\";\n        if (replicateOnCommit)\n          replicateAfterString += \"commit, \";\n        if (replicateOnOptimize)\n          replicateAfterString += \"optimize, \";\n        if(replicateOnStart)\n          replicateAfterString += \"startup, \";\n        if(replicateAfterString.lastIndexOf(',') > -1)\n          replicateAfterString = replicateAfterString.substring(0, replicateAfterString.lastIndexOf(','));\n        list.add(REPLICATE_AFTER, replicateAfterString);\n      }\n    }\n    return list;\n  }\n\n","bugFix":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","9be231d18ef58129524215a1d30331523320b744"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"ad94625fb8d088209f46650c8097196fec67f00c":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["dd564545498afb928bdfecf369ec06cd377413d2"],"dd564545498afb928bdfecf369ec06cd377413d2":["9be231d18ef58129524215a1d30331523320b744"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["9be231d18ef58129524215a1d30331523320b744"],"9be231d18ef58129524215a1d30331523320b744":["dd564545498afb928bdfecf369ec06cd377413d2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"dd564545498afb928bdfecf369ec06cd377413d2":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}