{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#backtrackToFloorArc(FST.Arc[T],int,FST.BytesReader).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#backtrackToFloorArc(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backtracks until it finds a node which first arc is before our target label.`\n   * Then on the node, finds the arc just before the targetLabel.\n   *\n   * @return null to continue the seek floor recursion loop.\n   */\n  private FST.Arc<T> backtrackToFloorArc(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    while (true) {\n      // First, walk backwards until we find a node which first arc is before our target label.\n      fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n      if (arc.label() < targetLabel) {\n        // Then on this node, find the arc just before the targetLabel.\n        if (!arc.isLast()) {\n          if (arc.bytesPerArc() != 0 && arc.label() != FST.END_LABEL) {\n            if (arc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n              findNextFloorArcBinarySearch(arc, targetLabel, in);\n            } else {\n              assert arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n              findNextFloorArcDirectAddressing(arc, targetLabel, in);\n            }\n          } else {\n            while (!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n              fst.readNextArc(arc, fstReader);\n            }\n          }\n        }\n        assert arc.label() < targetLabel;\n        assert arc.isLast() || fst.readNextArcLabel(arc, in) >= targetLabel;\n        pushLast();\n        return null;\n      }\n      upto--;\n      if (upto == 0) {\n        return null;\n      }\n      targetLabel = getTargetLabel();\n      arc = getArc(upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}