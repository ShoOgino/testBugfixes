{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5238b7e551c27d6d8b882878a8f8b114bd79f1b5","date":1421397215,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              addFields(epw.getEntity(), doc, arow, vr);\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab65b69ad7fcbfcd696a70e7c5fba438e01e181c","date":1477459930,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              addFields(epw.getEntity(), doc, arow, vr);\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              addFields(epw.getEntity(), doc, arow, vr);\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              addFields(epw.getEntity(), doc, arow, vr);\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              log.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(log, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              log.info(\"Indexing stopped at docCount = {}\", importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(log, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              log.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(log, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitialized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitialized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              log.info(\"Indexing stopped at docCount = {}\", importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          \n          DocWrapper childDoc = null;\n          if (doc != null) {\n            if (epw.getEntity().isChild()) {\n              childDoc = new DocWrapper();\n              handleSpecialCommands(arow, childDoc);\n              addFields(epw.getEntity(), childDoc, arow, vr);\n              doc.addChildDocument(childDoc);\n            } else {\n              handleSpecialCommands(arow, doc);\n              vr.addNamespace(epw.getEntity().getName(), arow);\n              addFields(epw.getEntity(), doc, arow, vr);\n              vr.removeNamespace(epw.getEntity().getName());\n            }\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              if (childDoc != null) {\n              buildDocument(vr, childDoc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              } else {\n                buildDocument(vr, doc,\n                    child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n              }\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(log, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Exception t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c7b0ae5716b6c2044195a818e9ae58205175659"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5","ab65b69ad7fcbfcd696a70e7c5fba438e01e181c"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"ab65b69ad7fcbfcd696a70e7c5fba438e01e181c":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"]},"commit2Childs":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df","ab65b69ad7fcbfcd696a70e7c5fba438e01e181c"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"ab65b69ad7fcbfcd696a70e7c5fba438e01e181c":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}