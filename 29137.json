{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","commits":[{"id":"89d73e5fe1e85c0129078bec992beaab2fb64151","date":1493297705,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ad966686d8994b78aff2375da1a0583bf0cf5ee","date":1493322197,"type":0,"author":"Erik Hatcher","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe0003e68f773002826a322b67378b5bf2e4d4","date":1580488855,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper<WildcardQuery> fiv = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper<WildcardQuery> hund = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper<WildcardQuery> twent = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper<WildcardQuery> nin = new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    SpanMultiTermQueryWrapper fiv = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"fiv*\")));\n    SpanMultiTermQueryWrapper hund = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"hund*\")));\n    SpanMultiTermQueryWrapper twent = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"twent*\")));\n    SpanMultiTermQueryWrapper nin = new SpanMultiTermQueryWrapper(new WildcardQuery(new Term(\"field\", \"nin*\")));\n\n    SpanNearQuery sq = new SpanNearQuery(new SpanQuery[] {fiv, hund, twent, nin}, 0, true);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: 0\"));\n    payloads.add(new BytesRef(\"pos: 1\"));\n    payloads.add(new BytesRef(\"pos: 2\"));\n    payloads.add(new BytesRef(\"pos: 3\"));\n\n    SpanPayloadCheckQuery query = new SpanPayloadCheckQuery(sq, payloads);\n\n    // if query wasn't rewritten properly, the query would have failed with \"Rewrite first!\"\n    checkHits(query, new int[]{529});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89d73e5fe1e85c0129078bec992beaab2fb64151":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"30fe0003e68f773002826a322b67378b5bf2e4d4":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"9ad966686d8994b78aff2375da1a0583bf0cf5ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89d73e5fe1e85c0129078bec992beaab2fb64151"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fe0003e68f773002826a322b67378b5bf2e4d4"]},"commit2Childs":{"89d73e5fe1e85c0129078bec992beaab2fb64151":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"30fe0003e68f773002826a322b67378b5bf2e4d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89d73e5fe1e85c0129078bec992beaab2fb64151","e9017cf144952056066919f1ebc7897ff9bd71b1","9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["30fe0003e68f773002826a322b67378b5bf2e4d4"],"9ad966686d8994b78aff2375da1a0583bf0cf5ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}