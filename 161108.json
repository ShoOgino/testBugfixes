{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","commits":[{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   * @param config optional config to override the one from snapshot, may be null\n   */\n  public SnapshotDistribStateManager(Map<String, Object> snapshot, AutoScalingConfig config) {\n    snapshot.forEach((path, value) -> {\n      Map<String, Object> map = (Map<String, Object>)value;\n      Number version = (Number)map.getOrDefault(\"version\", 0);\n      String owner = (String)map.get(\"owner\");\n      String modeStr = (String)map.getOrDefault(\"mode\", CreateMode.PERSISTENT.toString());\n      CreateMode mode = CreateMode.valueOf(modeStr);\n      byte[] bytes = null;\n      if (map.containsKey(\"data\")) {\n        bytes = Base64.base64ToByteArray((String)map.get(\"data\"));\n      }\n      dataMap.put(path, new VersionedData(version.intValue(), bytes, mode, owner));\n    });\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n    log.debug(\"- loaded snapshot of {} resources\", dataMap.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","sourceNew":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   * @param config optional config to override the one from snapshot, may be null\n   */\n  public SnapshotDistribStateManager(Map<String, Object> snapshot, AutoScalingConfig config) {\n    snapshot.forEach((path, value) -> {\n      Map<String, Object> map = (Map<String, Object>)value;\n      Number version = (Number)map.getOrDefault(\"version\", 0);\n      String owner = (String)map.get(\"owner\");\n      String modeStr = (String)map.getOrDefault(\"mode\", CreateMode.PERSISTENT.toString());\n      CreateMode mode = CreateMode.valueOf(modeStr);\n      byte[] bytes = null;\n      if (map.containsKey(\"data\")) {\n        bytes = Base64.base64ToByteArray((String)map.get(\"data\"));\n      }\n      dataMap.put(path, new VersionedData(version.intValue(), bytes, mode, owner));\n    });\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"- loaded snapshot of {} resources\", dataMap.size());\n    }\n  }\n\n","sourceOld":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   * @param config optional config to override the one from snapshot, may be null\n   */\n  public SnapshotDistribStateManager(Map<String, Object> snapshot, AutoScalingConfig config) {\n    snapshot.forEach((path, value) -> {\n      Map<String, Object> map = (Map<String, Object>)value;\n      Number version = (Number)map.getOrDefault(\"version\", 0);\n      String owner = (String)map.get(\"owner\");\n      String modeStr = (String)map.getOrDefault(\"mode\", CreateMode.PERSISTENT.toString());\n      CreateMode mode = CreateMode.valueOf(modeStr);\n      byte[] bytes = null;\n      if (map.containsKey(\"data\")) {\n        bytes = Base64.base64ToByteArray((String)map.get(\"data\"));\n      }\n      dataMap.put(path, new VersionedData(version.intValue(), bytes, mode, owner));\n    });\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n    log.debug(\"- loaded snapshot of {} resources\", dataMap.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","sourceNew":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   * @param config optional config to override the one from snapshot, may be null\n   */\n  public SnapshotDistribStateManager(Map<String, Object> snapshot, AutoScalingConfig config) {\n    snapshot.forEach((path, value) -> {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> map = (Map<String, Object>)value;\n      Number version = (Number)map.getOrDefault(\"version\", 0);\n      String owner = (String)map.get(\"owner\");\n      String modeStr = (String)map.getOrDefault(\"mode\", CreateMode.PERSISTENT.toString());\n      CreateMode mode = CreateMode.valueOf(modeStr);\n      byte[] bytes = null;\n      if (map.containsKey(\"data\")) {\n        bytes = Base64.base64ToByteArray((String)map.get(\"data\"));\n      }\n      dataMap.put(path, new VersionedData(version.intValue(), bytes, mode, owner));\n    });\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"- loaded snapshot of {} resources\", dataMap.size());\n    }\n  }\n\n","sourceOld":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   * @param config optional config to override the one from snapshot, may be null\n   */\n  public SnapshotDistribStateManager(Map<String, Object> snapshot, AutoScalingConfig config) {\n    snapshot.forEach((path, value) -> {\n      Map<String, Object> map = (Map<String, Object>)value;\n      Number version = (Number)map.getOrDefault(\"version\", 0);\n      String owner = (String)map.get(\"owner\");\n      String modeStr = (String)map.getOrDefault(\"mode\", CreateMode.PERSISTENT.toString());\n      CreateMode mode = CreateMode.valueOf(modeStr);\n      byte[] bytes = null;\n      if (map.containsKey(\"data\")) {\n        bytes = Base64.base64ToByteArray((String)map.get(\"data\"));\n      }\n      dataMap.put(path, new VersionedData(version.intValue(), bytes, mode, owner));\n    });\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"- loaded snapshot of {} resources\", dataMap.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(Map[String,Object],AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * Populate this instance from a previously generated snapshot.\n   * @param snapshot previous snapshot created using this class.\n   * @param config optional config to override the one from snapshot, may be null\n   */\n  public SnapshotDistribStateManager(Map<String, Object> snapshot, AutoScalingConfig config) {\n    snapshot.forEach((path, value) -> {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> map = (Map<String, Object>)value;\n      Number version = (Number)map.getOrDefault(\"version\", 0);\n      String owner = (String)map.get(\"owner\");\n      String modeStr = (String)map.getOrDefault(\"mode\", CreateMode.PERSISTENT.toString());\n      CreateMode mode = CreateMode.valueOf(modeStr);\n      byte[] bytes = null;\n      if (map.containsKey(\"data\")) {\n        bytes = Base64.base64ToByteArray((String)map.get(\"data\"));\n      }\n      dataMap.put(path, new VersionedData(version.intValue(), bytes, mode, owner));\n    });\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"- loaded snapshot of {} resources\", dataMap.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["e35f2dde06b35aa9904949a3a93fabd090371077"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"e35f2dde06b35aa9904949a3a93fabd090371077":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}