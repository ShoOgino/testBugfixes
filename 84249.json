{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#flushConcatenation(WordDelimiterConcatenation).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#flushConcatenation(WordDelimiterConcatenation).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#flushConcatenation(WordDelimiterConcatenation).mjava","sourceNew":"  /**\n   * Flushes the given WordDelimiterConcatenation by either writing its concat and then clearing, or just clearing.\n   *\n   * @param concatenation WordDelimiterConcatenation that will be flushed\n   * @return {@code true} if the concatenation was written before it was cleared, {@code} false otherwise\n   */\n  private boolean flushConcatenation(WordDelimiterConcatenation concatenation) {\n    lastConcatCount = concatenation.subwordCount;\n    if (concatenation.subwordCount != 1 || !shouldGenerateParts(concatenation.type)) {\n      concatenation.writeAndClear();\n      return true;\n    }\n    concatenation.clear();\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Flushes the given WordDelimiterConcatenation by either writing its concat and then clearing, or just clearing.\n   *\n   * @param concatenation WordDelimiterConcatenation that will be flushed\n   * @return {@code true} if the concatenation was written before it was cleared, {@code} false otherwise\n   */\n  private boolean flushConcatenation(WordDelimiterConcatenation concatenation) {\n    lastConcatCount = concatenation.subwordCount;\n    if (concatenation.subwordCount != 1 || !shouldGenerateParts(concatenation.type)) {\n      concatenation.writeAndClear();\n      return true;\n    }\n    concatenation.clear();\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#flushConcatenation(WordDelimiterConcatenation).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#flushConcatenation(WordDelimiterConcatenation).mjava","sourceNew":"  /**\n   * Flushes the given WordDelimiterConcatenation by either writing its concat and then clearing, or just clearing.\n   *\n   * @param concatenation WordDelimiterConcatenation that will be flushed\n   * @return {@code true} if the concatenation was written before it was cleared, {@code false} otherwise\n   */\n  private boolean flushConcatenation(WordDelimiterConcatenation concatenation) {\n    lastConcatCount = concatenation.subwordCount;\n    if (concatenation.subwordCount != 1 || !shouldGenerateParts(concatenation.type)) {\n      concatenation.writeAndClear();\n      return true;\n    }\n    concatenation.clear();\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Flushes the given WordDelimiterConcatenation by either writing its concat and then clearing, or just clearing.\n   *\n   * @param concatenation WordDelimiterConcatenation that will be flushed\n   * @return {@code true} if the concatenation was written before it was cleared, {@code} false otherwise\n   */\n  private boolean flushConcatenation(WordDelimiterConcatenation concatenation) {\n    lastConcatCount = concatenation.subwordCount;\n    if (concatenation.subwordCount != 1 || !shouldGenerateParts(concatenation.type)) {\n      concatenation.writeAndClear();\n      return true;\n    }\n    concatenation.clear();\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}