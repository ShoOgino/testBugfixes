{"path":"lucene/src/java/org/apache/lucene/index/values/Ints.IntsWriter#add(int,long).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Ints.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValuesArray.FixedIntsEnumImpl#FixedIntsEnumImpl(AttributeSource,IndexInput,ValueType,int).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      switch (valueType) {\n      case FIXED_INTS_64:\n        bytesRef.copy(v);\n        break;\n      case FIXED_INTS_32:\n        bytesRef.copy((int) (0xFFFFFFFF & v));\n        break;\n      case FIXED_INTS_16:\n        bytesRef.copy((short) (0xFFFFL & v));\n        break;\n      case FIXED_INTS_8:\n        bytesRef.bytes[0] = (byte) (0xFFL & v);\n        break;\n      default:\n        throw new IllegalStateException(\"illegal type \" + valueType);\n      }\n\n      add(docID, bytesRef);\n    }\n\n","sourceOld":"    private FixedIntsEnumImpl(AttributeSource source, IndexInput dataIn,\n        ValueType type, int maxDoc) throws IOException {\n      super(source, type);\n      switch (type) {\n      case FIXED_INTS_16:\n        sizeInByte = 2;\n        break;\n      case FIXED_INTS_32:\n        sizeInByte = 4;\n        break;\n      case FIXED_INTS_64:\n        sizeInByte = 8;\n        break;\n      case FIXED_INTS_8:\n        sizeInByte = 1;\n        break;\n      default:\n        throw new IllegalStateException(\"type \" + type\n            + \" is not a fixed int type\");\n      }\n      intsRef.offset = 0;\n      this.dataIn = dataIn;\n      this.maxDoc = maxDoc;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Ints.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Ints.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      template.toBytes(v, bytesRef);\n      add(docID, bytesRef);\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, long v) throws IOException {\n      switch (valueType) {\n      case FIXED_INTS_64:\n        bytesRef.copy(v);\n        break;\n      case FIXED_INTS_32:\n        bytesRef.copy((int) (0xFFFFFFFF & v));\n        break;\n      case FIXED_INTS_16:\n        bytesRef.copy((short) (0xFFFFL & v));\n        break;\n      case FIXED_INTS_8:\n        bytesRef.bytes[0] = (byte) (0xFFL & v);\n        break;\n      default:\n        throw new IllegalStateException(\"illegal type \" + valueType);\n      }\n\n      add(docID, bytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Ints.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Ints.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      template.toBytes(v, bytesRef);\n      add(docID, bytesRef);\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, long v) throws IOException {\n      template.toBytes(v, bytesRef);\n      add(docID, bytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Ints.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Ints.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      template.toBytes(v, bytesRef);\n      add(docID, bytesRef);\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, long v) throws IOException {\n      template.toBytes(v, bytesRef);\n      add(docID, bytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}