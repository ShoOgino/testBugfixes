{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","commits":[{"id":"cea5f7a2e31566bda38c740c37affa52b0e9c46e","date":1323436632,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n      HttpClient client = new HttpClient(\n          new MultiThreadedHttpConnectionManager());\n      URL url = new URL(serverPath);\n      \n      if (\"xml\".equals(context.getResolvedEntityAttribute(FORMAT))) {\n        solrServer = new CommonsHttpSolrServer(url, client,\n            new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n      \n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n    \n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(FIELDS);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    \n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n      HttpClient client = new HttpClient(\n          new MultiThreadedHttpConnectionManager());\n      URL url = new URL(serverPath);\n      \n      if (\"xml\".equals(context.getResolvedEntityAttribute(FORMAT))) {\n        solrServer = new CommonsHttpSolrServer(url, client,\n            new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n      \n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n    \n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(FIELDS);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    \n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f30d837eed968a2b64ca9e82f710a6e5511a02","date":1331061399,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new CommonsHttpSolrServer(url, client, new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n      HttpClient client = new HttpClient(\n          new MultiThreadedHttpConnectionManager());\n      URL url = new URL(serverPath);\n      \n      if (\"xml\".equals(context.getResolvedEntityAttribute(FORMAT))) {\n        solrServer = new CommonsHttpSolrServer(url, client,\n            new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n      \n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n    \n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(FIELDS);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    \n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new CommonsHttpSolrServer(url, client, new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n      HttpClient client = new HttpClient(\n          new MultiThreadedHttpConnectionManager());\n      URL url = new URL(serverPath);\n      \n      if (\"xml\".equals(context.getResolvedEntityAttribute(FORMAT))) {\n        solrServer = new CommonsHttpSolrServer(url, client,\n            new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n      \n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n    \n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(FIELDS);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    \n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new CommonsHttpSolrServer(url, client, new XMLResponseParser(), false);\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new CommonsHttpSolrServer(url, client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6b04f26b53089e5455892cda06cc4736c41da0b","date":1337008032,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n    \n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n    \n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n    \n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      // TODO: we should close this client!\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should shutdown this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should shutdown this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      // TODO: we should close this client!\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      // TODO: we should close this client!\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should shutdown this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should shutdown this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      // TODO: we should close this client!\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      // TODO: we should close this client!\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrServer = new HttpSolrServer(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      // TODO: we should close this client!\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .withResponseParser(new XMLResponseParser())\n            .build();\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .build();\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .withResponseParser(new XMLResponseParser())\n            .build();\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .build();\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client, new XMLResponseParser());\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new HttpSolrClient(url.toExternalForm(), client);\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .withResponseParser(new XMLResponseParser())\n            .build();\n        log.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .build();\n        log.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .withResponseParser(new XMLResponseParser())\n            .build();\n        LOG.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .build();\n        LOG.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#firstInit(Context).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void firstInit(Context context) {\n    super.firstInit(context);\n    \n    try {\n      String serverPath = context.getResolvedEntityAttribute(SOLR_SERVER);\n      if (serverPath == null) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"SolrEntityProcessor: parameter 'url' is required\");\n      }\n\n      HttpClient client = getHttpClient();\n      URL url = new URL(serverPath);\n      // (wt=\"javabin|xml\") default is javabin\n      if (\"xml\".equals(context.getResolvedEntityAttribute(CommonParams.WT))) {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .withResponseParser(new XMLResponseParser())\n            .build();\n        log.info(\"using XMLResponseParser\");\n      } else {\n        // TODO: it doesn't matter for this impl when passing a client currently, but we should close this!\n        solrClient = new Builder(url.toExternalForm())\n            .withHttpClient(client)\n            .build();\n        log.info(\"using BinaryResponseParser\");\n      }\n    } catch (MalformedURLException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6b04f26b53089e5455892cda06cc4736c41da0b":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","54f30d837eed968a2b64ca9e82f710a6e5511a02"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["54f30d837eed968a2b64ca9e82f710a6e5511a02"],"bafca15d8e408346a67f4282ad1143b88023893b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"54f30d837eed968a2b64ca9e82f710a6e5511a02":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["f6b04f26b53089e5455892cda06cc4736c41da0b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"f6b04f26b53089e5455892cda06cc4736c41da0b":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","54f30d837eed968a2b64ca9e82f710a6e5511a02"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["f6b04f26b53089e5455892cda06cc4736c41da0b"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54f30d837eed968a2b64ca9e82f710a6e5511a02":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["bafca15d8e408346a67f4282ad1143b88023893b"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}