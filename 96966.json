{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","commits":[{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","sourceNew":"  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all shards\", asyncId, requestMap);\n  }\n\n","sourceOld":"  private void copyIndexFiles(URI backupPath, ZkNodeProps request, NamedList results) throws Exception {\n    String collectionName = request.getStr(COLLECTION_PROP);\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all shards\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","sourceNew":"  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      shardRequestTracker.sendShardRequest(replica.getNodeName(), params, shardHandler);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    shardRequestTracker.processResponses(results, shardHandler, true, \"Could not backup all shards\");\n  }\n\n","sourceOld":"  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all shards\", asyncId, requestMap);\n  }\n\n","bugFix":["b2ad92550399520cc0148c3ee5ca087706f12da4","fae84bbf6b9010357c7cbc15871b8df9a785f330"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      shardRequestTracker.sendShardRequest(replica.getNodeName(), params, shardHandler);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    shardRequestTracker.processResponses(results, shardHandler, true, \"Could not backup all shards\");\n  }\n\n","sourceOld":"  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      shardRequestTracker.sendShardRequest(replica.getNodeName(), params, shardHandler);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    shardRequestTracker.processResponses(results, shardHandler, true, \"Could not backup all shards\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,String,ZkNodeProps,NamedList).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      shardRequestTracker.sendShardRequest(replica.getNodeName(), params, shardHandler);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    shardRequestTracker.processResponses(results, shardHandler, true, \"Could not backup all shards\");\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private void copyIndexFiles(URI backupPath, String collectionName, ZkNodeProps request, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler(ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      shardRequestTracker.sendShardRequest(replica.getNodeName(), params, shardHandler);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    shardRequestTracker.processResponses(results, shardHandler, true, \"Could not backup all shards\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["69e6520a21709190413a63084ed135271aab1a7c"],"69e6520a21709190413a63084ed135271aab1a7c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"69e6520a21709190413a63084ed135271aab1a7c":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["69e6520a21709190413a63084ed135271aab1a7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}