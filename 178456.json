{"path":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new MockRAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory(random);\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new MockRAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":null,"sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}