{"path":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    } else {\n      prefix = \".f\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8969a184df55d25d61e85be785987fbf830d4028","date":1168143561,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n    \n\n    if (withNrm()) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, 0);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    } else {\n      prefix = \".f\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf3977590572c7fced6fb6cd7de274a8cf09eca7","date":1168512679,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (withNrm()) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, 0);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n    \n\n    if (withNrm()) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, 0);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, 0);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (withNrm()) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, 0);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, WITHOUT_GEN);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = 0;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, 0);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, WITHOUT_GEN);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, WITHOUT_GEN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    return IndexFileNames.fileNameFromGeneration(name, \"f\" + number, WITHOUT_GEN);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    String prefix;\n\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      prefix = \".s\";\n      return IndexFileNames.fileNameFromGeneration(name, prefix + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      prefix = \".\" + IndexFileNames.NORMS_EXTENSION;\n      return IndexFileNames.fileNameFromGeneration(name, prefix, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    prefix = \".f\";\n    return IndexFileNames.fileNameFromGeneration(name, prefix + number, WITHOUT_GEN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#getNormFileName(int).mjava","sourceNew":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    return IndexFileNames.fileNameFromGeneration(name, \"f\" + number, WITHOUT_GEN);\n  }\n\n","sourceOld":"  /**\n   * Get the file name for the norms file for this field.\n   *\n   * @param number field index\n   */\n  public String getNormFileName(int number) throws IOException {\n    long gen;\n    if (normGen == null) {\n      gen = CHECK_DIR;\n    } else {\n      gen = normGen[number];\n    }\n    \n    if (hasSeparateNorms(number)) {\n      // case 1: separate norm\n      return IndexFileNames.fileNameFromGeneration(name, \"s\" + number, gen);\n    }\n\n    if (hasSingleNormFile) {\n      // case 2: lockless (or nrm file exists) - single file for all norms \n      return IndexFileNames.fileNameFromGeneration(name, IndexFileNames.NORMS_EXTENSION, WITHOUT_GEN);\n    }\n      \n    // case 3: norm file for each field\n    return IndexFileNames.fileNameFromGeneration(name, \"f\" + number, WITHOUT_GEN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"8a5cfde941b2f8208d739344fef3821381885618":["cf3977590572c7fced6fb6cd7de274a8cf09eca7"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"775efee7f959e0dd3df7960b93767d9e00b78751":["f33fc116e28d7704378c9dd333711753bd0c9706"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8a5cfde941b2f8208d739344fef3821381885618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf3977590572c7fced6fb6cd7de274a8cf09eca7":["8969a184df55d25d61e85be785987fbf830d4028"],"8969a184df55d25d61e85be785987fbf830d4028":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["775efee7f959e0dd3df7960b93767d9e00b78751"],"8a5cfde941b2f8208d739344fef3821381885618":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["8969a184df55d25d61e85be785987fbf830d4028"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["f33fc116e28d7704378c9dd333711753bd0c9706"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cf3977590572c7fced6fb6cd7de274a8cf09eca7":["8a5cfde941b2f8208d739344fef3821381885618"],"8969a184df55d25d61e85be785987fbf830d4028":["cf3977590572c7fced6fb6cd7de274a8cf09eca7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}