{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","sourceNew":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","sourceNew":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testSeparateReaderAndWriter().mjava","sourceNew":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**  Test that if separate reader and writer objects are opened, new\n    categories written into the writer are available to a reader only\n    after a commit().\n    Note that this test obviously doesn't cover all the different\n    concurrency scenarios, all different methods, and so on. We may\n    want to write more tests of this sort.\n\n    This test simulates what would happen when there are two separate\n    processes, one doing indexing, and the other searching, and each opens\n    its own object (with obviously no connection between the objects) using\n    the same disk files. Note, though, that this test does not test what\n    happens when the two processes do their actual work at exactly the same\n    time.\n    It also doesn't test multi-threading.\n   */\n  @Test\n  public void testSeparateReaderAndWriter() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.commit();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n\n    int author = 1;\n\n    // getParent() and getSize() test:\n    try {\n      tr.getParent(author);\n      fail(\"Initially, getParent for \"+author+\" should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // the empty taxonomy has size 1 (the root)\n    tw.addCategory(new CategoryPath(\"Author\"));\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh(); // this is not enough, because tw.commit() hasn't been done yet\n    try {\n      tr.getParent(author);\n      fail(\"Before commit() and refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tw.commit();\n    try {\n      tr.getParent(author);\n      fail(\"Before refresh(), getParent for \"+author+\" should still throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    assertEquals(1, tr.getSize()); // still root only...\n    tr.refresh();\n    try {\n      assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n      // ok\n    } catch (ArrayIndexOutOfBoundsException e) {\n      fail(\"After category addition, commit() and refresh(), getParent for \"+author+\" should NOT throw exception\");\n    }\n    assertEquals(2, tr.getSize()); // finally, see there are two categories\n\n    // now, add another category, and verify that after commit and refresh\n    // the parent of this category is correct (this requires the reader\n    // to correctly update its prefetched parent vector), and that the\n    // old information also wasn't ruined:\n    tw.addCategory(new CategoryPath(\"Author\", \"Richard Dawkins\"));\n    int dawkins = 2;\n    tw.commit();\n    tr.refresh();\n    assertEquals(author, tr.getParent(dawkins));\n    assertEquals(TaxonomyReader.ROOT_ORDINAL, tr.getParent(author));\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tr.getParent(TaxonomyReader.ROOT_ORDINAL));\n    assertEquals(3, tr.getSize()); \n    tw.close();\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}