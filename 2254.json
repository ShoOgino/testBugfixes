{"path":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","commits":[{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,TermsEnum,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n          + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private TermsEnum updateWeights(LeafReader leafReader, TermsEnum reuse,\n                                  int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                                  double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator(reuse);\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n          + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n    reuse = cte;\n    return reuse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n          + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(IndexReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":"  private void updateWeights(IndexReader indexReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = indexReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","sourceOld":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateWeights(LeafReader,int,Boolean,SortedMap[String,Double],double,boolean).mjava","sourceNew":null,"sourceOld":"  private void updateWeights(LeafReader leafReader,\n                             int docId, Boolean assignedClass, SortedMap<String, Double> weights,\n                             double modifier, boolean updateFST) throws IOException {\n    TermsEnum cte = textTerms.iterator();\n\n    // get the doc term vectors\n    Terms terms = leafReader.getTermVector(docId, textFieldName);\n\n    if (terms == null) {\n      throw new IOException(\"term vectors must be stored for field \"\n              + textFieldName);\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n\n    BytesRef term;\n\n    while ((term = termsEnum.next()) != null) {\n      cte.seekExact(term);\n      if (assignedClass != null) {\n        long termFreqLocal = termsEnum.totalTermFreq();\n        // update weights\n        Long previousValue = Util.get(fst, term);\n        String termString = term.utf8ToString();\n        weights.put(termString, previousValue == null ? 0 : previousValue + modifier * termFreqLocal);\n      }\n    }\n    if (updateFST) {\n      updateFST(weights);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9ba9b7b122d927a15ff4837e3d72876c609fef1b","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}