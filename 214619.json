{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","commits":[{"id":"aef49b0f5a8baba3aec5efd1b59ff4f54515a48c","date":1365073478,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","sourceNew":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.shutdown();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","sourceNew":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.shutdown();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.shutdown();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","sourceNew":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.shutdown();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOpenIfChangedNRTToCommit().mjava","sourceNew":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenIfChangedNRTToCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    // Can't use RIW because it randomly commits:\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(1, commits.size());\n    w.addDocument(doc);\n    DirectoryReader r = DirectoryReader.open(w, true);\n\n    assertEquals(2, r.numDocs());\n    IndexReader r2 = DirectoryReader.openIfChanged(r, commits.get(0));\n    assertNotNull(r2);\n    r.close();\n    assertEquals(1, r2.numDocs());\n    w.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"aef49b0f5a8baba3aec5efd1b59ff4f54515a48c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["aef49b0f5a8baba3aec5efd1b59ff4f54515a48c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"aef49b0f5a8baba3aec5efd1b59ff4f54515a48c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aef49b0f5a8baba3aec5efd1b59ff4f54515a48c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2a1862266772deb28cdcb7d996b64d2177022687"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}