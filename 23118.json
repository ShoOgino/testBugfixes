{"path":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa968010b9c6598d02666b7b879c12e3cb0db4ee","date":1359063766,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fa968010b9c6598d02666b7b879c12e3cb0db4ee","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}