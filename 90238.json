{"path":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost(), 0.1);\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost(), 0.1);\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost(), 0.1);\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost(), 0.1);\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost() );\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost() );\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost() );\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost() );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost(), 0.1);\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost(), 0.1);\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost(), 0.1);\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost(), 0.1);\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader(null, inputFactory);\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost(), 0.1);\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost(), 0.1);\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost(), 0.1);\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost(), 0.1);\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest#testReadDoc().mjava","sourceNew":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","sourceOld":"  @Test\n  public void testReadDoc() throws Exception\n  {\n    String xml = \n      \"<doc boost=\\\"5.5\\\">\" +\n      \"  <field name=\\\"id\\\" boost=\\\"2.2\\\">12345</field>\" +\n      \"  <field name=\\\"name\\\">kitten</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"3\\\">aaa</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"4\\\">bbb</field>\" +\n      \"  <field name=\\\"cat\\\" boost=\\\"5\\\">bbb</field>\" +\n      \"  <field name=\\\"ab\\\">a&amp;b</field>\" +\n      \"</doc>\";\n\n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument doc = loader.readDoc( parser );\n    \n    // Read boosts\n    assertEquals( 5.5f, doc.getDocumentBoost(), 0.1);\n    assertEquals( 1.0f, doc.getField( \"name\" ).getBoost(), 0.1);\n    assertEquals( 2.2f, doc.getField( \"id\" ).getBoost(), 0.1);\n    // Boost is the product of each value\n    assertEquals( (3*4*5.0f), doc.getField( \"cat\" ).getBoost(), 0.1);\n    \n    // Read values\n    assertEquals( \"12345\", doc.getField( \"id\" ).getValue() );\n    assertEquals( \"kitten\", doc.getField( \"name\").getValue() );\n    assertEquals( \"a&b\", doc.getField( \"ab\").getValue() ); // read something with escaped characters\n    \n    Collection<Object> out = doc.getField( \"cat\" ).getValues();\n    assertEquals( 3, out.size() );\n    assertEquals( \"[aaa, bbb, bbb]\", out.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["acd9883560fd89e6448b2b447302fe543040cd4f"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["042e4d934397657ba04c82b46cc5665076bc5c58"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}