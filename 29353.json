{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQueue(Map[String,Map[String,Int]]).mjava","commits":[{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQueue(Map[String,Map[String,Int]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a PriorityQueue from a word-&gt;tf map.\n   *\n   * @param perFieldTermFrequencies a per field map of words keyed on the word(String) with Int objects as the values.\n   */\n  private PriorityQueue<ScoreTerm> createQueue(Map<String, Map<String, Int>> perFieldTermFrequencies) throws IOException {\n    // have collected all words in doc and their freqs\n    int numDocs = ir.numDocs();\n    final int limit = Math.min(maxQueryTerms, this.getTermsCount(perFieldTermFrequencies));\n    FreqQ queue = new FreqQ(limit); // will order words by score\n    for (Map.Entry<String, Map<String, Int>> entry : perFieldTermFrequencies.entrySet()) {\n      Map<String, Int> perWordTermFrequencies = entry.getValue();\n      String fieldName = entry.getKey();\n\n      for (Map.Entry<String, Int> tfEntry : perWordTermFrequencies.entrySet()) { // for every word\n        String word = tfEntry.getKey();\n        int tf = tfEntry.getValue().x; // term freq in the source doc\n        if (minTermFreq > 0 && tf < minTermFreq) {\n          continue; // filter out words that don't occur enough times in the source\n        }\n\n        int docFreq = ir.docFreq(new Term(fieldName, word));\n\n        if (minDocFreq > 0 && docFreq < minDocFreq) {\n          continue; // filter out words that don't occur in enough docs\n        }\n\n        if (docFreq > maxDocFreq) {\n          continue; // filter out words that occur in too many docs\n        }\n\n        if (docFreq == 0) {\n          continue; // index update problem?\n        }\n\n        float idf = similarity.idf(docFreq, numDocs);\n        float score = tf * idf;\n\n        if (queue.size() < limit) {\n          // there is still space in the queue\n          queue.add(new ScoreTerm(word, fieldName, score, idf, docFreq, tf));\n        } else {\n          ScoreTerm term = queue.top();\n          if (term.score < score) { // update the smallest in the queue in place and update the queue.\n            term.update(word, fieldName, score, idf, docFreq, tf);\n            queue.updateTop();\n          }\n        }\n      }\n    }\n    return queue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"312ce82a5cb8caabe17229d90ef49e89efc2a10b","date":1569387506,"type":3,"author":"Andrew Hind","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQueue(Map[String,Map[String,Int]]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQueue(Map[String,Map[String,Int]]).mjava","sourceNew":"  /**\n   * Create a PriorityQueue from a word-&gt;tf map.\n   *\n   * @param perFieldTermFrequencies a per field map of words keyed on the word(String) with Int objects as the values.\n   */\n  private PriorityQueue<ScoreTerm> createQueue(Map<String, Map<String, Int>> perFieldTermFrequencies) throws IOException {\n    // have collected all words in doc and their freqs\n    final int limit = Math.min(maxQueryTerms, this.getTermsCount(perFieldTermFrequencies));\n    FreqQ queue = new FreqQ(limit); // will order words by score\n    for (Map.Entry<String, Map<String, Int>> entry : perFieldTermFrequencies.entrySet()) {\n      Map<String, Int> perWordTermFrequencies = entry.getValue();\n      String fieldName = entry.getKey();\n\n      long numDocs = ir.getDocCount(fieldName);\n      if(numDocs == -1) {\n        numDocs = ir.numDocs();\n      }\n\n      for (Map.Entry<String, Int> tfEntry : perWordTermFrequencies.entrySet()) { // for every word\n        String word = tfEntry.getKey();\n        int tf = tfEntry.getValue().x; // term freq in the source doc\n        if (minTermFreq > 0 && tf < minTermFreq) {\n          continue; // filter out words that don't occur enough times in the source\n        }\n\n        int docFreq = ir.docFreq(new Term(fieldName, word));\n\n        if (minDocFreq > 0 && docFreq < minDocFreq) {\n          continue; // filter out words that don't occur in enough docs\n        }\n\n        if (docFreq > maxDocFreq) {\n          continue; // filter out words that occur in too many docs\n        }\n\n        if (docFreq == 0) {\n          continue; // index update problem?\n        }\n\n        float idf = similarity.idf(docFreq, numDocs);\n        float score = tf * idf;\n\n        if (queue.size() < limit) {\n          // there is still space in the queue\n          queue.add(new ScoreTerm(word, fieldName, score, idf, docFreq, tf));\n        } else {\n          ScoreTerm term = queue.top();\n          if (term.score < score) { // update the smallest in the queue in place and update the queue.\n            term.update(word, fieldName, score, idf, docFreq, tf);\n            queue.updateTop();\n          }\n        }\n      }\n    }\n    return queue;\n  }\n\n","sourceOld":"  /**\n   * Create a PriorityQueue from a word-&gt;tf map.\n   *\n   * @param perFieldTermFrequencies a per field map of words keyed on the word(String) with Int objects as the values.\n   */\n  private PriorityQueue<ScoreTerm> createQueue(Map<String, Map<String, Int>> perFieldTermFrequencies) throws IOException {\n    // have collected all words in doc and their freqs\n    int numDocs = ir.numDocs();\n    final int limit = Math.min(maxQueryTerms, this.getTermsCount(perFieldTermFrequencies));\n    FreqQ queue = new FreqQ(limit); // will order words by score\n    for (Map.Entry<String, Map<String, Int>> entry : perFieldTermFrequencies.entrySet()) {\n      Map<String, Int> perWordTermFrequencies = entry.getValue();\n      String fieldName = entry.getKey();\n\n      for (Map.Entry<String, Int> tfEntry : perWordTermFrequencies.entrySet()) { // for every word\n        String word = tfEntry.getKey();\n        int tf = tfEntry.getValue().x; // term freq in the source doc\n        if (minTermFreq > 0 && tf < minTermFreq) {\n          continue; // filter out words that don't occur enough times in the source\n        }\n\n        int docFreq = ir.docFreq(new Term(fieldName, word));\n\n        if (minDocFreq > 0 && docFreq < minDocFreq) {\n          continue; // filter out words that don't occur in enough docs\n        }\n\n        if (docFreq > maxDocFreq) {\n          continue; // filter out words that occur in too many docs\n        }\n\n        if (docFreq == 0) {\n          continue; // index update problem?\n        }\n\n        float idf = similarity.idf(docFreq, numDocs);\n        float score = tf * idf;\n\n        if (queue.size() < limit) {\n          // there is still space in the queue\n          queue.add(new ScoreTerm(word, fieldName, score, idf, docFreq, tf));\n        } else {\n          ScoreTerm term = queue.top();\n          if (term.score < score) { // update the smallest in the queue in place and update the queue.\n            term.update(word, fieldName, score, idf, docFreq, tf);\n            queue.updateTop();\n          }\n        }\n      }\n    }\n    return queue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"312ce82a5cb8caabe17229d90ef49e89efc2a10b":["e562682007e295029696e354ac6947531b083c79"],"e562682007e295029696e354ac6947531b083c79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["312ce82a5cb8caabe17229d90ef49e89efc2a10b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e562682007e295029696e354ac6947531b083c79"],"312ce82a5cb8caabe17229d90ef49e89efc2a10b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e562682007e295029696e354ac6947531b083c79":["312ce82a5cb8caabe17229d90ef49e89efc2a10b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}