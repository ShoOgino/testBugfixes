{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b86c66b8ec7ad1e131e634ec57fa65fb900deff3","date":1340911206,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","date":1340946597,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0 to 0.5\n   * @return 1 to maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0 to 0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    Rectangle bbox = shape.getBoundingBox();\n    //The diagonal distance should be the same computed from any opposite corner,\n    // and this is the longest distance that might be occurring within the shape.\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    //convert to degrees    //TODO not needed in Spatial4j 0.3\n    diagonalDist = ctx.getDistCalc().distanceToDegrees(diagonalDist);\n    return getLevelForDistance(diagonalDist * 0.5 * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0 to 0.5\n   * @return 1 to maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0 to 0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    Rectangle bbox = shape.getBoundingBox();\n    //The diagonal distance should be the same computed from any opposite corner,\n    // and this is the longest distance that might be occurring within the shape.\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    //convert to degrees    //TODO not needed in Spatial4j 0.3\n    diagonalDist = ctx.getDistCalc().distanceToDegrees(diagonalDist);\n    return getLevelForDistance(diagonalDist * 0.5 * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0 to 0.5\n   * @return 1 to maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0 to 0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    Rectangle bbox = shape.getBoundingBox();\n    //The diagonal distance should be the same computed from any opposite corner,\n    // and this is the longest distance that might be occurring within the shape.\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    return getLevelForDistance(diagonalDist * 0.5 * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0 to 0.5\n   * @return 1 to maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0 to 0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    Rectangle bbox = shape.getBoundingBox();\n    //The diagonal distance should be the same computed from any opposite corner,\n    // and this is the longest distance that might be occurring within the shape.\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    //convert to degrees    //TODO not needed in Spatial4j 0.3\n    diagonalDist = ctx.getDistCalc().distanceToDegrees(diagonalDist);\n    return getLevelForDistance(diagonalDist * 0.5 * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2410e27320f6aaba450cbf500d7822baf642f8","date":1347075066,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/query/SpatialArgs#calcDistanceFromErrPct(Shape,double,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * Computes the distance given a shape and the {@code distErrPct}.  The\n   * algorithm is the fraction of the distance from the center of the query\n   * shape to its furthest bounding box corner.\n   *\n   * @param shape Mandatory.\n   * @param distErrPct 0 to 0.5\n   * @param ctx Mandatory\n   * @return A distance (in degrees).\n   */\n  public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {\n    if (distErrPct < 0 || distErrPct > 0.5) {\n      throw new IllegalArgumentException(\"distErrPct \" + distErrPct + \" must be between [0 to 0.5]\");\n    }\n    if (distErrPct == 0 || shape instanceof Point) {\n      return 0;\n    }\n    Rectangle bbox = shape.getBoundingBox();\n    //The diagonal distance should be the same computed from any opposite corner,\n    // and this is the longest distance that might be occurring within the shape.\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    return diagonalDist * 0.5 * distErrPct;\n  }\n\n","sourceOld":"  /**\n   * See {@link org.apache.lucene.spatial.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param precision 0 to 0.5\n   * @return 1 to maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0 to 0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    Rectangle bbox = shape.getBoundingBox();\n    //The diagonal distance should be the same computed from any opposite corner,\n    // and this is the longest distance that might be occurring within the shape.\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    return getLevelForDistance(diagonalDist * 0.5 * precision);\n  }\n\n","bugFix":null,"bugIntro":["7c90482bb4315545b796a647ca4b9bbb2c9c31f3"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6e2410e27320f6aaba450cbf500d7822baf642f8":["da956410d7a790f567af4e7e94584fb0930212f2"],"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd":["b86c66b8ec7ad1e131e634ec57fa65fb900deff3"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"da956410d7a790f567af4e7e94584fb0930212f2":["85ac3534293008a0b7704f8ba54592d51fd29fa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b86c66b8ec7ad1e131e634ec57fa65fb900deff3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e2410e27320f6aaba450cbf500d7822baf642f8"]},"commit2Childs":{"6e2410e27320f6aaba450cbf500d7822baf642f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b86c66b8ec7ad1e131e634ec57fa65fb900deff3"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["d0d1f90e969803cc84174589b5e4a39b7935fecd","da956410d7a790f567af4e7e94584fb0930212f2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"da956410d7a790f567af4e7e94584fb0930212f2":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b86c66b8ec7ad1e131e634ec57fa65fb900deff3":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}