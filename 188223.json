{"path":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":null,"sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd1db40ae856a49ef526079829c557533f2b50f","date":1287093509,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f52e7c0cb4097e605c70fddeb4ab67467dbfd3de","date":1287102627,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c220849f876de24a79f756f65b3eb045db59f63f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","f52e7c0cb4097e605c70fddeb4ab67467dbfd3de"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["f52e7c0cb4097e605c70fddeb4ab67467dbfd3de"],"cdd1db40ae856a49ef526079829c557533f2b50f":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"f52e7c0cb4097e605c70fddeb4ab67467dbfd3de":["cdd1db40ae856a49ef526079829c557533f2b50f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c220849f876de24a79f756f65b3eb045db59f63f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["afeb033b2bd36d8ce9d82142b197da4dde13068b","f52e7c0cb4097e605c70fddeb4ab67467dbfd3de"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c220849f876de24a79f756f65b3eb045db59f63f":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cdd1db40ae856a49ef526079829c557533f2b50f":["f52e7c0cb4097e605c70fddeb4ab67467dbfd3de"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"f52e7c0cb4097e605c70fddeb4ab67467dbfd3de":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cdd1db40ae856a49ef526079829c557533f2b50f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}