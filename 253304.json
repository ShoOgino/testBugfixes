{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","commits":[{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","pathOld":"/dev/null","sourceNew":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = builder.finish();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRef());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRef());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","sourceNew":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = builder.finish();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","sourceOld":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = builder.finish();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRef());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRef());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","bugFix":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","sourceNew":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = fstCompiler.compile();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","sourceOld":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = builder.finish();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRejectNoLimits().mjava","sourceNew":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = fstCompiler.compile();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","sourceOld":"  public void testRejectNoLimits() throws IOException {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), 22L);\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), 7L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcd\"), scratch), 17L);\n    builder.add(Util.toIntsRef(new BytesRef(\"adcde\"), scratch), 17L);\n\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), 17L);\n    final FST<Long> fst = builder.finish();\n    final AtomicInteger rejectCount = new AtomicInteger();\n    Util.TopNSearcher<Long> searcher = new Util.TopNSearcher<Long>(fst, 2, 6, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    Util.TopResults<Long> res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertTrue(res.isComplete); // rejected(4) + topN(2) <= maxQueueSize(6)\n\n    assertEquals(1, res.topN.size());\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.longValue());\n    rejectCount.set(0);\n    searcher = new Util.TopNSearcher<Long>(fst, 2, 5, minLongComparator) {\n      @Override\n      protected boolean acceptResult(IntsRef input, Long output) {\n        boolean accept = output.intValue() == 7;\n        if (!accept) {\n          rejectCount.incrementAndGet();\n        }\n        return accept;\n      }\n    };\n\n    searcher.addStartPaths(fst.getFirstArc(new FST.Arc<Long>()),  outputs.getNoOutput(), true, new IntsRefBuilder());\n    res = searcher.search();\n    assertEquals(rejectCount.get(), 4);\n    assertFalse(res.isComplete); // rejected(4) + topN(2) > maxQueueSize(5)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d245db17aaa41b338dae9da5d4edba4dd6f61612":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"d245db17aaa41b338dae9da5d4edba4dd6f61612":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}