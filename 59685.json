{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":null,"sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":null,"sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":null,"sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}