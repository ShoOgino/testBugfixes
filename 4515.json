{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testGroupHeadSelector().mjava","commits":[{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testGroupHeadSelector().mjava","pathOld":"/dev/null","sourceNew":"  public void testGroupHeadSelector() {\n    GroupHeadSelector s;\n    \n    try {\n      s = GroupHeadSelector.build(params(\"sort\", \"foo_s asc\", \"min\", \"bar_s\"));\n      fail(\"no exception with multi criteria\");\n    } catch (SolrException e) {\n      // expected\n    }\n    \n    s = GroupHeadSelector.build(params(\"min\", \"foo_s\"));\n    assertEquals(GroupHeadSelectorType.MIN, s.type);\n    assertEquals(\"foo_s\", s.selectorText);\n\n    s = GroupHeadSelector.build(params(\"max\", \"foo_s\"));\n    assertEquals(GroupHeadSelectorType.MAX, s.type);\n    assertEquals(\"foo_s\", s.selectorText);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"foo_s\", \"other\", \"stuff\"))));\n\n    s = GroupHeadSelector.build(params());\n    assertEquals(GroupHeadSelectorType.SCORE, s.type);\n    assertNotNull(s.selectorText);\n    assertEquals(GroupHeadSelector.build(params()), s);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"BAR_s\"))));\n\n    s = GroupHeadSelector.build(params(\"sort\", \"foo_s asc\"));\n    assertEquals(GroupHeadSelectorType.SORT, s.type);\n    assertEquals(\"foo_s asc\", s.selectorText);\n    assertEquals(GroupHeadSelector.build(params(\"sort\", \"foo_s asc\")),\n                 s);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"sort\", \"BAR_s asc\"))));\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"BAR_s\"))));\n    assertFalse(s.equals(GroupHeadSelector.build(params())));\n\n    assertEquals(GroupHeadSelector.build(params(\"sort\", \"foo_s asc\")).hashCode(),\n                 GroupHeadSelector.build(params(\"sort\", \"foo_s asc\",\n                                                \"other\", \"stuff\")).hashCode());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testGroupHeadSelector().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testGroupHeadSelector().mjava","sourceNew":"  public void testGroupHeadSelector() {\n    GroupHeadSelector s;\n\n    expectThrows(SolrException.class, \"no exception with multi criteria\",\n        () -> GroupHeadSelector.build(params(\"sort\", \"foo_s asc\", \"min\", \"bar_s\"))\n    );\n    \n    s = GroupHeadSelector.build(params(\"min\", \"foo_s\"));\n    assertEquals(GroupHeadSelectorType.MIN, s.type);\n    assertEquals(\"foo_s\", s.selectorText);\n\n    s = GroupHeadSelector.build(params(\"max\", \"foo_s\"));\n    assertEquals(GroupHeadSelectorType.MAX, s.type);\n    assertEquals(\"foo_s\", s.selectorText);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"foo_s\", \"other\", \"stuff\"))));\n\n    s = GroupHeadSelector.build(params());\n    assertEquals(GroupHeadSelectorType.SCORE, s.type);\n    assertNotNull(s.selectorText);\n    assertEquals(GroupHeadSelector.build(params()), s);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"BAR_s\"))));\n\n    s = GroupHeadSelector.build(params(\"sort\", \"foo_s asc\"));\n    assertEquals(GroupHeadSelectorType.SORT, s.type);\n    assertEquals(\"foo_s asc\", s.selectorText);\n    assertEquals(GroupHeadSelector.build(params(\"sort\", \"foo_s asc\")),\n                 s);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"sort\", \"BAR_s asc\"))));\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"BAR_s\"))));\n    assertFalse(s.equals(GroupHeadSelector.build(params())));\n\n    assertEquals(GroupHeadSelector.build(params(\"sort\", \"foo_s asc\")).hashCode(),\n                 GroupHeadSelector.build(params(\"sort\", \"foo_s asc\",\n                                                \"other\", \"stuff\")).hashCode());\n    \n  }\n\n","sourceOld":"  public void testGroupHeadSelector() {\n    GroupHeadSelector s;\n    \n    try {\n      s = GroupHeadSelector.build(params(\"sort\", \"foo_s asc\", \"min\", \"bar_s\"));\n      fail(\"no exception with multi criteria\");\n    } catch (SolrException e) {\n      // expected\n    }\n    \n    s = GroupHeadSelector.build(params(\"min\", \"foo_s\"));\n    assertEquals(GroupHeadSelectorType.MIN, s.type);\n    assertEquals(\"foo_s\", s.selectorText);\n\n    s = GroupHeadSelector.build(params(\"max\", \"foo_s\"));\n    assertEquals(GroupHeadSelectorType.MAX, s.type);\n    assertEquals(\"foo_s\", s.selectorText);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"foo_s\", \"other\", \"stuff\"))));\n\n    s = GroupHeadSelector.build(params());\n    assertEquals(GroupHeadSelectorType.SCORE, s.type);\n    assertNotNull(s.selectorText);\n    assertEquals(GroupHeadSelector.build(params()), s);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"BAR_s\"))));\n\n    s = GroupHeadSelector.build(params(\"sort\", \"foo_s asc\"));\n    assertEquals(GroupHeadSelectorType.SORT, s.type);\n    assertEquals(\"foo_s asc\", s.selectorText);\n    assertEquals(GroupHeadSelector.build(params(\"sort\", \"foo_s asc\")),\n                 s);\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"sort\", \"BAR_s asc\"))));\n    assertFalse(s.equals(GroupHeadSelector.build(params(\"min\", \"BAR_s\"))));\n    assertFalse(s.equals(GroupHeadSelector.build(params())));\n\n    assertEquals(GroupHeadSelector.build(params(\"sort\", \"foo_s asc\")).hashCode(),\n                 GroupHeadSelector.build(params(\"sort\", \"foo_s asc\",\n                                                \"other\", \"stuff\")).hashCode());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0325de99180d346d61d36938843a5c8451fe26ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["0325de99180d346d61d36938843a5c8451fe26ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["464e7336798bc8a1281d5cf610c649c5a0784e83"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0325de99180d346d61d36938843a5c8451fe26ae"],"0325de99180d346d61d36938843a5c8451fe26ae":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}