{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(peek()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(peek()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be46ccf1a05985ba9fec84cb8674b607a23d5442","date":1465576866,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // range < term or range is null\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = term.compareTo(peek());\n      if (peekCompare < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare > 0) {\n        seek(prefixCodedToGeoCoded(term), (short)(64 - getPrefixCodedShift(term)));\n      }\n      nextRange();\n    }\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(peek()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a62e86d7b9cc6dec3c09f771166aa2393fd95c99","date":1466437108,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    final long encodedTerm = prefixCodedToGeoCoded(term);\n    final short termShift = (short)(64-getPrefixCodedShift(term));\n    // range < term\n    while (range.compare(encodedTerm, termShift) < 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = range.compare(encodedTerm, termShift);\n      if (peekCompare > 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare < 0) {\n        seek(encodedTerm, termShift);\n      }\n      hasNext = false;\n    }\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // range < term or range is null\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = term.compareTo(peek());\n      if (peekCompare < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare > 0) {\n        seek(prefixCodedToGeoCoded(term), (short)(64 - getPrefixCodedShift(term)));\n      }\n      nextRange();\n    }\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    final long encodedTerm = prefixCodedToGeoCoded(term);\n    final short termShift = (short)(64-getPrefixCodedShift(term));\n    // range < term\n    while (range.compare(encodedTerm, termShift) < 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = range.compare(encodedTerm, termShift);\n      if (peekCompare > 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare < 0) {\n        seek(encodedTerm, termShift);\n      }\n      hasNext = false;\n    }\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // range < term or range is null\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = term.compareTo(peek());\n      if (peekCompare < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare > 0) {\n        seek(prefixCodedToGeoCoded(term), (short)(64 - getPrefixCodedShift(term)));\n      }\n      nextRange();\n    }\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    final long encodedTerm = prefixCodedToGeoCoded(term);\n    final short termShift = (short)(64-getPrefixCodedShift(term));\n    // range < term\n    while (range.compare(encodedTerm, termShift) < 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = range.compare(encodedTerm, termShift);\n      if (peekCompare > 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare < 0) {\n        seek(encodedTerm, termShift);\n      }\n      hasNext = false;\n    }\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    // validate value is in range\n    while (currentCell == null || term.compareTo(currentCell) > 0) {\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n      // peek next sub-range, only seek if the current term is smaller than next lower bound\n      if (term.compareTo(peek()) < 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      }\n      // step forward to next range without seeking, as next range is less or equal current term\n      nextRange();\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc53adde67e2fa905526fcf1e14e3c9e1e64821","date":1486416055,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric\n   * range of the bounding box. Those terms that pass the initial range filter are then compared against the\n   * decoded min/max latitude and longitude values of the bounding box only if the range is not a \"boundary\" range\n   * (e.g., a range that straddles the boundary of the bbox).\n   * @param term term for candidate document\n   * @return match status\n   */\n  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    final long encodedTerm = prefixCodedToGeoCoded(term);\n    final short termShift = (short)(64-getPrefixCodedShift(term));\n    // range < term\n    while (range.compare(encodedTerm, termShift) < 0) {\n      // no more ranges, be gone\n      if (hasNext() == false) {\n        return AcceptStatus.END;\n      }\n\n      // peek next range, if the range > term then seek\n      final int peekCompare = range.compare(encodedTerm, termShift);\n      if (peekCompare > 0) {\n        return AcceptStatus.NO_AND_SEEK;\n      } else if (peekCompare < 0) {\n        seek(encodedTerm, termShift);\n      }\n      hasNext = false;\n    }\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7dc53adde67e2fa905526fcf1e14e3c9e1e64821":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a62e86d7b9cc6dec3c09f771166aa2393fd95c99":["be46ccf1a05985ba9fec84cb8674b607a23d5442"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["be46ccf1a05985ba9fec84cb8674b607a23d5442","a62e86d7b9cc6dec3c09f771166aa2393fd95c99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8a093d23e938d132b81b5f2de3d6b168afe3608e","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc53adde67e2fa905526fcf1e14e3c9e1e64821"]},"commit2Childs":{"7dc53adde67e2fa905526fcf1e14e3c9e1e64821":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a62e86d7b9cc6dec3c09f771166aa2393fd95c99":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["7dc53adde67e2fa905526fcf1e14e3c9e1e64821","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["be46ccf1a05985ba9fec84cb8674b607a23d5442","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["a62e86d7b9cc6dec3c09f771166aa2393fd95c99","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}