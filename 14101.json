{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","commits":[{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed, IOContext.DEFAULT);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed, context);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        // TODO can we have a compound file per segment and codec for\n        // docvalues?\n        directory, comparator, bytesUsed, IOContext.DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed, context);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed, context);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f149c99eae8edb6c2f44fda36f194e0e345565","date":1317419618,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#addValuesField(FieldInfo).mjava","sourceNew":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        getDirectory(), getComparator(), bytesUsed, context);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {\n    return Writer.create(field.getDocValues(),\n        docValuesId(segmentName, codecId, field.number),\n        directory, comparator, bytesUsed, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"1291e4568eb7d9463d751627596ef14baf4c1603":["b6f9be74ca7baaef11857ad002cad40419979516","bc0b8069918917b33f361011899a1af0cdd2d462"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d47326e0c6ce589b6962777df409aad0550940fa"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","bc0b8069918917b33f361011899a1af0cdd2d462"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"bc0b8069918917b33f361011899a1af0cdd2d462":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["bc0b8069918917b33f361011899a1af0cdd2d462","1291e4568eb7d9463d751627596ef14baf4c1603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["37f149c99eae8edb6c2f44fda36f194e0e345565"],"d47326e0c6ce589b6962777df409aad0550940fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b6f9be74ca7baaef11857ad002cad40419979516","bc0b8069918917b33f361011899a1af0cdd2d462"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","d47326e0c6ce589b6962777df409aad0550940fa"],"b6f9be74ca7baaef11857ad002cad40419979516":["1291e4568eb7d9463d751627596ef14baf4c1603"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["37f149c99eae8edb6c2f44fda36f194e0e345565","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d47326e0c6ce589b6962777df409aad0550940fa":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}