{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","commits":[{"id":"f5d497ef5f4afb803f608c705a49782def2f7082","date":1327943814,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"/dev/null","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"/dev/null","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"/dev/null","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","bugFix":null,"bugIntro":["77a0b04ddf690033aa642a3caf096a2ebfe1812f","77a0b04ddf690033aa642a3caf096a2ebfe1812f","77a0b04ddf690033aa642a3caf096a2ebfe1812f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":null,"sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      Overseer.createClientNodes(zkClient, nodeName);\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName, String collection) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      this.collection = collection;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77a0b04ddf690033aa642a3caf096a2ebfe1812f","date":1408972109,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      elector = new LeaderElector(zkClient);\n    }\n\n","bugFix":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String,List[Overseer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#MockZKController(String,String).mjava","sourceNew":"    public MockZKController(String zkAddress, String nodeName, List<Overseer> overseers) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.overseers = overseers;\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","sourceOld":"    public MockZKController(String zkAddress, String nodeName) throws InterruptedException, TimeoutException, IOException, KeeperException {\n      this.nodeName = nodeName;\n      zkClient = new SolrZkClient(zkAddress, TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkStateReader = new ZkStateReader(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["c51a2dcb8b4e1820a44f35f11961110201e06cdb","29f5eaf296600e1665151e7929d42a3cbe22e481"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["f5d497ef5f4afb803f608c705a49782def2f7082","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"410e066f093e407222d9681429d209084e783149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d497ef5f4afb803f608c705a49782def2f7082"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"f5d497ef5f4afb803f608c705a49782def2f7082":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["f5d497ef5f4afb803f608c705a49782def2f7082"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["77a0b04ddf690033aa642a3caf096a2ebfe1812f","7875fce026a0a335830cfc75abc3eb009eff9a73"],"77a0b04ddf690033aa642a3caf096a2ebfe1812f":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d497ef5f4afb803f608c705a49782def2f7082"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["77a0b04ddf690033aa642a3caf096a2ebfe1812f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"410e066f093e407222d9681429d209084e783149":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5d497ef5f4afb803f608c705a49782def2f7082":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","410e066f093e407222d9681429d209084e783149","c51a2dcb8b4e1820a44f35f11961110201e06cdb","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["96ea64d994d340044e0d57aeb6a5871539d10ca5","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","29f5eaf296600e1665151e7929d42a3cbe22e481"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","77a0b04ddf690033aa642a3caf096a2ebfe1812f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"77a0b04ddf690033aa642a3caf096a2ebfe1812f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["410e066f093e407222d9681429d209084e783149","f5d497ef5f4afb803f608c705a49782def2f7082","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"7875fce026a0a335830cfc75abc3eb009eff9a73":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","410e066f093e407222d9681429d209084e783149","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}