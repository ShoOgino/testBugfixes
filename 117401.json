{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testFiniteStrings().mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testFiniteStrings().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStrings() {\n    Automaton a = BasicOperations.union(BasicAutomata.makeString(\"dog\"), BasicAutomata.makeString(\"duck\"));\n    MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = SpecialOperations.getFiniteStrings(a, -1);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61ac0dce4a88019c61f1217b42753d505b9d9c84","date":1399218479,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testFiniteStrings().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = BasicOperations.union(BasicAutomata.makeString(\"dog\"), BasicAutomata.makeString(\"duck\"));\n    MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStrings() {\n    Automaton a = BasicOperations.union(BasicAutomata.makeString(\"dog\"), BasicAutomata.makeString(\"duck\"));\n    MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = SpecialOperations.getFiniteStrings(a, -1);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["6ce825e9276493231308229152c48f755ce1a0a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61ac0dce4a88019c61f1217b42753d505b9d9c84"]},"commit2Childs":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"6ce825e9276493231308229152c48f755ce1a0a5":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}