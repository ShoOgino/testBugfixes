{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":2,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    return zkRoot + \"/\" + relativePath;\n  }\n\n","sourceOld":"  private static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    return zkRoot + \"/\" + relativePath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b515f281a63ffbd9030d4f3d458ede2e416337","date":1467591265,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea\n    if (relativePath.length() == 0) return zkRoot;\n    \n    return zkRoot + \"/\" + relativePath;\n  }\n\n","sourceOld":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    return zkRoot + \"/\" + relativePath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"/dev/null","sourceNew":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea\n    if (relativePath.length() == 0) return zkRoot;\n    \n    return zkRoot + \"/\" + relativePath;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","date":1490642105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea\n    if (relativePath.length() == 0) return zkRoot;\n    \n    return zkRoot + \"/\" + relativePath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separators when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    if (\"\\\\\".equals(File.separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b3180545c5d5e137529b5474e018af04e07615","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea\n    if (relativePath.length() == 0) return zkRoot;\n    \n    return zkRoot + \"/\" + relativePath;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separators when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    if (\"\\\\\".equals(File.separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Take into account Windows file separaters when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    String separator = root.getFileSystem().getSeparator();\n    if (\"\\\\\".equals(separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":["2c47a868752c4a9ef6b6f64b7cd8ad35ca0dc4d3","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#createZkNodeName(String,Path,Path).mjava","sourceNew":"  // Take into account Windows file separators when making a Znode's name.\n  // Used particularly when uploading configsets since the path we're copying\n  // up may be a file path.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    if (\"\\\\\".equals(File.separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Take into account Windows file separators when making a Znode's name.\n  public static String createZkNodeName(String zkRoot, Path root, Path file) {\n    String relativePath = root.relativize(file).toString();\n    // Windows shenanigans\n    if (\"\\\\\".equals(File.separator))\n      relativePath = relativePath.replaceAll(\"\\\\\\\\\", \"/\");\n    // It's possible that the relative path and file are the same, in which case\n    // adding the bare slash is A Bad Idea unless it's a non-leaf data node\n    boolean isNonLeafData = file.toFile().getName().equals(ZKNODE_DATA_FILE);\n    if (relativePath.length() == 0 && isNonLeafData == false) return zkRoot;\n\n    // Important to have this check if the source is file:whatever/ and the destination is just zk:/\n    if (zkRoot.endsWith(\"/\") == false) zkRoot += \"/\";\n\n    String ret = zkRoot + relativePath;\n\n    // Special handling for data associated with non-leaf node.\n    if (isNonLeafData) {\n      // special handling since what we need to do is add the data to the parent.\n      ret = ret.substring(0, ret.indexOf(ZKNODE_DATA_FILE));\n      if (ret.endsWith(\"/\")) {\n        ret = ret.substring(0, ret.length() - 1);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7b3180545c5d5e137529b5474e018af04e07615":["d5b515f281a63ffbd9030d4f3d458ede2e416337"],"f49693fcc05c1186d9b347493efa73a614f5bba7":["c7b3180545c5d5e137529b5474e018af04e07615"],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["d5b515f281a63ffbd9030d4f3d458ede2e416337"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"d5b515f281a63ffbd9030d4f3d458ede2e416337":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5b515f281a63ffbd9030d4f3d458ede2e416337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"]},"commit2Childs":{"c7b3180545c5d5e137529b5474e018af04e07615":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"f49693fcc05c1186d9b347493efa73a614f5bba7":[],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["d5b515f281a63ffbd9030d4f3d458ede2e416337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d5b515f281a63ffbd9030d4f3d458ede2e416337":["c7b3180545c5d5e137529b5474e018af04e07615","f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f49693fcc05c1186d9b347493efa73a614f5bba7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}