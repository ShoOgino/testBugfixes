{"path":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i), fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i), fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i), fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i), fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c95a819869502635864dac0a788f874787e3395b","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["c95a819869502635864dac0a788f874787e3395b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}