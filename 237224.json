{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity(scoreMode.needsScores());\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33eef98c565ee21b199f04b92acd6e00b842bd1e":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"33eef98c565ee21b199f04b92acd6e00b842bd1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}