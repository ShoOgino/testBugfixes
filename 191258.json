{"path":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}