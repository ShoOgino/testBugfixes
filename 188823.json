{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"open-exchange-rates.json\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, config);\n    putConfig(zkClient, schema);\n    putConfig(zkClient, \"solrconfig.xml\");\n    putConfig(zkClient, \"stopwords.txt\");\n    putConfig(zkClient, \"protwords.txt\");\n    putConfig(zkClient, \"currency.xml\");\n    putConfig(zkClient, \"open-exchange-rates.json\");\n    putConfig(zkClient, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, \"old_synonyms.txt\");\n    putConfig(zkClient, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,String> props = new HashMap<String,String>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcc420420a40e6842b773b19d6d7a6348cc6de01","date":1354995290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    putConfig(zkClient, solrhome, config);\n    putConfig(zkClient, solrhome, schema);\n    putConfig(zkClient, solrhome, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","date":1357911503,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5ecef308279cfa6c2c6e98487f14646b458839","date":1375744659,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(zkClient, solrhome, \"stopwords.txt\");\n    putConfig(zkClient, solrhome, \"protwords.txt\");\n    putConfig(zkClient, solrhome, \"currency.xml\");\n    putConfig(zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(zkClient, solrhome, \"synonyms.txt\");\n    \n    zkClient.close();\n  }\n\n","bugFix":["dcc420420a40e6842b773b19d6d7a6348cc6de01","2c30e4c1cee08b3b229a77991882594fe7250b66","1f5ecef308279cfa6c2c6e98487f14646b458839"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49d1be4677972bb079739ec78067ad6e2bac38fd","date":1393735202,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, 45000, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, 45000, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, 45000, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, 45000, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, 45000, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, 45000, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    zkClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    zkClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    zkClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#buildZooKeeper(String,String,File,String,String).mjava","sourceNew":null,"sourceOld":"  // static to share with distrib test\n  public static void buildZooKeeper(String zkHost, String zkAddress, File solrhome, String config,\n      String schema) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkAddress, AbstractZkTestCase.TIMEOUT);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    zkClient.makePath(\"/collections/collection1\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/collection1/shards\", CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection\", Utils.toJSON(zkProps), CreateMode.PERSISTENT, true);\n    zkClient.makePath(\"/collections/control_collection/shards\", CreateMode.PERSISTENT, true);\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    zkClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", zkClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", zkClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", zkClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", zkClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", zkClient, solrhome, \"synonyms.txt\");\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["49d1be4677972bb079739ec78067ad6e2bac38fd"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","1f5ecef308279cfa6c2c6e98487f14646b458839"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["28288370235ed02234a64753cdbf0c6ec096304a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","dcc420420a40e6842b773b19d6d7a6348cc6de01"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"dcc420420a40e6842b773b19d6d7a6348cc6de01":["fa64435b5902ce266c23755a4a00691a3285dab8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["1f5ecef308279cfa6c2c6e98487f14646b458839"],"49d1be4677972bb079739ec78067ad6e2bac38fd":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"1f5ecef308279cfa6c2c6e98487f14646b458839":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["dcc420420a40e6842b773b19d6d7a6348cc6de01"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","dcc420420a40e6842b773b19d6d7a6348cc6de01"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"dcc420420a40e6842b773b19d6d7a6348cc6de01":["407687e67faf6e1f02a211ca078d8e3eed631027","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["49d1be4677972bb079739ec78067ad6e2bac38fd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"49d1be4677972bb079739ec78067ad6e2bac38fd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1f5ecef308279cfa6c2c6e98487f14646b458839","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"1f5ecef308279cfa6c2c6e98487f14646b458839":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}