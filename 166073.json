{"path":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0aea57ab530d174e645bf6e14d04db1e243e13d7","date":1274216848,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":["696ae660e2377ef5574e572e9969026ed20f36cb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aac723595c848b3bb678eec506ae63c85102b6ec","date":1292266644,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":["696ae660e2377ef5574e572e9969026ed20f36cb","6a7153c5cd4b2cd8054f8e46101442030d8a3c37","d10311dc892eac490ca97851d5764dfe32d86759"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time ot init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["aac723595c848b3bb678eec506ae63c85102b6ec","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["0aea57ab530d174e645bf6e14d04db1e243e13d7","aac723595c848b3bb678eec506ae63c85102b6ec"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0aea57ab530d174e645bf6e14d04db1e243e13d7","aac723595c848b3bb678eec506ae63c85102b6ec"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["1da8d55113b689b06716246649de6f62430f15c0"],"aac723595c848b3bb678eec506ae63c85102b6ec":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["aac723595c848b3bb678eec506ae63c85102b6ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["aac723595c848b3bb678eec506ae63c85102b6ec"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","aac723595c848b3bb678eec506ae63c85102b6ec"],"aac723595c848b3bb678eec506ae63c85102b6ec":["c26f00b574427b55127e869b935845554afde1fa","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}