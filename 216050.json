{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","sourceNew":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQueryRA(bq, new SingleDocTestFilter(0), useRandomAccess);\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","sourceOld":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQueryRA(bq, new SingleDocTestFilter(0), useRandomAccess);\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","sourceNew":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQueryRA(bq, new SingleDocTestFilter(0), useRandomAccess);\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random(), query, searcher);    \n  }\n\n","sourceOld":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQueryRA(bq, new SingleDocTestFilter(0), useRandomAccess);\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","sourceNew":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq, new SingleDocTestFilter(0), randomFilterStrategy(random(), useRandomAccess));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random(), query, searcher);    \n  }\n\n","sourceOld":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQueryRA(bq, new SingleDocTestFilter(0), useRandomAccess);\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random(), query, searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","sourceNew":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    Query query = new FilteredQuery(bq.build(), new SingleDocTestFilter(0), randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random(), query, searcher);    \n  }\n\n","sourceOld":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq, new SingleDocTestFilter(0), randomFilterStrategy(random(), useRandomAccess));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random(), query, searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tBoolean2(boolean).mjava","sourceNew":null,"sourceOld":"  private void tBoolean2(final boolean useRandomAccess) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    Query query = new FilteredQuery(bq.build(), new SingleDocTestFilter(0), randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random(), query, searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}