{"path":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","commits":[{"id":"0e9a39f67d5c6faaea751aa2325e3e8acec34f58","date":1132431756,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatToByte() {\r\n    Random rand = new Random(0);\r\n    rand.nextFloat();\r\n    // up iterations for more exhaustive test after changing something\r\n    for (int i=0; i<100000; i++) {\r\n      float f = Float.intBitsToFloat(rand.nextInt());\r\n      if (f!=f) continue;    // skip NaN\r\n      byte b1 = orig_floatToByte(f);\r\n      byte b2 = SmallFloat.floatToByte(f,3,15);\r\n      byte b3 = SmallFloat.floatToByte315(f);\r\n      assertEquals(b1,b2);\r\n      assertEquals(b2,b3);\r\n\r\n      byte b4 = SmallFloat.floatToByte(f,5,2);\r\n      byte b5 = SmallFloat.floatToByte52(f);\r\n      assertEquals(b4,b5);\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a236b7fed4411660186d60e31936b14fd52f003c","date":1132978628,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\r\n    Random rand = new Random(0);\r\n    // up iterations for more exhaustive test after changing something\r\n    for (int i=0; i<100000; i++) {\r\n      float f = Float.intBitsToFloat(rand.nextInt());\r\n      if (f!=f) continue;    // skip NaN\r\n      byte b1 = orig_floatToByte(f);\r\n      byte b2 = SmallFloat.floatToByte(f,3,15);\r\n      byte b3 = SmallFloat.floatToByte315(f);\r\n      assertEquals(b1,b2);\r\n      assertEquals(b2,b3);\r\n\r\n      byte b4 = SmallFloat.floatToByte(f,5,2);\r\n      byte b5 = SmallFloat.floatToByte52(f);\r\n      assertEquals(b4,b5);\r\n    }\r\n  }\r\n\n","sourceOld":"  public void testFloatToByte() {\r\n    Random rand = new Random(0);\r\n    rand.nextFloat();\r\n    // up iterations for more exhaustive test after changing something\r\n    for (int i=0; i<100000; i++) {\r\n      float f = Float.intBitsToFloat(rand.nextInt());\r\n      if (f!=f) continue;    // skip NaN\r\n      byte b1 = orig_floatToByte(f);\r\n      byte b2 = SmallFloat.floatToByte(f,3,15);\r\n      byte b3 = SmallFloat.floatToByte315(f);\r\n      assertEquals(b1,b2);\r\n      assertEquals(b2,b3);\r\n\r\n      byte b4 = SmallFloat.floatToByte(f,5,2);\r\n      byte b5 = SmallFloat.floatToByte52(f);\r\n      assertEquals(b4,b5);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = new Random(0);\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\r\n    Random rand = new Random(0);\r\n    // up iterations for more exhaustive test after changing something\r\n    for (int i=0; i<100000; i++) {\r\n      float f = Float.intBitsToFloat(rand.nextInt());\r\n      if (f!=f) continue;    // skip NaN\r\n      byte b1 = orig_floatToByte(f);\r\n      byte b2 = SmallFloat.floatToByte(f,3,15);\r\n      byte b3 = SmallFloat.floatToByte315(f);\r\n      assertEquals(b1,b2);\r\n      assertEquals(b2,b3);\r\n\r\n      byte b4 = SmallFloat.floatToByte(f,5,2);\r\n      byte b5 = SmallFloat.floatToByte52(f);\r\n      assertEquals(b4,b5);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = new Random(0);\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e9a39f67d5c6faaea751aa2325e3e8acec34f58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb1066f2afe9450585d0d10063ea4450085236f1":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a236b7fed4411660186d60e31936b14fd52f003c":["0e9a39f67d5c6faaea751aa2325e3e8acec34f58"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["a236b7fed4411660186d60e31936b14fd52f003c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cb1066f2afe9450585d0d10063ea4450085236f1"]},"commit2Childs":{"0e9a39f67d5c6faaea751aa2325e3e8acec34f58":["a236b7fed4411660186d60e31936b14fd52f003c"],"cb1066f2afe9450585d0d10063ea4450085236f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e9a39f67d5c6faaea751aa2325e3e8acec34f58"],"a236b7fed4411660186d60e31936b14fd52f003c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}