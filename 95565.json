{"path":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0","date":1392228582,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (UpdateRequest.ROUTE.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(ID.equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (ID.equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (ShardParams._ROUTE_.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (ID.equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (UpdateRequest.ROUTE.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(ID.equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (ID.equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (ShardParams._ROUTE_.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (ID.equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (UpdateRequest.ROUTE.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: {}\", attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(ID.equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (ID.equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (ShardParams._ROUTE_.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (ID.equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"XML element <delete> has invalid XML attr: \" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(ID.equals(mode) || \"query\".equals(mode))) {\n            String msg = \"XML element <delete> has invalid XML child element: \" + mode;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          text.setLength(0);\n          \n          if (ID.equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n              if (ShardParams._ROUTE_.equals(attrName)) {\n                deleteCmd.setRoute(attrVal);\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (ID.equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            String msg = \"XML element <delete> has invalid XML (closing) child element: \" + currTag;\n            log.warn(msg);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    msg);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["747dd71fefcbc7142661c25334b74c518fef4d81"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["747dd71fefcbc7142661c25334b74c518fef4d81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0":["042e4d934397657ba04c82b46cc5665076bc5c58"],"747dd71fefcbc7142661c25334b74c518fef4d81":["d3949dec17d80cd3a4c6be8999f4e0f44583b3c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["d3949dec17d80cd3a4c6be8999f4e0f44583b3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0":["747dd71fefcbc7142661c25334b74c518fef4d81"],"747dd71fefcbc7142661c25334b74c518fef4d81":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}