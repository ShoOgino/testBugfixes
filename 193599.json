{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\r\n    boolean includeScore=false;\r\n    if (fields!=null) {\r\n      includeScore = fields.contains(\"score\");\r\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\r\n        fields=null;  // null means return all stored fields\r\n      }\r\n    }\r\n\r\n    int sz=ids.size();\r\n\r\n    writer.write('{');\r\n    incLevel();\r\n    writeKey(\"numFound\",false);\r\n    writeInt(null,ids.matches());\r\n    writer.write(',');\r\n    writeKey(\"start\",false);\r\n    writeInt(null,ids.offset());\r\n\r\n    if (includeScore) {\r\n      writer.write(',');\r\n      writeKey(\"maxScore\",false);\r\n      writeFloat(null,ids.maxScore());\r\n    }\r\n    writer.write(',');\r\n    // indent();\r\n    writeKey(\"docs\",false);\r\n    writer.write('[');\r\n\r\n    incLevel();\r\n    boolean first=true;\r\n\r\n    DocIterator iterator = ids.iterator();\r\n    for (int i=0; i<sz; i++) {\r\n      int id = iterator.nextDoc();\r\n      Document doc = searcher.doc(id);\r\n\r\n      if (first) {\r\n        first=false;\r\n      } else {\r\n        writer.write(',');\r\n      }\r\n      indent();\r\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\r\n    }\r\n    decLevel();\r\n    writer.write(']');\r\n\r\n    if (otherFields !=null) {\r\n      writeMap(null, otherFields, true, false);\r\n    }\r\n\r\n    decLevel();\r\n    indent();\r\n    writer.write('}');\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writer.write('{');\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writer.write(',');\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writer.write(',');\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writer.write(',');\n    // indent();\n    writeKey(\"docs\",false);\n    writer.write('[');\n\n    incLevel();\n    boolean first=true;\n\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id);\n\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writer.write(']');\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writer.write('}');\n  }\n\n","sourceOld":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\r\n    boolean includeScore=false;\r\n    if (fields!=null) {\r\n      includeScore = fields.contains(\"score\");\r\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\r\n        fields=null;  // null means return all stored fields\r\n      }\r\n    }\r\n\r\n    int sz=ids.size();\r\n\r\n    writer.write('{');\r\n    incLevel();\r\n    writeKey(\"numFound\",false);\r\n    writeInt(null,ids.matches());\r\n    writer.write(',');\r\n    writeKey(\"start\",false);\r\n    writeInt(null,ids.offset());\r\n\r\n    if (includeScore) {\r\n      writer.write(',');\r\n      writeKey(\"maxScore\",false);\r\n      writeFloat(null,ids.maxScore());\r\n    }\r\n    writer.write(',');\r\n    // indent();\r\n    writeKey(\"docs\",false);\r\n    writer.write('[');\r\n\r\n    incLevel();\r\n    boolean first=true;\r\n\r\n    DocIterator iterator = ids.iterator();\r\n    for (int i=0; i<sz; i++) {\r\n      int id = iterator.nextDoc();\r\n      Document doc = searcher.doc(id);\r\n\r\n      if (first) {\r\n        first=false;\r\n      } else {\r\n        writer.write(',');\r\n      }\r\n      indent();\r\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\r\n    }\r\n    decLevel();\r\n    writer.write(']');\r\n\r\n    if (otherFields !=null) {\r\n      writeMap(null, otherFields, true, false);\r\n    }\r\n\r\n    decLevel();\r\n    indent();\r\n    writer.write('}');\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a","date":1164667221,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writer.write('{');\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writer.write(',');\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writer.write(',');\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writer.write(',');\n    // indent();\n    writeKey(\"docs\",false);\n    writer.write('[');\n\n    incLevel();\n    boolean first=true;\n\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writer.write(']');\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writer.write('}');\n  }\n\n","sourceOld":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writer.write('{');\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writer.write(',');\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writer.write(',');\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writer.write(',');\n    // indent();\n    writeKey(\"docs\",false);\n    writer.write('[');\n\n    incLevel();\n    boolean first=true;\n\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id);\n\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writer.write(']');\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writer.write('}');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb87f7aa1c87656073021ebf4269992ab26f2b51","date":1172518941,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writer.write('{');\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writer.write(',');\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writer.write(',');\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writer.write(',');\n    // indent();\n    writeKey(\"docs\",false);\n    writer.write('[');\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writer.write(']');\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writer.write('}');\n  }\n\n","sourceOld":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writer.write('{');\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writer.write(',');\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writer.write(',');\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writer.write(',');\n    // indent();\n    writeKey(\"docs\",false);\n    writer.write('[');\n\n    incLevel();\n    boolean first=true;\n\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writer.write(']');\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writer.write('}');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13baf5514709a27de4ff67151d35b715138d158d","date":1186803122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writer.write('{');\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writer.write(',');\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writer.write(',');\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writer.write(',');\n    // indent();\n    writeKey(\"docs\",false);\n    writer.write('[');\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writer.write(',');\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writer.write(']');\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writer.write('}');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n    incLevel();\n    writeKey(\"numFound\",false);\n    writeInt(null,ids.matches());\n    writeMapSeparator();\n    writeKey(\"start\",false);\n    writeInt(null,ids.offset());\n\n    if (includeScore) {\n      writeMapSeparator();\n      writeKey(\"maxScore\",false);\n      writeFloat(null,ids.maxScore());\n    }\n    writeMapSeparator();\n    // indent();\n    writeKey(\"docs\",false);\n    writeArrayOpener(sz);\n\n    incLevel();\n    boolean first=true;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n      indent();\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n\n    decLevel();\n    indent();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"eb87f7aa1c87656073021ebf4269992ab26f2b51":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13baf5514709a27de4ff67151d35b715138d158d":["eb87f7aa1c87656073021ebf4269992ab26f2b51"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["13baf5514709a27de4ff67151d35b715138d158d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"eb87f7aa1c87656073021ebf4269992ab26f2b51":["13baf5514709a27de4ff67151d35b715138d158d"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["eb87f7aa1c87656073021ebf4269992ab26f2b51"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13baf5514709a27de4ff67151d35b715138d158d":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}