{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      try {\n        Properties externalProps = new Properties();\n        externalProps.load(new FileInputStream(propertiesFile));\n        coreProperties.putAll(externalProps);\n      }\n      catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","sourceNew":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, \"UTF-8\"));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      try {\n        Properties externalProps = new Properties();\n        externalProps.load(new FileInputStream(propertiesFile));\n        coreProperties.putAll(externalProps);\n      }\n      catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, \"UTF-8\"));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","sourceNew":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, \"UTF-8\"));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","sourceNew":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, \"UTF-8\"));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#loadExtraProperties().mjava","sourceNew":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    Path propertiesFile = instanceDir.resolve(filename);\n    if (Files.exists(propertiesFile)) {\n      try (InputStream is = Files.newInputStream(propertiesFile)) {\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.toString(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load properties specified in an external properties file.\n   *\n   * The file to load can be specified in a {@code properties} property on\n   * the original Properties object used to create this CoreDescriptor.  If\n   * this has not been set, then we look for {@code conf/solrcore.properties}\n   * underneath the instance dir.\n   *\n   * File paths are taken as read from the core's instance directory\n   * if they are not absolute.\n   */\n  protected void loadExtraProperties() {\n    String filename = coreProperties.getProperty(CORE_PROPERTIES, DEFAULT_EXTERNAL_PROPERTIES_FILE);\n    File propertiesFile = resolvePaths(filename);\n    if (propertiesFile.exists()) {\n      FileInputStream in = null;\n      try {\n        in = new FileInputStream(propertiesFile);\n        Properties externalProps = new Properties();\n        externalProps.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n        coreProperties.putAll(externalProps);\n      } catch (IOException e) {\n        String message = String.format(Locale.ROOT, \"Could not load properties from %s: %s:\",\n            propertiesFile.getAbsoluteFile(), e.toString());\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, message);\n      } finally {\n        IOUtils.closeQuietly(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1","7d89d7e4e5101347833eea558851bf4209218619"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["7d89d7e4e5101347833eea558851bf4209218619"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}