{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#binarySearch(BytesRef,BytesRef,int,int,BytesRefHash,int[],Comparator[BytesRef]).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#binarySearch(BytesRef,BytesRef,int,int,BytesRefHash,int[],Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"      private final int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n          int high, BytesRefHash hash, int[] ords, Comparator<BytesRef> comparator) {\n        int mid = 0;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          hash.get(ords[mid], bytesRef);\n          final int cmp = comparator.compare(bytesRef, b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        assert comparator.compare(bytesRef, b) != 0;\n        return -(low + 1);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#binarySearch(BytesRef,BytesRef,int,int,BytesRefHash,int[]).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#binarySearch(BytesRef,BytesRef,int,int,BytesRefHash,int[],Comparator[BytesRef]).mjava","sourceNew":"      private final int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n          int high, BytesRefHash hash, int[] ords) {\n        int mid = 0;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          hash.get(ords[mid], bytesRef);\n          final int cmp = bytesRef.compareTo(b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        assert bytesRef.compareTo(b) != 0;\n        return -(low + 1);\n      }\n\n","sourceOld":"      private final int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n          int high, BytesRefHash hash, int[] ords, Comparator<BytesRef> comparator) {\n        int mid = 0;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          hash.get(ords[mid], bytesRef);\n          final int cmp = comparator.compare(bytesRef, b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        assert comparator.compare(bytesRef, b) != 0;\n        return -(low + 1);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#binarySearch(BytesRef,BytesRef,int,int,BytesRefHash,int[]).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#binarySearch(BytesRef,BytesRef,int,int,BytesRefHash,int[],Comparator[BytesRef]).mjava","sourceNew":"      private final int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n          int high, BytesRefHash hash, int[] ords) {\n        int mid = 0;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          hash.get(ords[mid], bytesRef);\n          final int cmp = bytesRef.compareTo(b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        assert bytesRef.compareTo(b) != 0;\n        return -(low + 1);\n      }\n\n","sourceOld":"      private final int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n          int high, BytesRefHash hash, int[] ords, Comparator<BytesRef> comparator) {\n        int mid = 0;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          hash.get(ords[mid], bytesRef);\n          final int cmp = comparator.compare(bytesRef, b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        assert comparator.compare(bytesRef, b) != 0;\n        return -(low + 1);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}