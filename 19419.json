{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return checkPayloads(collector.getPayloads());\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, acceptDocs, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return checkPayloads(collector.getPayloads());\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      final PayloadChecker collector = new PayloadChecker();\n      Spans matchSpans = matchWeight.getSpans(context, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return collector.match();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return checkPayloads(collector.getPayloads());\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      final PayloadChecker collector = new PayloadChecker();\n      Spans matchSpans = matchWeight.getSpans(context, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return collector.match();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      final PayloadChecker collector = new PayloadChecker();\n      Spans matchSpans = matchWeight.getSpans(context, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return collector.match();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}