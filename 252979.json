{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","commits":[{"id":"b4f1e070470c46013e0ab2939d8806159ae002a6","date":1311514829,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7c12199340f6d0568d34f06651728ca34f023e","date":1311515146,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0474ad4224e9573bcf8e80349a1489de3ee7f9c","date":1318083009,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d52c103ec2df541e0c5e0334fa88bb8d3573a75","date":1367330687,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleRangeFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleRangeFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleRangeFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleRangeFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(DateUtil.parseDate(\"2005-02-13T15:26:37Z\"), manufacturedateDt.getStart());\n    assertEquals(DateUtil.parseDate(\"2008-02-13T15:26:37Z\"), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleRangeFacetResponse.xml\")) {\n      assertNotNull(is);\n\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleRangeFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleRangeFacetResponse.xml\")) {\n      assertNotNull(is);\n\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleRangeFacetResponse.xml\")) {\n      assertNotNull(is);\n\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testRangeFacets().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleRangeFacetResponse.xml\")) {\n      assertNotNull(is);\n\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testRangeFacets() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleRangeFacetResponse.xml\")) {\n      assertNotNull(is);\n\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n\n    int counter = 0;\n    RangeFacet.Numeric price = null;\n    RangeFacet.Date manufacturedateDt = null;\n    for (RangeFacet r : qr.getFacetRanges()){\n      assertNotNull(r);\n      if (\"price\".equals(r.getName())) {\n        price = (RangeFacet.Numeric) r;\n      } else if (\"manufacturedate_dt\".equals(r.getName())) {\n        manufacturedateDt = (RangeFacet.Date) r;\n      }\n\n      counter++;\n    }\n    assertEquals(2, counter);\n    assertNotNull(price);\n    assertNotNull(manufacturedateDt);\n\n    assertEquals(0.0F, price.getStart());\n    assertEquals(5.0F, price.getEnd());\n    assertEquals(1.0F, price.getGap());\n    assertEquals(\"0.0\", price.getCounts().get(0).getValue());\n    assertEquals(3, price.getCounts().get(0).getCount());\n    assertEquals(\"1.0\", price.getCounts().get(1).getValue());\n    assertEquals(0, price.getCounts().get(1).getCount());\n    assertEquals(\"2.0\", price.getCounts().get(2).getValue());\n    assertEquals(0, price.getCounts().get(2).getCount());\n    assertEquals(\"3.0\", price.getCounts().get(3).getValue());\n    assertEquals(0, price.getCounts().get(3).getCount());\n    assertEquals(\"4.0\", price.getCounts().get(4).getValue());\n    assertEquals(0, price.getCounts().get(4).getCount());\n\n    assertEquals(new Date(Instant.parse(\"2005-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getStart());\n    assertEquals(new Date(Instant.parse(\"2008-02-13T15:26:37Z\").toEpochMilli()), manufacturedateDt.getEnd());\n    assertEquals(\"+1YEAR\", manufacturedateDt.getGap());\n    assertEquals(\"2005-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(0).getValue());\n    assertEquals(4, manufacturedateDt.getCounts().get(0).getCount());\n    assertEquals(\"2006-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(1).getValue());\n    assertEquals(7, manufacturedateDt.getCounts().get(1).getCount());\n    assertEquals(\"2007-02-13T15:26:37Z\", manufacturedateDt.getCounts().get(2).getValue());\n    assertEquals(0, manufacturedateDt.getCounts().get(2).getCount());\n    assertEquals(90, manufacturedateDt.getBefore());\n    assertEquals(1, manufacturedateDt.getAfter());\n    assertEquals(11, manufacturedateDt.getBetween());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6d52c103ec2df541e0c5e0334fa88bb8d3573a75","9d3d365762604952e436b51980101dfc84cc1b3e"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"6d52c103ec2df541e0c5e0334fa88bb8d3573a75":["c0474ad4224e9573bcf8e80349a1489de3ee7f9c"],"c0474ad4224e9573bcf8e80349a1489de3ee7f9c":["7c7c12199340f6d0568d34f06651728ca34f023e"],"7c7c12199340f6d0568d34f06651728ca34f023e":["b4f1e070470c46013e0ab2939d8806159ae002a6"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["6d52c103ec2df541e0c5e0334fa88bb8d3573a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"b4f1e070470c46013e0ab2939d8806159ae002a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a626ec4d1c92e59fe390724d6220081047b03ce7","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"6d52c103ec2df541e0c5e0334fa88bb8d3573a75":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"c0474ad4224e9573bcf8e80349a1489de3ee7f9c":["6d52c103ec2df541e0c5e0334fa88bb8d3573a75"],"7c7c12199340f6d0568d34f06651728ca34f023e":["c0474ad4224e9573bcf8e80349a1489de3ee7f9c"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4f1e070470c46013e0ab2939d8806159ae002a6"],"b4f1e070470c46013e0ab2939d8806159ae002a6":["7c7c12199340f6d0568d34f06651728ca34f023e"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["4cba13865da71de3b9b0937fcbc66d726089356d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}