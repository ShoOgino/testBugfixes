{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","commits":[{"id":"af8334dcf26521da965e339ff1096e0e7bcdd8c6","date":1504885366,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","pathOld":"/dev/null","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    QueryCommand cmd = rb.getQueryCommand();\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd68c90c39731aaa564d6995e5dd4a4c2388e13e","date":1504887539,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","pathOld":"/dev/null","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    QueryCommand cmd = rb.getQueryCommand();\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4924281697ed8ed3790f0f327be1fbde8160afc","date":1505151135,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    QueryCommand cmd = rb.getQueryCommand();\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    QueryCommand cmd = rb.getQueryCommand();\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af8334dcf26521da965e339ff1096e0e7bcdd8c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ffb85feece8645a035c02443a625f5af15e1106b":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e","f4924281697ed8ed3790f0f327be1fbde8160afc"],"f4924281697ed8ed3790f0f327be1fbde8160afc":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd68c90c39731aaa564d6995e5dd4a4c2388e13e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af8334dcf26521da965e339ff1096e0e7bcdd8c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"af8334dcf26521da965e339ff1096e0e7bcdd8c6":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"ffb85feece8645a035c02443a625f5af15e1106b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4924281697ed8ed3790f0f327be1fbde8160afc":["ffb85feece8645a035c02443a625f5af15e1106b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af8334dcf26521da965e339ff1096e0e7bcdd8c6","dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"dd68c90c39731aaa564d6995e5dd4a4c2388e13e":["ffb85feece8645a035c02443a625f5af15e1106b","f4924281697ed8ed3790f0f327be1fbde8160afc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}