{"path":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler#getDocList(int,FixedBitSet).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler#getDocList(int,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  private DocList getDocList(int rows, FixedBitSet matchDocIdsBS) throws IOException {\n    //Now we must supply a Solr DocList and add it to the response.\n    //  Typically this is gotten via a SolrIndexSearcher.search(), but in this case we\n    //  know exactly what documents to return, the order doesn't matter nor does\n    //  scoring.\n    //  Ideally an implementation of DocList could be directly implemented off\n    //  of a BitSet, but there are way too many methods to implement for a minor\n    //  payoff.\n    int matchDocs = matchDocIdsBS.cardinality();\n    int[] docIds = new int[ Math.min(rows, matchDocs) ];\n    DocIdSetIterator docIdIter = new BitSetIterator(matchDocIdsBS, 1);\n    for (int i = 0; i < docIds.length; i++) {\n      docIds[i] = docIdIter.nextDoc();\n    }\n    return new DocSlice(0, docIds.length, docIds, null, matchDocs, 1f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler#getDocList(int,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  private DocList getDocList(int rows, FixedBitSet matchDocIdsBS) throws IOException {\n    //Now we must supply a Solr DocList and add it to the response.\n    //  Typically this is gotten via a SolrIndexSearcher.search(), but in this case we\n    //  know exactly what documents to return, the order doesn't matter nor does\n    //  scoring.\n    //  Ideally an implementation of DocList could be directly implemented off\n    //  of a BitSet, but there are way too many methods to implement for a minor\n    //  payoff.\n    int matchDocs = matchDocIdsBS.cardinality();\n    int[] docIds = new int[ Math.min(rows, matchDocs) ];\n    DocIdSetIterator docIdIter = new BitSetIterator(matchDocIdsBS, 1);\n    for (int i = 0; i < docIds.length; i++) {\n      docIds[i] = docIdIter.nextDoc();\n    }\n    return new DocSlice(0, docIds.length, docIds, null, matchDocs, 1f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler#getDocList(int,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  private DocList getDocList(int rows, FixedBitSet matchDocIdsBS) throws IOException {\n    //Now we must supply a Solr DocList and add it to the response.\n    //  Typically this is gotten via a SolrIndexSearcher.search(), but in this case we\n    //  know exactly what documents to return, the order doesn't matter nor does\n    //  scoring.\n    //  Ideally an implementation of DocList could be directly implemented off\n    //  of a BitSet, but there are way too many methods to implement for a minor\n    //  payoff.\n    int matchDocs = matchDocIdsBS.cardinality();\n    int[] docIds = new int[ Math.min(rows, matchDocs) ];\n    DocIdSetIterator docIdIter = new BitSetIterator(matchDocIdsBS, 1);\n    for (int i = 0; i < docIds.length; i++) {\n      docIds[i] = docIdIter.nextDoc();\n    }\n    return new DocSlice(0, docIds.length, docIds, null, matchDocs, 1f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler#getDocList(int,FixedBitSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler#getDocList(int,FixedBitSet).mjava","sourceNew":"  private DocList getDocList(int rows, FixedBitSet matchDocIdsBS) throws IOException {\n    //Now we must supply a Solr DocList and add it to the response.\n    //  Typically this is gotten via a SolrIndexSearcher.search(), but in this case we\n    //  know exactly what documents to return, the order doesn't matter nor does\n    //  scoring.\n    //  Ideally an implementation of DocList could be directly implemented off\n    //  of a BitSet, but there are way too many methods to implement for a minor\n    //  payoff.\n    int matchDocs = matchDocIdsBS.cardinality();\n    int[] docIds = new int[ Math.min(rows, matchDocs) ];\n    DocIdSetIterator docIdIter = new BitSetIterator(matchDocIdsBS, 1);\n    for (int i = 0; i < docIds.length; i++) {\n      docIds[i] = docIdIter.nextDoc();\n    }\n    return new DocSlice(0, docIds.length, docIds, null, matchDocs, 1f, TotalHits.Relation.EQUAL_TO);\n  }\n\n","sourceOld":"  private DocList getDocList(int rows, FixedBitSet matchDocIdsBS) throws IOException {\n    //Now we must supply a Solr DocList and add it to the response.\n    //  Typically this is gotten via a SolrIndexSearcher.search(), but in this case we\n    //  know exactly what documents to return, the order doesn't matter nor does\n    //  scoring.\n    //  Ideally an implementation of DocList could be directly implemented off\n    //  of a BitSet, but there are way too many methods to implement for a minor\n    //  payoff.\n    int matchDocs = matchDocIdsBS.cardinality();\n    int[] docIds = new int[ Math.min(rows, matchDocs) ];\n    DocIdSetIterator docIdIter = new BitSetIterator(matchDocIdsBS, 1);\n    for (int i = 0; i < docIds.length; i++) {\n      docIds[i] = docIdIter.nextDoc();\n    }\n    return new DocSlice(0, docIds.length, docIds, null, matchDocs, 1f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["640ded7811e1b7d29236a5e2934ec3cd266a8199","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}