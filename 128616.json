{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#doOpenIfChanged().mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#reopen().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise null is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // doReopen calls ensureOpen\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    // doReopen calls ensureOpen\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doOpenIfChanged().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise null is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        newReader = IndexReader.openIfChanged(oldReader);\n        if (newReader != null) {\n          reopened = true;\n        } else {\n          newReader = oldReader;\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise null is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // doReopen calls ensureOpen\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doOpenIfChanged().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise null is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        newReader = IndexReader.openIfChanged(oldReader);\n        if (newReader != null) {\n          reopened = true;\n        } else {\n          newReader = oldReader;\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doOpenIfChanged().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise null is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        newReader = IndexReader.openIfChanged(oldReader);\n        if (newReader != null) {\n          reopened = true;\n        } else {\n          newReader = oldReader;\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}