{"path":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","commits":[{"id":"fa96fdb58cefcada21fc51faf37114033f044f3f","date":1180916840,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc512c052d4f0e04ae655f1070aaa43b45934dde","date":1183993013,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd36d5d7353f6cf7c2cccbd79385b298db7bc906","date":1213706937,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["fc512c052d4f0e04ae655f1070aaa43b45934dde"],"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fa96fdb58cefcada21fc51faf37114033f044f3f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"fc512c052d4f0e04ae655f1070aaa43b45934dde":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"fa96fdb58cefcada21fc51faf37114033f044f3f":["fc512c052d4f0e04ae655f1070aaa43b45934dde"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fc512c052d4f0e04ae655f1070aaa43b45934dde":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}