{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getCountString().mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getCountString().mjava","pathOld":"/dev/null","sourceNew":"  private void getCountString() throws IOException {\n    Filter filter = docs.getTopFilter();\n    List<AtomicReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    for (int subIndex = 0; subIndex < leaves.size(); subIndex++) {\n      AtomicReaderContext leaf = leaves.get(subIndex);\n      DocIdSet dis = filter.getDocIdSet(leaf, null); // solr docsets already exclude any deleted docs\n      if (dis == null) {\n        continue;\n      }\n      DocIdSetIterator disi = dis.iterator();\n      if (disi != null) {\n        if (schemaField.multiValued()) {\n          SortedSetDocValues sub = leaf.reader().getSortedSetDocValues(schemaField.getName());\n          if (sub == null) {\n            continue;\n          }\n          final SortedDocValues singleton = DocValues.unwrapSingleton(sub);\n          if (singleton != null) {\n            // some codecs may optimize SORTED_SET storage for single-valued fields\n            accumIntervalsSingle(singleton, disi, dis.bits());\n          } else {\n            accumIntervalsMulti(sub, disi, dis.bits());\n          }\n        } else {\n          SortedDocValues sub = leaf.reader().getSortedDocValues(schemaField.getName());\n          if (sub == null) {\n            continue;\n          }\n          accumIntervalsSingle(sub, disi, dis.bits());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getCountString().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getCountString().mjava","sourceNew":"  private void getCountString() throws IOException {\n    Filter filter = docs.getTopFilter();\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    for (int subIndex = 0; subIndex < leaves.size(); subIndex++) {\n      LeafReaderContext leaf = leaves.get(subIndex);\n      DocIdSet dis = filter.getDocIdSet(leaf, null); // solr docsets already exclude any deleted docs\n      if (dis == null) {\n        continue;\n      }\n      DocIdSetIterator disi = dis.iterator();\n      if (disi != null) {\n        if (schemaField.multiValued()) {\n          SortedSetDocValues sub = leaf.reader().getSortedSetDocValues(schemaField.getName());\n          if (sub == null) {\n            continue;\n          }\n          final SortedDocValues singleton = DocValues.unwrapSingleton(sub);\n          if (singleton != null) {\n            // some codecs may optimize SORTED_SET storage for single-valued fields\n            accumIntervalsSingle(singleton, disi, dis.bits());\n          } else {\n            accumIntervalsMulti(sub, disi, dis.bits());\n          }\n        } else {\n          SortedDocValues sub = leaf.reader().getSortedDocValues(schemaField.getName());\n          if (sub == null) {\n            continue;\n          }\n          accumIntervalsSingle(sub, disi, dis.bits());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getCountString() throws IOException {\n    Filter filter = docs.getTopFilter();\n    List<AtomicReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    for (int subIndex = 0; subIndex < leaves.size(); subIndex++) {\n      AtomicReaderContext leaf = leaves.get(subIndex);\n      DocIdSet dis = filter.getDocIdSet(leaf, null); // solr docsets already exclude any deleted docs\n      if (dis == null) {\n        continue;\n      }\n      DocIdSetIterator disi = dis.iterator();\n      if (disi != null) {\n        if (schemaField.multiValued()) {\n          SortedSetDocValues sub = leaf.reader().getSortedSetDocValues(schemaField.getName());\n          if (sub == null) {\n            continue;\n          }\n          final SortedDocValues singleton = DocValues.unwrapSingleton(sub);\n          if (singleton != null) {\n            // some codecs may optimize SORTED_SET storage for single-valued fields\n            accumIntervalsSingle(singleton, disi, dis.bits());\n          } else {\n            accumIntervalsMulti(sub, disi, dis.bits());\n          }\n        } else {\n          SortedDocValues sub = leaf.reader().getSortedDocValues(schemaField.getName());\n          if (sub == null) {\n            continue;\n          }\n          accumIntervalsSingle(sub, disi, dis.bits());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}