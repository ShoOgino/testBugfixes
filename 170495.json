{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","commits":[{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","pathOld":"/dev/null","sourceNew":"  public void testAccountable() {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","sourceNew":"  public void testAccountable() {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","sourceOld":"  public void testAccountable() {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","sourceNew":"  public void testAccountable() {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","sourceOld":"  public void testAccountable() {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","sourceNew":"  public void testAccountable() throws Exception {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","sourceOld":"  public void testAccountable() {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","sourceNew":"  public void testAccountable() throws Exception {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n      sc.initializeMetrics(solrMetricsContext, scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","sourceOld":"  public void testAccountable() throws Exception {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testAccountable().mjava","sourceNew":null,"sourceOld":"  public void testAccountable() throws Exception {\n    FastLRUCache<Query, DocSet> sc = new FastLRUCache<>();\n    try {\n      Map l = new HashMap();\n      l.put(\"size\", \"100\");\n      l.put(\"initialSize\", \"10\");\n      l.put(\"autowarmCount\", \"25\");\n      CacheRegenerator cr = new NoOpRegenerator();\n      Object o = sc.init(l, null, cr);\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n      sc.initializeMetrics(solrMetricsContext, scope);\n      sc.setState(SolrCache.State.LIVE);\n      long initialBytes = sc.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n      sc.put(q, docSet);\n      long updatedBytes = sc.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLRUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n      sc.clear();\n      long clearedBytes = sc.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["df72a23fb74bebe914e3f3972063a884327c0436"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a71ca10e7131e1f01868c80d228f26a855e79dd0","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"df72a23fb74bebe914e3f3972063a884327c0436":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}