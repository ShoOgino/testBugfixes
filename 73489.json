{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","sourceNew":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","sourceOld":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","sourceNew":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","sourceOld":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","sourceNew":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","sourceOld":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","sourceNew":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSort(new SortClause(\"date\", SolrQuery.ORDER.desc));\n    Assert.assertEquals(2, q.getSorts().size());\n    q.removeSort(new SortClause(\"price\", SolrQuery.ORDER.asc));\n    q.removeSort(new SortClause(\"qty\", SolrQuery.ORDER.desc));\n    Assert.assertEquals(0, q.getSorts().size());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","sourceOld":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    // System.out.println(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"]},"commit2Childs":{"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}