{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}