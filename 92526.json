{"path":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","pathOld":"src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","pathOld":"solr/src/test/org/apache/solr/util/BitSetPerf#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    if (args.length<5) {\n      System.out.println(\"BitSetTest <bitSetSize> <numSets> <numBitsSet> <testName> <iter> <impl>\");\n      System.out.println(\"  impl => open for OpenBitSet\");\n    }\n    int bitSetSize = Integer.parseInt(args[0]);\n    int numSets = Integer.parseInt(args[1]);\n    int numBitsSet = Integer.parseInt(args[2]);\n    String test = args[3];\n    int iter = Integer.parseInt(args[4]);\n    String impl = args.length>5 ? args[5].intern() : \"bit\";\n\n    BitSet[] sets = new BitSet[numSets];\n    OpenBitSet[] osets = new OpenBitSet[numSets];\n\n    for (int i=0; i<numSets; i++) {\n      sets[i] = new BitSet(bitSetSize);\n      osets[i] = new OpenBitSet(bitSetSize);\n      randomSets(bitSetSize, numBitsSet, sets[i], osets[i]);\n    }\n\n    BitSet bs = new BitSet(bitSetSize);\n    OpenBitSet obs = new OpenBitSet(bitSetSize);\n    randomSets(bitSetSize, numBitsSet, bs, obs);\n\n\n\n    int ret=0;\n\n    long start = System.currentTimeMillis();\n\n    if (\"union\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet other=osets[i];\n            obs.union(other);\n          } else {\n            BitSet other=sets[i];\n            bs.or(other);\n          }\n        }\n      }\n    }\n\n    if (\"cardinality\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            ret += osets[i].cardinality();\n          } else {\n            ret += sets[i].cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"get\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            OpenBitSet oset = osets[i];\n            for (int k=0; k<bitSetSize; k++) if (oset.fastGet(k)) ret++;\n          } else {\n            BitSet bset = sets[i];\n            for (int k=0; k<bitSetSize; k++) if (bset.get(k)) ret++;\n          }\n        }\n      }\n    }\n\n    if (\"icount\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets-1; i++) {\n          if (impl==\"open\") {\n            OpenBitSet a=osets[i];\n            OpenBitSet b=osets[i+1];\n            ret += OpenBitSet.intersectionCount(a,b);\n          } else {\n            BitSet a=sets[i];\n            BitSet b=sets[i+1];\n            BitSet newset = (BitSet)a.clone();\n            newset.and(b);\n            ret += newset.cardinality();\n          }\n        }\n      }\n    }\n\n    if (\"clone\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            osets[i] = (OpenBitSet)osets[i].clone();\n          } else {\n            sets[i] = (BitSet)sets[i].clone();\n          }\n        }\n      }\n    }\n\n    if (\"nextSetBit\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n\n    if (\"iterator\".equals(test)) {\n      for (int it=0; it<iter; it++) {\n        for (int i=0; i<numSets; i++) {\n          if (impl==\"open\") {\n            final OpenBitSet set = osets[i];\n            final OpenBitSetIterator iterator = new OpenBitSetIterator(set);\n            for(int next=iterator.nextDoc(); next>=0; next=iterator.nextDoc()) {\n              ret += next;\n            }\n          } else {\n            final BitSet set = sets[i];\n            for(int next=set.nextSetBit(0); next>=0; next=set.nextSetBit(next+1)) {\n              ret += next;\n            }\n          }\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret);\n    System.out.println(\"TIME=\"+(end-start));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}