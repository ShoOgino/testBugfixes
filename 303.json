{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.shutdown();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.shutdown();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.shutdown();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.shutdown();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","d19974432be9aed28ee7dca73bdf01d139e763a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    Directory dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(10)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                     .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.leaves().size() > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = DirectoryReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.leaves().size());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}