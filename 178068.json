{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<byte[]>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<byte[]>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<byte[]>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<byte[]>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","sourceNew":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<byte[]>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","sourceNew":"  /**\n   * WARNING: The List is not necessarily in order of the positions.\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<>();\n    for (SpansCell cell : subSpanCells) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","sourceNew":"  /**\n   * WARNING: The List is not necessarily in order of the positions.\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<>();\n    for (SpansCell cell : subSpanCells) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","sourceOld":"  // TODO: Remove warning after API has been finalized\n  /**\n   * WARNING: The List is not necessarily in order of the the positions\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<>();\n    for (SpansCell cell = first; cell != null; cell = cell.next) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#getPayload().mjava","sourceNew":null,"sourceOld":"  /**\n   * WARNING: The List is not necessarily in order of the positions.\n   * @return Collection of <code>byte[]</code> payloads\n   * @throws IOException if there is a low-level I/O error\n   */\n  @Override\n  public Collection<byte[]> getPayload() throws IOException {\n    Set<byte[]> matchPayload = new HashSet<>();\n    for (SpansCell cell : subSpanCells) {\n      if (cell.isPayloadAvailable()) {\n        matchPayload.addAll(cell.getPayload());\n      }\n    }\n    return matchPayload;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fab172655716b96f7e42376116235017a922de3a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2d530e71ed32ab23b34ca3fc72b080a554a40404","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}