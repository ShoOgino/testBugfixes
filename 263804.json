{"path":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        in.seek(indexEnum.seek(ord));\n        seekPending = false;\n        positioned = true;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexEnum.term());\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        in.seek(indexEnum.seek(ord));\n        seekPending = false;\n        positioned = true;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexEnum.term());\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        in.seek(indexEnum.seek(ord));\n        seekPending = false;\n        positioned = true;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexEnum.term());\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        // TODO: should we cache term lookup by ord as well...?\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        fieldIndexReader.getIndexOffset(ord, indexResult);\n        in.seek(indexResult.offset);\n        seekPending = false;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexResult.term);\n\n        state.ord = indexResult.position-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        blocksSinceSeek = 0;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copy(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        in.seek(indexEnum.seek(ord));\n        seekPending = false;\n        positioned = true;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexEnum.term());\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        in.seek(indexEnum.seek(ord));\n        seekPending = false;\n        positioned = true;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexEnum.term());\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#seek(long).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seek(long ord) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        if (ord >= numTerms) {\n          state.ord = numTerms-1;\n          return SeekStatus.END;\n        }\n\n        in.seek(indexEnum.seek(ord));\n        seekPending = false;\n        positioned = true;\n\n        // NOTE: the first next() after an index seek is\n        // wasteful, since it redundantly reads the same\n        // bytes into the buffer\n        bytesReader.reset(indexEnum.term());\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = next();\n          assert term != null;\n          left--;\n        }\n\n        // always found\n        return SeekStatus.FOUND;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}