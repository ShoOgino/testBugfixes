{"path":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","commits":[{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(key==null) {\n      if(reqFieldNames==null) {\n        reqFieldNames = new HashSet<String>();\n      }\n      reqFieldNames.add(field);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField( String field, String key, DocTransformers augmenters, SolrQueryRequest req )\n  {\n    if(key==null) {\n      if(reqFieldNames==null) {\n        reqFieldNames = new HashSet<String>();\n      }\n      reqFieldNames.add(field);\n    }\n    \n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(key==null) {\n      if(reqFieldNames==null) {\n        reqFieldNames = new HashSet<String>();\n      }\n      reqFieldNames.add(field);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","date":1366137262,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(key==null) {\n      if(reqFieldNames==null) {\n        reqFieldNames = new HashSet<String>();\n      }\n      reqFieldNames.add(field);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","date":1393290187,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, boolean isPseudoField)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    if ( ! isPseudoField) {\n      // fields is returned by getLuceneFieldNames(), to be used to select which real fields\n      // to return, so pseudo-fields should not be added\n      fields.add(field);\n    }\n\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, boolean isPseudoField)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    if ( ! isPseudoField) {\n      // fields is returned by getLuceneFieldNames(), to be used to select which real fields\n      // to return, so pseudo-fields should not be added\n      fields.add(field);\n    }\n\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"]},"commit2Childs":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}