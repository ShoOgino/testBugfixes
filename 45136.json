{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(null, automaton_provider);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(null, automaton_provider);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toLightAutomaton(LightAutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs new <code>LightAutomaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public LightAutomaton toLightAutomaton(LightAutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toLightAutomaton(null, automaton_provider);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(null, automaton_provider);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toLightAutomaton(LightAutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomaton(null, automaton_provider);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>LightAutomaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public LightAutomaton toLightAutomaton(LightAutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toLightAutomaton(null, automaton_provider);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomaton(null, automaton_provider);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(null, automaton_provider);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex regexes.\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *   identifier that is not available from the automaton provider\n   * @exception TooComplexToDeterminizeException if determinizing this regexp\n   *   requires more than maxDeterminizedStates states\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider,\n      int maxDeterminizedStates) throws IllegalArgumentException,\n      TooComplexToDeterminizeException {\n    return toAutomaton(null, automaton_provider, maxDeterminizedStates);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomaton(null, automaton_provider);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param maxDeterminizedStates maximum number of states in the resulting\n   *   automata.  If the automata would need more than this many states\n   *   TooComplextToDeterminizeException is thrown.  Higher number require more\n   *   space but can process more complex regexes.\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   * @exception TooComplexToDeterminizeException if determinizing this regexp\n   *   requires more than maxDeterminizedStates states\n   */\n  public Automaton toAutomaton(int maxDeterminizedStates)\n      throws IllegalArgumentException, TooComplexToDeterminizeException {\n    return toAutomaton(null, null, maxDeterminizedStates);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automaton_provider provider of automata for named identifiers\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that is not available from the automaton provider\n   */\n  public Automaton toAutomaton(AutomatonProvider automaton_provider)\n      throws IllegalArgumentException {\n    return toAutomaton(null, automaton_provider);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}