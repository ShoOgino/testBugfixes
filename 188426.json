{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","commits":[{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    return new ScoreDocComparator() {\n      final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        return collator.compare (index[i.doc], index[j.doc]);\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4806bbe706c8d659fbd09190efb3fa55497dcac2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4681d9b9b007496b5ef377a6851686b1b42574fe","date":1096470542,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        return collator.compare (index[i.doc], index[j.doc]);\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    return new ScoreDocComparator() {\n      final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        return collator.compare (index[i.doc], index[j.doc]);\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        return collator.compare (index[i.doc], index[j.doc]);\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        return collator.compare (index[i.doc], index[j.doc]);\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4806bbe706c8d659fbd09190efb3fa55497dcac2","date":1156108679,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n    \tpublic final int compare(final ScoreDoc i, final ScoreDoc j) {\n\t\t\tString is = index[i.doc];\n\t\t\tString js = index[j.doc];\n\t\t\tif (is == js) {\n\t\t\t\treturn 0;\n\t\t\t} else if (is == null) {\n\t\t\t\treturn -1;\n\t\t\t} else if (js == null) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn collator.compare(is, js);\n\t\t\t}\n\t\t}\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        return collator.compare (index[i.doc], index[j.doc]);\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n    \tpublic final int compare(final ScoreDoc i, final ScoreDoc j) {\n\t\t\tString is = index[i.doc];\n\t\t\tString js = index[j.doc];\n\t\t\tif (is == js) {\n\t\t\t\treturn 0;\n\t\t\t} else if (is == null) {\n\t\t\t\treturn -1;\n\t\t\t} else if (js == null) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn collator.compare(is, js);\n\t\t\t}\n\t\t}\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n    \tpublic final int compare(final ScoreDoc i, final ScoreDoc j) {\n\t\t\tString is = index[i.doc];\n\t\t\tString js = index[j.doc];\n\t\t\tif (is == js) {\n\t\t\t\treturn 0;\n\t\t\t} else if (is == null) {\n\t\t\t\treturn -1;\n\t\t\t} else if (js == null) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn collator.compare(is, js);\n\t\t\t}\n\t\t}\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorStringLocale(IndexReader,String,Locale).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorStringLocale (final IndexReader reader, final String fieldname, final Locale locale)\n  throws IOException {\n    final Collator collator = Collator.getInstance (locale);\n    final String field = fieldname.intern();\n    final String[] index = FieldCache.DEFAULT.getStrings (reader, field);\n    return new ScoreDocComparator() {\n\n    \tpublic final int compare(final ScoreDoc i, final ScoreDoc j) {\n\t\t\tString is = index[i.doc];\n\t\t\tString js = index[j.doc];\n\t\t\tif (is == js) {\n\t\t\t\treturn 0;\n\t\t\t} else if (is == null) {\n\t\t\t\treturn -1;\n\t\t\t} else if (js == null) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn collator.compare(is, js);\n\t\t\t}\n\t\t}\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index[i.doc];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4681d9b9b007496b5ef377a6851686b1b42574fe":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["4806bbe706c8d659fbd09190efb3fa55497dcac2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4806bbe706c8d659fbd09190efb3fa55497dcac2":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["4681d9b9b007496b5ef377a6851686b1b42574fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4681d9b9b007496b5ef377a6851686b1b42574fe":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"4806bbe706c8d659fbd09190efb3fa55497dcac2":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["4806bbe706c8d659fbd09190efb3fa55497dcac2"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["4681d9b9b007496b5ef377a6851686b1b42574fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}