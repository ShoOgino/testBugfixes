{"path":"lucene/src/java/org/apache/lucene/util/packed/Packed64#Packed64(DataInput,int,int).mjava","commits":[{"id":"25f4e7603b223ce22ed6ce764fb665989313410a","date":1317061501,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/Packed64#Packed64(DataInput,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#Packed64(IndexInput,int,int).mjava","sourceNew":"  /**\n   * Creates an array with content retrieved from the given DataInput.\n   * @param in       a DataInput, positioned at the start of Packed64-content.\n   * @param valueCount  the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @throws java.io.IOException if the values for the backing array could not\n   *                             be retrieved.\n   */\n  public Packed64(DataInput in, int valueCount, int bitsPerValue)\n                                                            throws IOException {\n    super(valueCount, bitsPerValue);\n    int size = size(valueCount, bitsPerValue);\n    blocks = new long[size+1]; // +1 due to non-conditional tricks\n    // TODO: find a faster way to bulk-read longs...\n    for(int i=0;i<size;i++) {\n      blocks[i] = in.readLong();\n    }\n    updateCached();\n  }\n\n","sourceOld":"  /**\n   * Creates an array with content retrieved from the given IndexInput.\n   * @param in       an IndexInput, positioned at the start of Packed64-content.\n   * @param valueCount  the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @throws java.io.IOException if the values for the backing array could not\n   *                             be retrieved.\n   */\n  public Packed64(IndexInput in, int valueCount, int bitsPerValue)\n                                                            throws IOException {\n    super(valueCount, bitsPerValue);\n    int size = size(valueCount, bitsPerValue);\n    blocks = new long[size+1]; // +1 due to non-conditional tricks\n    // TODO: find a faster way to bulk-read longs...\n    for(int i=0;i<size;i++) {\n      blocks[i] = in.readLong();\n    }\n    updateCached();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(DataInput,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#Packed64(DataInput,int,int).mjava","sourceNew":"  /**\n   * Creates an array with content retrieved from the given DataInput.\n   * @param in       a DataInput, positioned at the start of Packed64-content.\n   * @param valueCount  the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @throws java.io.IOException if the values for the backing array could not\n   *                             be retrieved.\n   */\n  public Packed64(DataInput in, int valueCount, int bitsPerValue)\n                                                            throws IOException {\n    super(valueCount, bitsPerValue);\n    int size = size(valueCount, bitsPerValue);\n    blocks = new long[size+1]; // +1 due to non-conditional tricks\n    // TODO: find a faster way to bulk-read longs...\n    for(int i=0;i<size;i++) {\n      blocks[i] = in.readLong();\n    }\n    updateCached();\n  }\n\n","sourceOld":"  /**\n   * Creates an array with content retrieved from the given DataInput.\n   * @param in       a DataInput, positioned at the start of Packed64-content.\n   * @param valueCount  the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @throws java.io.IOException if the values for the backing array could not\n   *                             be retrieved.\n   */\n  public Packed64(DataInput in, int valueCount, int bitsPerValue)\n                                                            throws IOException {\n    super(valueCount, bitsPerValue);\n    int size = size(valueCount, bitsPerValue);\n    blocks = new long[size+1]; // +1 due to non-conditional tricks\n    // TODO: find a faster way to bulk-read longs...\n    for(int i=0;i<size;i++) {\n      blocks[i] = in.readLong();\n    }\n    updateCached();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["25f4e7603b223ce22ed6ce764fb665989313410a"],"25f4e7603b223ce22ed6ce764fb665989313410a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f4e7603b223ce22ed6ce764fb665989313410a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f4e7603b223ce22ed6ce764fb665989313410a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}