{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testWrapGraphs().mjava","commits":[{"id":"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd","date":1526034899,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testWrapGraphs().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrapGraphs() throws Exception {\n\n    CannedTokenStream cts = new CannedTokenStream(\n        new Token(\"a\", 0, 1),\n        new Token(\"b\", 2, 3),\n        new Token(\"c\", 4, 5),\n        new Token(\"d\", 6, 7),\n        new Token(\"e\", 8, 9)\n    );\n\n    SynonymMap sm;\n    try (Analyzer analyzer = new MockAnalyzer(random())) {\n      SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n      parser.parse(new StringReader(\"a b, f\\nc d, g\"));\n      sm = parser.build();\n    }\n\n    TokenStream ts = new ConditionalTokenFilter(cts, in -> new SynonymGraphFilter(in, sm, true)) {\n      CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      @Override\n      protected boolean shouldFilter() throws IOException {\n        return \"c\".equals(termAtt.toString()) == false;\n      }\n    };\n\n    assertTokenStreamContents(ts, new String[]{\n        \"f\", \"a\", \"b\", \"c\", \"d\", \"e\"\n        },\n        null, null, null,\n        new int[]{\n        1, 0, 1, 1, 1, 1\n        },\n        new int[]{\n        2, 1, 1, 1, 1, 1\n        });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testWrapGraphs().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testWrapGraphs().mjava","sourceNew":"  public void testWrapGraphs() throws Exception {\n\n    TokenStream stream = whitespaceMockTokenizer(\"a b c d e\");\n\n    SynonymMap sm;\n    try (Analyzer analyzer = new MockAnalyzer(random())) {\n      SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n      parser.parse(new StringReader(\"a b, f\\nc d, g\"));\n      sm = parser.build();\n    }\n\n    TokenStream ts = new SkipMatchingFilter(stream, in -> new SynonymGraphFilter(in, sm, true), \"c\");\n\n    assertTokenStreamContents(ts, new String[]{\n        \"f\", \"a\", \"b\", \"c\", \"d\", \"e\"\n        },\n        null, null, null,\n        new int[]{\n        1, 0, 1, 1, 1, 1\n        },\n        new int[]{\n        2, 1, 1, 1, 1, 1\n        });\n\n  }\n\n","sourceOld":"  public void testWrapGraphs() throws Exception {\n\n    CannedTokenStream cts = new CannedTokenStream(\n        new Token(\"a\", 0, 1),\n        new Token(\"b\", 2, 3),\n        new Token(\"c\", 4, 5),\n        new Token(\"d\", 6, 7),\n        new Token(\"e\", 8, 9)\n    );\n\n    SynonymMap sm;\n    try (Analyzer analyzer = new MockAnalyzer(random())) {\n      SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n      parser.parse(new StringReader(\"a b, f\\nc d, g\"));\n      sm = parser.build();\n    }\n\n    TokenStream ts = new ConditionalTokenFilter(cts, in -> new SynonymGraphFilter(in, sm, true)) {\n      CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      @Override\n      protected boolean shouldFilter() throws IOException {\n        return \"c\".equals(termAtt.toString()) == false;\n      }\n    };\n\n    assertTokenStreamContents(ts, new String[]{\n        \"f\", \"a\", \"b\", \"c\", \"d\", \"e\"\n        },\n        null, null, null,\n        new int[]{\n        1, 0, 1, 1, 1, 1\n        },\n        new int[]{\n        2, 1, 1, 1, 1, 1\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57e34488c685935a055be1bc57b850be1e8c850d":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57e34488c685935a055be1bc57b850be1e8c850d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"57e34488c685935a055be1bc57b850be1e8c850d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["57e34488c685935a055be1bc57b850be1e8c850d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}