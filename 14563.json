{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","commits":[{"id":"13406cad512adb18f0b9447f1f35385a56a7bd88","date":1445252017,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this.wrappedQuery = wrappedQuery;\n    this.function = function;\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);\n    this.function = Objects.requireNonNull(function);\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this.wrappedQuery = wrappedQuery;\n    this.function = function;\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);\n    this.function = Objects.requireNonNull(function);\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this.wrappedQuery = wrappedQuery;\n    this.function = function;\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   * @deprecated Use {@link #PayloadScoreQuery(SpanQuery, PayloadFunction, PayloadDecoder, boolean)}\n   */\n  @Deprecated\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this(wrappedQuery, function, null, includeSpanScore);\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);\n    this.function = Objects.requireNonNull(function);\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   * @deprecated Use {@link #PayloadScoreQuery(SpanQuery, PayloadFunction, PayloadDecoder, boolean)}\n   */\n  @Deprecated\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, boolean includeSpanScore) {\n    this(wrappedQuery, function, null, includeSpanScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["0e7bc21595222ae4f75509300fbb7726691f387f"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"13406cad512adb18f0b9447f1f35385a56a7bd88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["13406cad512adb18f0b9447f1f35385a56a7bd88","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"0e7bc21595222ae4f75509300fbb7726691f387f":["1abe64b887edbb37f6261531cf8a62d88d63fdcb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"13406cad512adb18f0b9447f1f35385a56a7bd88":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}