{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    synchronized (directory) {\n      if (create)\n\tsegmentInfos.write(directory);\n      else\n\tsegmentInfos.read(directory);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a10198efba39d45c46f8714efe9a15616f9c79d","date":1001608022,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain())\t\t\t  // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    if (create)\n\t      segmentInfos.write(directory);\n\t    else\n\t      segmentInfos.read(directory);\n\t    return null;\n\t  }\n\t}.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    synchronized (directory) {\n      if (create)\n\tsegmentInfos.write(directory);\n      else\n\tsegmentInfos.read(directory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fb2e14da294a8c919c6356cbbc8049158c368a7","date":1013197182,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain())                      // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    if (create)\n\t      segmentInfos.write(directory);\n\t    else\n\t      segmentInfos.read(directory);\n\t    return null;\n\t  }\n\t}.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain())\t\t\t  // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    if (create)\n\t      segmentInfos.write(directory);\n\t    else\n\t      segmentInfos.read(directory);\n\t    return null;\n\t  }\n\t}.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"693a4c06f749274d170a2e87d4afb2709a810f46","date":1060700703,"type":3,"author":"Scott Ganyo","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\"), COMMIT_LOCK_TIMEOUT) {\n\t  public Object doBody() throws IOException {\n\t    if (create)\n\t      segmentInfos.write(directory);\n\t    else\n\t      segmentInfos.read(directory);\n\t    return null;\n\t  }\n\t}.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain())                      // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\")) {\n\t  public Object doBody() throws IOException {\n\t    if (create)\n\t      segmentInfos.write(directory);\n\t    else\n\t      segmentInfos.read(directory);\n\t    return null;\n\t  }\n\t}.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\"), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\"), COMMIT_LOCK_TIMEOUT) {\n\t  public Object doBody() throws IOException {\n\t    if (create)\n\t      segmentInfos.write(directory);\n\t    else\n\t      segmentInfos.read(directory);\n\t    return null;\n\t  }\n\t}.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18a2a015b86d022024b2b712bd8b607afccbb881","date":1066054947,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"IndexWriter.WRITE_LOCK_NAME\");\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"COMMIT_LOCK_NAME\"), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"write.lock\");\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"commit.lock\"), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93","date":1066387782,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(\"IndexWriter.WRITE_LOCK_NAME\");\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(\"COMMIT_LOCK_NAME\"), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7961006605708cac1ca5185ead37902442ceff6","date":1078410713,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /** Constructs an IndexWriter for the index in <code>d</code>.  Text will be\n    analyzed with <code>a</code>.  If <code>create</code> is true, then a new,\n    empty index will be created in <code>d</code>, replacing the index already\n    there, if any. */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param path the path to the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @param IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a7d0b384f0022c5a29e562b809ebf73991d7e6","date":1082489615,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws IOException {\n    this(d, a, create, false);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, final boolean create)\n       throws IOException {\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(WRITE_LOCK_TIMEOUT)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    synchronized (directory) {\t\t\t  // in- & inter-process sync\n      new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            if (create)\n              segmentInfos.write(directory);\n            else\n              segmentInfos.read(directory);\n            return null;\n          }\n        }.run();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws IOException {\n    init(d, a, create, false);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws IOException {\n    this(d, a, create, false);\n  }\n\n","bugFix":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist, and <code>create</code> is\n   *  <code>false</code>\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws IOException {\n    init(d, a, create, false);\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","f7961006605708cac1ca5185ead37902442ceff6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0\n   *  release, and call {@link #commit()} when needed.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0\n   *  release, and call {@link #commit()} when needed.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0\n   *  release, and call {@link #commit()} when needed.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0\n   *  release, and call {@link #commit()} when needed.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0\n   *  release, and call {@link #commit()} when needed.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, false, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an IndexWriter for the index in <code>d</code>.\n   * Text will be analyzed with <code>a</code>.  If <code>create</code>\n   * is true, then a new, empty index will be created in\n   * <code>d</code>, replacing the index already there, if any.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param create <code>true</code> to create the index or overwrite\n   *  the existing one; <code>false</code> to append to the existing\n   *  index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0\n   *  release, and call {@link #commit()} when needed.\n   *  Use {@link #IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a, boolean create)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"3a10198efba39d45c46f8714efe9a15616f9c79d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"18a2a015b86d022024b2b712bd8b607afccbb881":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"693a4c06f749274d170a2e87d4afb2709a810f46":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["8b6187898fc4413ccd18229711786550a280383c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["f7961006605708cac1ca5185ead37902442ceff6"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["693a4c06f749274d170a2e87d4afb2709a810f46"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["18a2a015b86d022024b2b712bd8b607afccbb881"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"f7961006605708cac1ca5185ead37902442ceff6":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"87c966e9308847938a7c905c2e46a56d8df788b8":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87c966e9308847938a7c905c2e46a56d8df788b8"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3a10198efba39d45c46f8714efe9a15616f9c79d":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"18a2a015b86d022024b2b712bd8b607afccbb881":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"693a4c06f749274d170a2e87d4afb2709a810f46":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["18a2a015b86d022024b2b712bd8b607afccbb881"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["1b54a9bc667895a2095a886184bf69a3179e63df"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["f7961006605708cac1ca5185ead37902442ceff6"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"f7961006605708cac1ca5185ead37902442ceff6":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["693a4c06f749274d170a2e87d4afb2709a810f46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8b6187898fc4413ccd18229711786550a280383c":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"87c966e9308847938a7c905c2e46a56d8df788b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}