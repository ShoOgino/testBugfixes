{"path":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"e05158fccbb5082f97e4ae2566c5ecfb9df35b7a","date":1501604915,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return PointValues.Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return PointValues.Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMin > 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMax < 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return PointValues.Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = StringHelper.compare(bytesPerDim, minPackedValue, offset, pointBytes, offset);\n        if (cmpMin > 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = StringHelper.compare(bytesPerDim, maxPackedValue, offset, pointBytes, offset);\n        if (cmpMax < 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return PointValues.Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin].CutoffPointVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMin > 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMax < 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return PointValues.Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n      boolean crosses = false;\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = dim*bytesPerDim;\n\n        int cmpMin = FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMin > 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        int cmpMax = FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, pointBytes, offset, offset + bytesPerDim);\n        if (cmpMax < 0) {\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (cmpMin != 0 || cmpMax != 0) {\n          crosses = true;\n        }\n      }\n\n      if (crosses) {\n        return PointValues.Relation.CELL_CROSSES_QUERY;\n      } else {\n        // NOTE: we only hit this if we are on a cell whose min and max values are exactly equal to our point,\n        // which can easily happen if many docs share this one value\n        return PointValues.Relation.CELL_INSIDE_QUERY;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e05158fccbb5082f97e4ae2566c5ecfb9df35b7a"],"e05158fccbb5082f97e4ae2566c5ecfb9df35b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["e05158fccbb5082f97e4ae2566c5ecfb9df35b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"e05158fccbb5082f97e4ae2566c5ecfb9df35b7a":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e05158fccbb5082f97e4ae2566c5ecfb9df35b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}