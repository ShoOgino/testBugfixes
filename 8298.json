{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"\tprivate static final void getTerms(Query query, HashSet<WeightedTerm> terms,boolean prohibited, String fieldName) \n\t{\n       \ttry\n       \t{\n    \t\tif (query instanceof BooleanQuery)\n    \t\t\tgetTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n    \t\telse\n    \t\t\tif(query instanceof FilteredQuery)\n    \t\t\t\tgetTermsFromFilteredQuery((FilteredQuery)query, terms,prohibited, fieldName);\n    \t\t\telse\n    \t\t{\n\t       \t\tHashSet<Term> nonWeightedTerms=new HashSet<Term>();\n\t       \t\tquery.extractTerms(nonWeightedTerms);\n\t       \t\tfor (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext();)\n\t\t\t\t{\n\t\t\t\t\tTerm term = iter.next();\n                                        if((fieldName==null)||(term.field().equals(fieldName)))\n\t\t\t\t\t{\n\t\t\t\t\t\tterms.add(new WeightedTerm(query.getBoost(),term.text()));\n\t\t\t\t\t}\n\t\t\t\t}\n    \t\t}\n\t      }\n\t      catch(UnsupportedOperationException ignore)\n\t      {\n\t    \t  //this is non-fatal for our purposes\n       \t  }\t\t        \t\t\t        \t\n\t}\n\n","sourceOld":"\tprivate static final void getTerms(Query query, HashSet<WeightedTerm> terms,boolean prohibited, String fieldName) \n\t{\n       \ttry\n       \t{\n    \t\tif (query instanceof BooleanQuery)\n    \t\t\tgetTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n    \t\telse\n    \t\t\tif(query instanceof FilteredQuery)\n    \t\t\t\tgetTermsFromFilteredQuery((FilteredQuery)query, terms,prohibited, fieldName);\n    \t\t\telse\n    \t\t{\n\t       \t\tHashSet<Term> nonWeightedTerms=new HashSet<Term>();\n\t       \t\tquery.extractTerms(nonWeightedTerms);\n\t       \t\tfor (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext();)\n\t\t\t\t{\n\t\t\t\t\tTerm term = iter.next();\n                                        if((fieldName==null)||(term.field().equals(fieldName)))\n\t\t\t\t\t{\n\t\t\t\t\t\tterms.add(new WeightedTerm(query.getBoost(),term.text()));\n\t\t\t\t\t}\n\t\t\t\t}\n    \t\t}\n\t      }\n\t      catch(UnsupportedOperationException ignore)\n\t      {\n\t    \t  //this is non-fatal for our purposes\n       \t  }\t\t        \t\t\t        \t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else if (query instanceof FilteredQuery)\n        getTermsFromFilteredQuery((FilteredQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<Term>();\n        query.extractTerms(nonWeightedTerms);\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"\tprivate static final void getTerms(Query query, HashSet<WeightedTerm> terms,boolean prohibited, String fieldName) \n\t{\n       \ttry\n       \t{\n    \t\tif (query instanceof BooleanQuery)\n    \t\t\tgetTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n    \t\telse\n    \t\t\tif(query instanceof FilteredQuery)\n    \t\t\t\tgetTermsFromFilteredQuery((FilteredQuery)query, terms,prohibited, fieldName);\n    \t\t\telse\n    \t\t{\n\t       \t\tHashSet<Term> nonWeightedTerms=new HashSet<Term>();\n\t       \t\tquery.extractTerms(nonWeightedTerms);\n\t       \t\tfor (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext();)\n\t\t\t\t{\n\t\t\t\t\tTerm term = iter.next();\n                                        if((fieldName==null)||(term.field().equals(fieldName)))\n\t\t\t\t\t{\n\t\t\t\t\t\tterms.add(new WeightedTerm(query.getBoost(),term.text()));\n\t\t\t\t\t}\n\t\t\t\t}\n    \t\t}\n\t      }\n\t      catch(UnsupportedOperationException ignore)\n\t      {\n\t    \t  //this is non-fatal for our purposes\n       \t  }\t\t        \t\t\t        \t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else if (query instanceof FilteredQuery)\n        getTermsFromFilteredQuery((FilteredQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        query.extractTerms(nonWeightedTerms);\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else if (query instanceof FilteredQuery)\n        getTermsFromFilteredQuery((FilteredQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<Term>();\n        query.extractTerms(nonWeightedTerms);\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else if (query instanceof FilteredQuery)\n        getTermsFromFilteredQuery((FilteredQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else if (query instanceof FilteredQuery)\n        getTermsFromFilteredQuery((FilteredQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        query.extractTerms(nonWeightedTerms);\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else if (query instanceof FilteredQuery)\n        getTermsFromFilteredQuery((FilteredQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"1db68e96dd908fcd79ef809095822736aa601d08":["05c52ac194342b760b830342ee8423fcf00e54d0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1db68e96dd908fcd79ef809095822736aa601d08"],"05c52ac194342b760b830342ee8423fcf00e54d0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["05c52ac194342b760b830342ee8423fcf00e54d0"],"1db68e96dd908fcd79ef809095822736aa601d08":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05c52ac194342b760b830342ee8423fcf00e54d0":["1db68e96dd908fcd79ef809095822736aa601d08"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}