{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(Collection[SearchGroup[BytesRef]],Collection[SearchGroup[BytesRef]],boolean).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(Collection[SearchGroup[BytesRef]],Collection[SearchGroup[BytesRef]],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(Collection<SearchGroup<BytesRef>> groups1, Collection<SearchGroup<BytesRef>> groups2, boolean doSortValues) {\n    assertEquals(groups1.size(), groups2.size());\n    final Iterator<SearchGroup<BytesRef>> iter1 = groups1.iterator();\n    final Iterator<SearchGroup<BytesRef>> iter2 = groups2.iterator();\n\n    while(iter1.hasNext()) {\n      assertTrue(iter2.hasNext());\n\n      SearchGroup<BytesRef> group1 = iter1.next();\n      SearchGroup<BytesRef> group2 = iter2.next();\n\n      assertEquals(group1.groupValue, group2.groupValue);\n      if (doSortValues) {\n        assertEquals(group1.sortValues, group2.sortValues);\n      }\n    }\n    assertFalse(iter2.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(Collection[SearchGroup[BytesRef]],Collection[SearchGroup[BytesRef]],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(Collection<SearchGroup<BytesRef>> groups1, Collection<SearchGroup<BytesRef>> groups2, boolean doSortValues) {\n    assertEquals(groups1.size(), groups2.size());\n    final Iterator<SearchGroup<BytesRef>> iter1 = groups1.iterator();\n    final Iterator<SearchGroup<BytesRef>> iter2 = groups2.iterator();\n\n    while(iter1.hasNext()) {\n      assertTrue(iter2.hasNext());\n\n      SearchGroup<BytesRef> group1 = iter1.next();\n      SearchGroup<BytesRef> group2 = iter2.next();\n\n      assertEquals(group1.groupValue, group2.groupValue);\n      if (doSortValues) {\n        assertEquals(group1.sortValues, group2.sortValues);\n      }\n    }\n    assertFalse(iter2.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(Collection[SearchGroup[BytesRef]],Collection[SearchGroup[BytesRef]],boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(Collection[SearchGroup[BytesRef]],Collection[SearchGroup[BytesRef]],boolean).mjava","sourceNew":"  private void assertEquals(Collection<SearchGroup<BytesRef>> groups1, Collection<SearchGroup<BytesRef>> groups2, boolean doSortValues) {\n    assertEquals(groups1.size(), groups2.size());\n    final Iterator<SearchGroup<BytesRef>> iter1 = groups1.iterator();\n    final Iterator<SearchGroup<BytesRef>> iter2 = groups2.iterator();\n\n    while(iter1.hasNext()) {\n      assertTrue(iter2.hasNext());\n\n      SearchGroup<BytesRef> group1 = iter1.next();\n      SearchGroup<BytesRef> group2 = iter2.next();\n\n      assertEquals(group1.groupValue, group2.groupValue);\n      if (doSortValues) {\n        assertArrayEquals(group1.sortValues, group2.sortValues);\n      }\n    }\n    assertFalse(iter2.hasNext());\n  }\n\n","sourceOld":"  private void assertEquals(Collection<SearchGroup<BytesRef>> groups1, Collection<SearchGroup<BytesRef>> groups2, boolean doSortValues) {\n    assertEquals(groups1.size(), groups2.size());\n    final Iterator<SearchGroup<BytesRef>> iter1 = groups1.iterator();\n    final Iterator<SearchGroup<BytesRef>> iter2 = groups2.iterator();\n\n    while(iter1.hasNext()) {\n      assertTrue(iter2.hasNext());\n\n      SearchGroup<BytesRef> group1 = iter1.next();\n      SearchGroup<BytesRef> group2 = iter2.next();\n\n      assertEquals(group1.groupValue, group2.groupValue);\n      if (doSortValues) {\n        assertEquals(group1.sortValues, group2.sortValues);\n      }\n    }\n    assertFalse(iter2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(Collection[SearchGroup[BytesRef]],Collection[SearchGroup[BytesRef]],boolean).mjava","sourceNew":null,"sourceOld":"  private void assertEquals(Collection<SearchGroup<BytesRef>> groups1, Collection<SearchGroup<BytesRef>> groups2, boolean doSortValues) {\n    assertEquals(groups1.size(), groups2.size());\n    final Iterator<SearchGroup<BytesRef>> iter1 = groups1.iterator();\n    final Iterator<SearchGroup<BytesRef>> iter2 = groups2.iterator();\n\n    while(iter1.hasNext()) {\n      assertTrue(iter2.hasNext());\n\n      SearchGroup<BytesRef> group1 = iter1.next();\n      SearchGroup<BytesRef> group2 = iter2.next();\n\n      assertEquals(group1.groupValue, group2.groupValue);\n      if (doSortValues) {\n        assertArrayEquals(group1.sortValues, group2.sortValues);\n      }\n    }\n    assertFalse(iter2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4739c84c362b9673ab5ed3e038ff760c718c30c8"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}