{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + LuceneTestCase.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + LuceneTestCase.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + LuceneTestCase.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["e230a61047bc041516c811baa08a7174d6f8322a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3615ce4a1f785ae1b779244de52c6a7d99227e60","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e230a61047bc041516c811baa08a7174d6f8322a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e230a61047bc041516c811baa08a7174d6f8322a","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e230a61047bc041516c811baa08a7174d6f8322a":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3615ce4a1f785ae1b779244de52c6a7d99227e60","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}