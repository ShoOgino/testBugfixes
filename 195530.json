{"path":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","commits":[{"id":"ca9e1c07be7f899d56eb37b44a2e4ca252744a52","date":1134440386,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","pathOld":"/dev/null","sourceNew":"    /* The subtree of subScorers at root is a min heap except possibly for its root element.\r\n     * Bubble the root down as required to make the subtree a heap.\r\n     */\r\n    private void heapAdjust(int root) {\r\n        Scorer scorer=(Scorer)subScorers.get(root);\r\n        int doc=scorer.doc();\r\n        int i=root, size=subScorers.size();\r\n        while (i<=(size>>1)-1) {\r\n            int lchild=(i<<1)+1;\r\n            Scorer lscorer=(Scorer)subScorers.get(lchild);\r\n            int ldoc=lscorer.doc();\r\n            int rdoc=Integer.MAX_VALUE, rchild=(i<<1)+2;\r\n            Scorer rscorer=null;\r\n            if (rchild<size) {\r\n                rscorer=(Scorer)subScorers.get(rchild);\r\n                rdoc=rscorer.doc();\r\n            }\r\n            if (ldoc<doc) {\r\n                if (rdoc<ldoc) {\r\n                    subScorers.set(i, rscorer);\r\n                    subScorers.set(rchild, scorer);\r\n                    i=rchild;\r\n                } else {\r\n                    subScorers.set(i, lscorer);\r\n                    subScorers.set(lchild, scorer);\r\n                    i=lchild;\r\n                }\r\n            } else if (rdoc<doc) {\r\n                subScorers.set(i, rscorer);\r\n                subScorers.set(rchild, scorer);\r\n                i=rchild;\r\n            } else return;\r\n        }\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","sourceNew":"    /* The subtree of subScorers at root is a min heap except possibly for its root element.\n     * Bubble the root down as required to make the subtree a heap.\n     */\n    private void heapAdjust(int root) {\n        Scorer scorer=(Scorer)subScorers.get(root);\n        int doc=scorer.doc();\n        int i=root, size=subScorers.size();\n        while (i<=(size>>1)-1) {\n            int lchild=(i<<1)+1;\n            Scorer lscorer=(Scorer)subScorers.get(lchild);\n            int ldoc=lscorer.doc();\n            int rdoc=Integer.MAX_VALUE, rchild=(i<<1)+2;\n            Scorer rscorer=null;\n            if (rchild<size) {\n                rscorer=(Scorer)subScorers.get(rchild);\n                rdoc=rscorer.doc();\n            }\n            if (ldoc<doc) {\n                if (rdoc<ldoc) {\n                    subScorers.set(i, rscorer);\n                    subScorers.set(rchild, scorer);\n                    i=rchild;\n                } else {\n                    subScorers.set(i, lscorer);\n                    subScorers.set(lchild, scorer);\n                    i=lchild;\n                }\n            } else if (rdoc<doc) {\n                subScorers.set(i, rscorer);\n                subScorers.set(rchild, scorer);\n                i=rchild;\n            } else return;\n        }\n    }\n\n","sourceOld":"    /* The subtree of subScorers at root is a min heap except possibly for its root element.\r\n     * Bubble the root down as required to make the subtree a heap.\r\n     */\r\n    private void heapAdjust(int root) {\r\n        Scorer scorer=(Scorer)subScorers.get(root);\r\n        int doc=scorer.doc();\r\n        int i=root, size=subScorers.size();\r\n        while (i<=(size>>1)-1) {\r\n            int lchild=(i<<1)+1;\r\n            Scorer lscorer=(Scorer)subScorers.get(lchild);\r\n            int ldoc=lscorer.doc();\r\n            int rdoc=Integer.MAX_VALUE, rchild=(i<<1)+2;\r\n            Scorer rscorer=null;\r\n            if (rchild<size) {\r\n                rscorer=(Scorer)subScorers.get(rchild);\r\n                rdoc=rscorer.doc();\r\n            }\r\n            if (ldoc<doc) {\r\n                if (rdoc<ldoc) {\r\n                    subScorers.set(i, rscorer);\r\n                    subScorers.set(rchild, scorer);\r\n                    i=rchild;\r\n                } else {\r\n                    subScorers.set(i, lscorer);\r\n                    subScorers.set(lchild, scorer);\r\n                    i=lchild;\r\n                }\r\n            } else if (rdoc<doc) {\r\n                subScorers.set(i, rscorer);\r\n                subScorers.set(rchild, scorer);\r\n                i=rchild;\r\n            } else return;\r\n        }\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","sourceNew":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"    /* The subtree of subScorers at root is a min heap except possibly for its root element.\n     * Bubble the root down as required to make the subtree a heap.\n     */\n    private void heapAdjust(int root) {\n        Scorer scorer=(Scorer)subScorers.get(root);\n        int doc=scorer.doc();\n        int i=root, size=subScorers.size();\n        while (i<=(size>>1)-1) {\n            int lchild=(i<<1)+1;\n            Scorer lscorer=(Scorer)subScorers.get(lchild);\n            int ldoc=lscorer.doc();\n            int rdoc=Integer.MAX_VALUE, rchild=(i<<1)+2;\n            Scorer rscorer=null;\n            if (rchild<size) {\n                rscorer=(Scorer)subScorers.get(rchild);\n                rdoc=rscorer.doc();\n            }\n            if (ldoc<doc) {\n                if (rdoc<ldoc) {\n                    subScorers.set(i, rscorer);\n                    subScorers.set(rchild, scorer);\n                    i=rchild;\n                } else {\n                    subScorers.set(i, lscorer);\n                    subScorers.set(lchild, scorer);\n                    i=lchild;\n                }\n            } else if (rdoc<doc) {\n                subScorers.set(i, rscorer);\n                subScorers.set(rchild, scorer);\n                i=rchild;\n            } else return;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","sourceNew":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["2123bddbd65dea198cac380540636ce43a880403"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["30a558487f2298c2c19ceca9103c1b6865d64708"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"2123bddbd65dea198cac380540636ce43a880403":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}