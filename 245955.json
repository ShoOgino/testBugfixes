{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":null,"sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}