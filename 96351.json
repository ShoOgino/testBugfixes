{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreqPayload[]).mjava","commits":[{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreqPayload[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreqPayload[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqPayloadArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreqPayload[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreqPayload[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqPayloadArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}