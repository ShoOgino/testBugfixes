{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","sourceNew":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader,  CategoryListCache clCache, ScoredDocIDs allDocs,\n      String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants)\n      throws IOException {\n    FacetSearchParams sParams = new FacetSearchParams(iParams);\n    sParams.setClCache(clCache);\n    for (String dim : dimension) {\n      sParams.addFacetRequest(new PerDimCountFacetRequest(\n          new CategoryPath(dim), 10));\n    }\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","sourceOld":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader,  CategoryListCache clCache, ScoredDocIDs allDocs,\n      String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants)\n      throws IOException {\n    FacetSearchParams sParams = new FacetSearchParams(iParams);\n    sParams.setClCache(clCache);\n    for (String dim : dimension) {\n      sParams.addFacetRequest(new PerDimCountFacetRequest(\n          new CategoryPath(dim), 10));\n    }\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","sourceNew":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader, final CategoryListCache clCache,\n      ScoredDocIDs allDocs, String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants) throws IOException {\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    for (String dim : dimension) {\n      facetRequests.add(new PerDimCountFacetRequest(new CategoryPath(dim), 10));\n    }\n    FacetSearchParams sParams = new FacetSearchParams(facetRequests, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","sourceOld":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader,  CategoryListCache clCache, ScoredDocIDs allDocs,\n      String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants)\n      throws IOException {\n    FacetSearchParams sParams = new FacetSearchParams(iParams);\n    sParams.setClCache(clCache);\n    for (String dim : dimension) {\n      sParams.addFacetRequest(new PerDimCountFacetRequest(\n          new CategoryPath(dim), 10));\n    }\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","sourceNew":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader, final CategoryListCache clCache,\n      ScoredDocIDs allDocs, String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants) throws IOException {\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    for (String dim : dimension) {\n      facetRequests.add(new PerDimCountFacetRequest(new CategoryPath(dim), 10));\n    }\n    FacetSearchParams sParams = new FacetSearchParams(facetRequests, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","sourceOld":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader,  CategoryListCache clCache, ScoredDocIDs allDocs,\n      String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants)\n      throws IOException {\n    FacetSearchParams sParams = new FacetSearchParams(iParams);\n    sParams.setClCache(clCache);\n    for (String dim : dimension) {\n      sParams.addFacetRequest(new PerDimCountFacetRequest(\n          new CategoryPath(dim), 10));\n    }\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","sourceNew":null,"sourceOld":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader, final CategoryListCache clCache,\n      ScoredDocIDs allDocs, String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants) throws IOException {\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    for (String dim : dimension) {\n      facetRequests.add(new PerDimCountFacetRequest(new CategoryPath(dim), 10));\n    }\n    FacetSearchParams sParams = new FacetSearchParams(facetRequests, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[]).mjava","sourceNew":null,"sourceOld":"  private void validateFacetedSearch(FacetIndexingParams iParams,\n      TaxonomyReader taxo, IndexReader reader, final CategoryListCache clCache,\n      ScoredDocIDs allDocs, String[] dimension, int[] expectedValue,\n      int[] expectedNumDescendants) throws IOException {\n    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n    for (String dim : dimension) {\n      facetRequests.add(new PerDimCountFacetRequest(new CategoryPath(dim), 10));\n    }\n    FacetSearchParams sParams = new FacetSearchParams(facetRequests, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsAccumulator acc = new StandardFacetsAccumulator(sParams, reader, taxo);\n    \n    // no use to test this with complement since at that mode all facets are taken\n    acc.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n\n    List<FacetResult> results = acc.accumulate(allDocs);\n    assertEquals(\"Wrong #results\", dimension.length, results.size());\n\n    for (int i = 0; i < results.size(); i++) {\n      FacetResult res = results.get(i);\n      assertEquals(\"wrong num-descendants for dimension \" + dimension[i],\n          expectedNumDescendants[i], res.getNumValidDescendants());\n      FacetResultNode resNode = res.getFacetResultNode();\n      assertEquals(\"wrong value for dimension \" + dimension[i],\n          expectedValue[i], (int) resNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}