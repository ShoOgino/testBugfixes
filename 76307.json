{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7edb20114e86ec883b0b08bd624eee852c565c06":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7edb20114e86ec883b0b08bd624eee852c565c06","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7edb20114e86ec883b0b08bd624eee852c565c06":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["7edb20114e86ec883b0b08bd624eee852c565c06"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}