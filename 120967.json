{"path":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#count().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++) {\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      }\n      count = c;\n    }\n    assert count <= size: \"count=\" + count + \" size=\" + size;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","e3a73b15d807e41306466aec106b4cb85b8d5335"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9454a6510e2db155fb01faa5c049b06ece95fab9","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}