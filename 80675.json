{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","commits":[{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return new MonotonicBlockPackedReader(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return new MonotonicBlockPackedReader(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return new MonotonicBlockPackedReader(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return MonotonicBlockPackedReader.of(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n  }\n\n","sourceOld":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return new MonotonicBlockPackedReader(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n  }\n\n","bugFix":null,"bugIntro":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1","date":1402428035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return MonotonicBlockPackedReader.of(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, true);\n  }\n\n","sourceOld":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return MonotonicBlockPackedReader.of(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count, true);\n  }\n\n","bugFix":["db1893644d5f20456c9524b28e826293d767db65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae889c32f4f301251f60804d7082a520e0594c6","date":1402924441,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return MonotonicBlockPackedReader.of(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    data.seek(bytes.addressesOffset);\n    return MonotonicBlockPackedReader.of(data.clone(), bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1893644d5f20456c9524b28e826293d767db65":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1":["db1893644d5f20456c9524b28e826293d767db65"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"6ae889c32f4f301251f60804d7082a520e0594c6":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1","6ae889c32f4f301251f60804d7082a520e0594c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ae889c32f4f301251f60804d7082a520e0594c6"]},"commit2Childs":{"db1893644d5f20456c9524b28e826293d767db65":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","1a7bf5332d569e3d07c4b248462f5d212e26e9af","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1":["6ae889c32f4f301251f60804d7082a520e0594c6","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["db1893644d5f20456c9524b28e826293d767db65","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"6ae889c32f4f301251f60804d7082a520e0594c6":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}