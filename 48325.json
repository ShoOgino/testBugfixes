{"path":"src/test/org/apache/lucene/util/LuceneTestCaseJ4#dumpIterator(String,Iterator,PrintStream).mjava","commits":[{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/LuceneTestCaseJ4#dumpIterator(String,Iterator,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convinience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/LuceneTestCaseJ4#dumpIterator(String,Iterator[#],PrintStream).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCaseJ4#dumpIterator(String,Iterator,PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator<?> iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","sourceOld":"  /**\n   * Convinience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"777b7ef341decfee8757f492d8a154637cd7a384":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["777b7ef341decfee8757f492d8a154637cd7a384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["777b7ef341decfee8757f492d8a154637cd7a384"],"777b7ef341decfee8757f492d8a154637cd7a384":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}