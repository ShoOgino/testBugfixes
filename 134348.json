{"path":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>double</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, LegacyNumericType.DOUBLE, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>double</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, LegacyNumericType.DOUBLE, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>double</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, LegacyNumericType.DOUBLE, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>double</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, LegacyNumericType.DOUBLE, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>double</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, LegacyNumericType.DOUBLE, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>double</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}.  By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, LegacyNumericType.DOUBLE, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}