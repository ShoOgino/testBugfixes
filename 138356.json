{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#uninstall(String,String).mjava","commits":[{"id":"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd","date":1596533005,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#uninstall(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void uninstall(String packageName, String version) {\n    SolrPackageInstance packageInstance = getPackageInstance(packageName, version);\n    if (packageInstance == null) {\n      PackageUtils.printRed(\"Package \" + packageName + \":\" + version + \" doesn't exist. Use the install command to install this package version first.\");\n      System.exit(1);\n    }\n\n    // Make sure that this package instance is not deployed on any collection\n    Map<String, String> collectionsDeployedOn = getDeployedCollections(packageName);\n    for (String collection: collectionsDeployedOn.keySet()) {\n      if (version.equals(collectionsDeployedOn.get(collection))) {\n        PackageUtils.printRed(\"Package \" + packageName + \" is currently deployed on collection: \" + collection + \". Undeploy the package with undeploy <package-name> -collections <collection1>[,<collection2>,...] before attempting to uninstall the package.\");\n        System.exit(1);\n      }\n    }\n\n    // Make sure that no plugin from this package instance has been deployed as cluster level plugins\n    Map<String, SolrPackageInstance> clusterPackages = getPackagesDeployedAsClusterLevelPlugins();\n    for (String clusterPackageName: clusterPackages.keySet()) {\n      SolrPackageInstance clusterPackageInstance = clusterPackages.get(clusterPackageName);\n      if (packageName.equals(clusterPackageName) && version.equals(clusterPackageInstance.version)) {\n        PackageUtils.printRed(\"Package \" + packageName + \"is currently deployed as a cluster-level plugin (\" + clusterPackageInstance.getCustomData() + \"). Undeploy the package with undeploy <package-name> -collections <collection1>[,<collection2>,...] before uninstalling the package.\");\n        System.exit(1);\n      }\n    }\n\n    // Delete the package by calling the Package API and remove the Jar\n\n    PackageUtils.printGreen(\"Executing Package API to remove this package...\");\n    Package.DelVersion del = new Package.DelVersion();\n    del.version = version;\n    del.pkg = packageName;\n\n    V2Request req = new V2Request.Builder(PackageUtils.PACKAGE_PATH)\n            .forceV2(true)\n            .withMethod(SolrRequest.METHOD.POST)\n            .withPayload(Collections.singletonMap(\"delete\", del))\n            .build();\n\n    try {\n      V2Response resp = req.process(solrClient);\n      PackageUtils.printGreen(\"Response: \" + resp.jsonStr());\n    } catch (SolrServerException | IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n\n    PackageUtils.printGreen(\"Executing Package Store API to remove the \" + packageName + \" package...\");\n\n    List<String> filesToDelete = new ArrayList<>(packageInstance.files);\n    filesToDelete.add(String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, \"manifest.json\"));\n    for (String filePath: filesToDelete) {\n      DistribPackageStore.deleteZKFileEntry(zkClient, filePath);\n      String path = solrClient.getBaseURL() + \"/api/cluster/files\" + filePath;\n      PackageUtils.printGreen(\"Deleting \" + path);\n      HttpDelete httpDel = new HttpDelete(path);\n      Utils.executeHttpMethod(solrClient.getHttpClient(), path, Utils.JSONCONSUMER, httpDel);\n    }\n\n    PackageUtils.printGreen(\"Package uninstalled: \" + packageName + \":\" + version + \":-)\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"]},"commit2Childs":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}