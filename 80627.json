{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","commits":[{"id":"240cffb5a9df98261aab509ee8fd2a252bccf157","date":1363702876,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\"), true));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\"), true));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\"), true));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\"), true));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\"), true));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\"), true));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\"), true));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\"), true));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\"), true));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\"), true));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\"), true));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\"), true));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}