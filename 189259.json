{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","commits":[{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns next double within range.\n   * <p>\n   * Don't pass huge numbers or infinity or anything like that yet. may have bugs!\n   */\n  // the goal is to adjust random number generation to test edges, create more duplicates, create \"one-offs\" in floating point space, etc.\n  // we do this by first picking a good \"base value\" (explicitly targeting edges, zero if allowed, or \"discrete values\"). but it also\n  // ensures we pick any double in the range and generally still produces randomish looking numbers.\n  // then we sometimes perturb that by one ulp.\n  private static double nextDoubleInternal(double low, double high) {\n    assert low >= Integer.MIN_VALUE;\n    assert high <= Integer.MAX_VALUE;\n    assert Double.isFinite(low);\n    assert Double.isFinite(high);\n    assert high >= low : \"low=\" + low + \" high=\" + high;\n    \n    // if they are equal, not much we can do\n    if (low == high) {\n      return low;\n    }\n\n    // first pick a base value.\n    final double baseValue;\n    int surpriseMe = random().nextInt(17);\n    if (surpriseMe == 0) {\n      // random bits\n      long lowBits = NumericUtils.doubleToSortableLong(low);\n      long highBits = NumericUtils.doubleToSortableLong(high);\n      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));\n    } else if (surpriseMe == 1) {\n      // edge case\n      baseValue = low;\n    } else if (surpriseMe == 2) {\n      // edge case\n      baseValue = high;\n    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {\n      // may trigger divide by 0\n      baseValue = 0.0;\n    } else if (surpriseMe == 4) {\n      // divide up space into block of 360\n      double delta = (high - low) / 360;\n      int block = random().nextInt(360);\n      baseValue = low + delta * block;\n    } else {\n      // distributed ~ evenly\n      baseValue = low + (high - low) * random().nextDouble();\n    }\n\n    assert baseValue >= low;\n    assert baseValue <= high;\n\n    // either return the base value or adjust it by 1 ulp in a random direction (if possible)\n    int adjustMe = random().nextInt(17);\n    if (adjustMe == 0) {\n      return Math.nextAfter(adjustMe, high);\n    } else if (adjustMe == 1) {\n      return Math.nextAfter(adjustMe, low);\n    } else {\n      return baseValue;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns next double within range.\n   * <p>\n   * Don't pass huge numbers or infinity or anything like that yet. may have bugs!\n   */\n  // the goal is to adjust random number generation to test edges, create more duplicates, create \"one-offs\" in floating point space, etc.\n  // we do this by first picking a good \"base value\" (explicitly targeting edges, zero if allowed, or \"discrete values\"). but it also\n  // ensures we pick any double in the range and generally still produces randomish looking numbers.\n  // then we sometimes perturb that by one ulp.\n  private static double nextDoubleInternal(double low, double high) {\n    assert low >= Integer.MIN_VALUE;\n    assert high <= Integer.MAX_VALUE;\n    assert Double.isFinite(low);\n    assert Double.isFinite(high);\n    assert high >= low : \"low=\" + low + \" high=\" + high;\n    \n    // if they are equal, not much we can do\n    if (low == high) {\n      return low;\n    }\n\n    // first pick a base value.\n    final double baseValue;\n    int surpriseMe = random().nextInt(17);\n    if (surpriseMe == 0) {\n      // random bits\n      long lowBits = NumericUtils.doubleToSortableLong(low);\n      long highBits = NumericUtils.doubleToSortableLong(high);\n      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));\n    } else if (surpriseMe == 1) {\n      // edge case\n      baseValue = low;\n    } else if (surpriseMe == 2) {\n      // edge case\n      baseValue = high;\n    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {\n      // may trigger divide by 0\n      baseValue = 0.0;\n    } else if (surpriseMe == 4) {\n      // divide up space into block of 360\n      double delta = (high - low) / 360;\n      int block = random().nextInt(360);\n      baseValue = low + delta * block;\n    } else {\n      // distributed ~ evenly\n      baseValue = low + (high - low) * random().nextDouble();\n    }\n\n    assert baseValue >= low;\n    assert baseValue <= high;\n\n    // either return the base value or adjust it by 1 ulp in a random direction (if possible)\n    int adjustMe = random().nextInt(17);\n    if (adjustMe == 0) {\n      return Math.nextAfter(adjustMe, high);\n    } else if (adjustMe == 1) {\n      return Math.nextAfter(adjustMe, low);\n    } else {\n      return baseValue;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","sourceNew":"  /**\n   * Returns next double within range.\n   * <p>\n   * Don't pass huge numbers or infinity or anything like that yet. may have bugs!\n   */\n  // the goal is to adjust random number generation to test edges, create more duplicates, create \"one-offs\" in floating point space, etc.\n  // we do this by first picking a good \"base value\" (explicitly targeting edges, zero if allowed, or \"discrete values\"). but it also\n  // ensures we pick any double in the range and generally still produces randomish looking numbers.\n  // then we sometimes perturb that by one ulp.\n  private static double nextDoubleInternal(double low, double high) {\n    assert low >= Integer.MIN_VALUE;\n    assert high <= Integer.MAX_VALUE;\n    assert Double.isFinite(low);\n    assert Double.isFinite(high);\n    assert high >= low : \"low=\" + low + \" high=\" + high;\n    \n    // if they are equal, not much we can do\n    if (low == high) {\n      return low;\n    }\n\n    // first pick a base value.\n    final double baseValue;\n    int surpriseMe = randomInt(17);\n    if (surpriseMe == 0) {\n      // random bits\n      long lowBits = NumericUtils.doubleToSortableLong(low);\n      long highBits = NumericUtils.doubleToSortableLong(high);\n      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));\n    } else if (surpriseMe == 1) {\n      // edge case\n      baseValue = low;\n    } else if (surpriseMe == 2) {\n      // edge case\n      baseValue = high;\n    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {\n      // may trigger divide by 0\n      baseValue = 0.0;\n    } else if (surpriseMe == 4) {\n      // divide up space into block of 360\n      double delta = (high - low) / 360;\n      int block = randomInt(360);\n      baseValue = low + delta * block;\n    } else {\n      // distributed ~ evenly\n      baseValue = low + (high - low) * randomDouble();\n    }\n\n    assert baseValue >= low;\n    assert baseValue <= high;\n\n    // either return the base value or adjust it by 1 ulp in a random direction (if possible)\n    int adjustMe = randomInt(17);\n    if (adjustMe == 0) {\n      return Math.nextAfter(adjustMe, high);\n    } else if (adjustMe == 1) {\n      return Math.nextAfter(adjustMe, low);\n    } else {\n      return baseValue;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns next double within range.\n   * <p>\n   * Don't pass huge numbers or infinity or anything like that yet. may have bugs!\n   */\n  // the goal is to adjust random number generation to test edges, create more duplicates, create \"one-offs\" in floating point space, etc.\n  // we do this by first picking a good \"base value\" (explicitly targeting edges, zero if allowed, or \"discrete values\"). but it also\n  // ensures we pick any double in the range and generally still produces randomish looking numbers.\n  // then we sometimes perturb that by one ulp.\n  private static double nextDoubleInternal(double low, double high) {\n    assert low >= Integer.MIN_VALUE;\n    assert high <= Integer.MAX_VALUE;\n    assert Double.isFinite(low);\n    assert Double.isFinite(high);\n    assert high >= low : \"low=\" + low + \" high=\" + high;\n    \n    // if they are equal, not much we can do\n    if (low == high) {\n      return low;\n    }\n\n    // first pick a base value.\n    final double baseValue;\n    int surpriseMe = random().nextInt(17);\n    if (surpriseMe == 0) {\n      // random bits\n      long lowBits = NumericUtils.doubleToSortableLong(low);\n      long highBits = NumericUtils.doubleToSortableLong(high);\n      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));\n    } else if (surpriseMe == 1) {\n      // edge case\n      baseValue = low;\n    } else if (surpriseMe == 2) {\n      // edge case\n      baseValue = high;\n    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {\n      // may trigger divide by 0\n      baseValue = 0.0;\n    } else if (surpriseMe == 4) {\n      // divide up space into block of 360\n      double delta = (high - low) / 360;\n      int block = random().nextInt(360);\n      baseValue = low + delta * block;\n    } else {\n      // distributed ~ evenly\n      baseValue = low + (high - low) * random().nextDouble();\n    }\n\n    assert baseValue >= low;\n    assert baseValue <= high;\n\n    // either return the base value or adjust it by 1 ulp in a random direction (if possible)\n    int adjustMe = random().nextInt(17);\n    if (adjustMe == 0) {\n      return Math.nextAfter(adjustMe, high);\n    } else if (adjustMe == 1) {\n      return Math.nextAfter(adjustMe, low);\n    } else {\n      return baseValue;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextDoubleInternal(double,double).mjava","sourceNew":"  /**\n   * Returns next double within range.\n   * <p>\n   * Don't pass huge numbers or infinity or anything like that yet. may have bugs!\n   */\n  // the goal is to adjust random number generation to test edges, create more duplicates, create \"one-offs\" in floating point space, etc.\n  // we do this by first picking a good \"base value\" (explicitly targeting edges, zero if allowed, or \"discrete values\"). but it also\n  // ensures we pick any double in the range and generally still produces randomish looking numbers.\n  // then we sometimes perturb that by one ulp.\n  private static double nextDoubleInternal(double low, double high) {\n    assert low >= Integer.MIN_VALUE;\n    assert high <= Integer.MAX_VALUE;\n    assert Double.isFinite(low);\n    assert Double.isFinite(high);\n    assert high >= low : \"low=\" + low + \" high=\" + high;\n    \n    // if they are equal, not much we can do\n    if (low == high) {\n      return low;\n    }\n\n    // first pick a base value.\n    final double baseValue;\n    int surpriseMe = random().nextInt(17);\n    if (surpriseMe == 0) {\n      // random bits\n      long lowBits = NumericUtils.doubleToSortableLong(low);\n      long highBits = NumericUtils.doubleToSortableLong(high);\n      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));\n    } else if (surpriseMe == 1) {\n      // edge case\n      baseValue = low;\n    } else if (surpriseMe == 2) {\n      // edge case\n      baseValue = high;\n    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {\n      // may trigger divide by 0\n      baseValue = 0.0;\n    } else if (surpriseMe == 4) {\n      // divide up space into block of 360\n      double delta = (high - low) / 360;\n      int block = random().nextInt(360);\n      baseValue = low + delta * block;\n    } else {\n      // distributed ~ evenly\n      baseValue = low + (high - low) * random().nextDouble();\n    }\n\n    assert baseValue >= low;\n    assert baseValue <= high;\n\n    // either return the base value or adjust it by 1 ulp in a random direction (if possible)\n    int adjustMe = random().nextInt(17);\n    if (adjustMe == 0) {\n      return Math.nextAfter(adjustMe, high);\n    } else if (adjustMe == 1) {\n      return Math.nextAfter(adjustMe, low);\n    } else {\n      return baseValue;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns next double within range.\n   * <p>\n   * Don't pass huge numbers or infinity or anything like that yet. may have bugs!\n   */\n  // the goal is to adjust random number generation to test edges, create more duplicates, create \"one-offs\" in floating point space, etc.\n  // we do this by first picking a good \"base value\" (explicitly targeting edges, zero if allowed, or \"discrete values\"). but it also\n  // ensures we pick any double in the range and generally still produces randomish looking numbers.\n  // then we sometimes perturb that by one ulp.\n  private static double nextDoubleInternal(double low, double high) {\n    assert low >= Integer.MIN_VALUE;\n    assert high <= Integer.MAX_VALUE;\n    assert Double.isFinite(low);\n    assert Double.isFinite(high);\n    assert high >= low : \"low=\" + low + \" high=\" + high;\n    \n    // if they are equal, not much we can do\n    if (low == high) {\n      return low;\n    }\n\n    // first pick a base value.\n    final double baseValue;\n    int surpriseMe = randomInt(17);\n    if (surpriseMe == 0) {\n      // random bits\n      long lowBits = NumericUtils.doubleToSortableLong(low);\n      long highBits = NumericUtils.doubleToSortableLong(high);\n      baseValue = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(), lowBits, highBits));\n    } else if (surpriseMe == 1) {\n      // edge case\n      baseValue = low;\n    } else if (surpriseMe == 2) {\n      // edge case\n      baseValue = high;\n    } else if (surpriseMe == 3 && low <= 0 && high >= 0) {\n      // may trigger divide by 0\n      baseValue = 0.0;\n    } else if (surpriseMe == 4) {\n      // divide up space into block of 360\n      double delta = (high - low) / 360;\n      int block = randomInt(360);\n      baseValue = low + delta * block;\n    } else {\n      // distributed ~ evenly\n      baseValue = low + (high - low) * randomDouble();\n    }\n\n    assert baseValue >= low;\n    assert baseValue <= high;\n\n    // either return the base value or adjust it by 1 ulp in a random direction (if possible)\n    int adjustMe = randomInt(17);\n    if (adjustMe == 0) {\n      return Math.nextAfter(adjustMe, high);\n    } else if (adjustMe == 1) {\n      return Math.nextAfter(adjustMe, low);\n    } else {\n      return baseValue;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["713122036535651642e6d4fe57ce12b449e18473"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}