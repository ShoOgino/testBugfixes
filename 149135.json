{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<String>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8259c159da2de2e8528524fb76b244b46cbded59"],"8259c159da2de2e8528524fb76b244b46cbded59":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8259c159da2de2e8528524fb76b244b46cbded59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8259c159da2de2e8528524fb76b244b46cbded59":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}