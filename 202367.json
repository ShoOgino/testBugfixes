{"path":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardHighlighting(DocList,Query,SolrQueryRequest,CommonParams,String[]).mjava","commits":[{"id":"0452863ee588101738d341e6e97eb87eb010052a","date":1152814944,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardHighlighting(DocList,Query,SolrQueryRequest,CommonParams,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform highlighting of selected fields.\n   *\n   * @param docs query results\n   * @param query the (possibly re-written query)\n   * @param req associated SolrQueryRequest\n   * @param defaultFields default search field list\n   *\n   * @return NamedList containing summary data, or null if highlighting is \n   * disabled.\n   *\n   */\n  public static NamedList doStandardHighlighting(DocList docs,\n                                                 Query query,\n                                                 SolrQueryRequest req,\n                                                 CommonParams params,\n                                                 String[] defaultFields\n                                                 ) throws IOException {\n    if(!getBooleanParam(req, params.HIGHLIGHT, params.highlight)) \n      return null;\n    String fieldParam = getParam(req, params.HIGHLIGHT_FIELDS, \n                                 params.highlightFields);\n    String fields[];\n    if(fieldParam == null || fieldParam.trim().equals(\"\")) {\n      // use default search field if highlight fieldlist not specified.\n      if (defaultFields == null || defaultFields.length == 0 ||\n          defaultFields[0] == null) {\n        fields = new String[]{req.getSchema().getDefaultSearchFieldName()};\n      } else\n        fields = defaultFields;\n    } else \n      fields = splitList.split(fieldParam.trim());\n\n    Highlighter highlighter;\n    String formatterSpec = getParam(req, params.HIGHLIGHT_FORMATTER_CLASS,\n                                    params.highlightFormatterClass);\n    if(formatterSpec == null || formatterSpec.equals(\"\")) {\n      highlighter = getDefaultHighlighter(query);\n    } else {\n      highlighter = new Highlighter(\n        (Formatter)Config.newInstance(formatterSpec),\n        new QueryScorer(query));\n      highlighter.setTextFragmenter(new GapFragmenter());\n    }\n    \n    int numFragments = getNumberParam(req, params.MAX_SNIPPETS,\n                                      params.maxSnippets).intValue();\n\n    return getHighlights(\n      docs, \n      fields, \n      req.getSearcher(),\n      highlighter,\n      numFragments);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44f497c313977be641ddf24aab74b30e6de834d8","date":1156361697,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardHighlighting(DocList,Query,SolrQueryRequest,CommonParams,String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardHighlighting(DocList,Query,SolrQueryRequest,CommonParams,String[]).mjava","sourceNew":"  /**\n   * Perform highlighting of selected fields.\n   *\n   * @param docs query results\n   * @param query the (possibly re-written query)\n   * @param req associated SolrQueryRequest\n   * @param defaultFields default search field list\n   *\n   * @return NamedList containing summary data, or null if highlighting is \n   * disabled.\n   *\n   */\n  public static NamedList doStandardHighlighting(DocList docs,\n                                                 Query query,\n                                                 SolrQueryRequest req,\n                                                 CommonParams params,\n                                                 String[] defaultFields\n                                                 ) throws IOException {\n    if(!getBooleanParam(req, SolrParams.HIGHLIGHT, params.highlight))\n      return null;\n    String fieldParam = getParam(req, SolrParams.HIGHLIGHT_FIELDS,\n                                 params.highlightFields);\n    String fields[];\n    if(fieldParam == null || fieldParam.trim().equals(\"\")) {\n      // use default search field if highlight fieldlist not specified.\n      if (defaultFields == null || defaultFields.length == 0 ||\n          defaultFields[0] == null) {\n        fields = new String[]{req.getSchema().getDefaultSearchFieldName()};\n      } else\n        fields = defaultFields;\n    } else \n      fields = splitList.split(fieldParam.trim());\n\n    Highlighter highlighter;\n    String formatterSpec = getParam(req, SolrParams.HIGHLIGHT_FORMATTER_CLASS,\n                                    params.highlightFormatterClass);\n    if(formatterSpec == null || formatterSpec.equals(\"\")) {\n      highlighter = getDefaultHighlighter(query);\n    } else {\n      highlighter = new Highlighter(\n        (Formatter)Config.newInstance(formatterSpec),\n        new QueryScorer(query));\n      highlighter.setTextFragmenter(new GapFragmenter());\n    }\n    \n    int numFragments = getNumberParam(req, SolrParams.MAX_SNIPPETS,\n                                      params.maxSnippets).intValue();\n\n    return getHighlights(\n      docs, \n      fields, \n      req.getSearcher(),\n      highlighter,\n      numFragments);\n  }\n\n","sourceOld":"  /**\n   * Perform highlighting of selected fields.\n   *\n   * @param docs query results\n   * @param query the (possibly re-written query)\n   * @param req associated SolrQueryRequest\n   * @param defaultFields default search field list\n   *\n   * @return NamedList containing summary data, or null if highlighting is \n   * disabled.\n   *\n   */\n  public static NamedList doStandardHighlighting(DocList docs,\n                                                 Query query,\n                                                 SolrQueryRequest req,\n                                                 CommonParams params,\n                                                 String[] defaultFields\n                                                 ) throws IOException {\n    if(!getBooleanParam(req, params.HIGHLIGHT, params.highlight)) \n      return null;\n    String fieldParam = getParam(req, params.HIGHLIGHT_FIELDS, \n                                 params.highlightFields);\n    String fields[];\n    if(fieldParam == null || fieldParam.trim().equals(\"\")) {\n      // use default search field if highlight fieldlist not specified.\n      if (defaultFields == null || defaultFields.length == 0 ||\n          defaultFields[0] == null) {\n        fields = new String[]{req.getSchema().getDefaultSearchFieldName()};\n      } else\n        fields = defaultFields;\n    } else \n      fields = splitList.split(fieldParam.trim());\n\n    Highlighter highlighter;\n    String formatterSpec = getParam(req, params.HIGHLIGHT_FORMATTER_CLASS,\n                                    params.highlightFormatterClass);\n    if(formatterSpec == null || formatterSpec.equals(\"\")) {\n      highlighter = getDefaultHighlighter(query);\n    } else {\n      highlighter = new Highlighter(\n        (Formatter)Config.newInstance(formatterSpec),\n        new QueryScorer(query));\n      highlighter.setTextFragmenter(new GapFragmenter());\n    }\n    \n    int numFragments = getNumberParam(req, params.MAX_SNIPPETS,\n                                      params.maxSnippets).intValue();\n\n    return getHighlights(\n      docs, \n      fields, \n      req.getSearcher(),\n      highlighter,\n      numFragments);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af09a11446184597ca824554260a98704507f8a7","date":1157138567,"type":4,"author":"Mike Klaas","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardHighlighting(DocList,Query,SolrQueryRequest,CommonParams,String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Perform highlighting of selected fields.\n   *\n   * @param docs query results\n   * @param query the (possibly re-written query)\n   * @param req associated SolrQueryRequest\n   * @param defaultFields default search field list\n   *\n   * @return NamedList containing summary data, or null if highlighting is \n   * disabled.\n   *\n   */\n  public static NamedList doStandardHighlighting(DocList docs,\n                                                 Query query,\n                                                 SolrQueryRequest req,\n                                                 CommonParams params,\n                                                 String[] defaultFields\n                                                 ) throws IOException {\n    if(!getBooleanParam(req, SolrParams.HIGHLIGHT, params.highlight))\n      return null;\n    String fieldParam = getParam(req, SolrParams.HIGHLIGHT_FIELDS,\n                                 params.highlightFields);\n    String fields[];\n    if(fieldParam == null || fieldParam.trim().equals(\"\")) {\n      // use default search field if highlight fieldlist not specified.\n      if (defaultFields == null || defaultFields.length == 0 ||\n          defaultFields[0] == null) {\n        fields = new String[]{req.getSchema().getDefaultSearchFieldName()};\n      } else\n        fields = defaultFields;\n    } else \n      fields = splitList.split(fieldParam.trim());\n\n    Highlighter highlighter;\n    String formatterSpec = getParam(req, SolrParams.HIGHLIGHT_FORMATTER_CLASS,\n                                    params.highlightFormatterClass);\n    if(formatterSpec == null || formatterSpec.equals(\"\")) {\n      highlighter = getDefaultHighlighter(query);\n    } else {\n      highlighter = new Highlighter(\n        (Formatter)Config.newInstance(formatterSpec),\n        new QueryScorer(query));\n      highlighter.setTextFragmenter(new GapFragmenter());\n    }\n    \n    int numFragments = getNumberParam(req, SolrParams.MAX_SNIPPETS,\n                                      params.maxSnippets).intValue();\n\n    return getHighlights(\n      docs, \n      fields, \n      req.getSearcher(),\n      highlighter,\n      numFragments);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44f497c313977be641ddf24aab74b30e6de834d8":["0452863ee588101738d341e6e97eb87eb010052a"],"0452863ee588101738d341e6e97eb87eb010052a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"af09a11446184597ca824554260a98704507f8a7":["44f497c313977be641ddf24aab74b30e6de834d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44f497c313977be641ddf24aab74b30e6de834d8":["af09a11446184597ca824554260a98704507f8a7"],"0452863ee588101738d341e6e97eb87eb010052a":["44f497c313977be641ddf24aab74b30e6de834d8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0452863ee588101738d341e6e97eb87eb010052a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af09a11446184597ca824554260a98704507f8a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["af09a11446184597ca824554260a98704507f8a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}