{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","commits":[{"id":"0a20a867de92263c94258f9778db64a5efc7956d","date":1424955868,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) {\n      if(expectedVersion == null) return col;\n      if(expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) {\n        if(expectedVersion == null) return col;\n        if(expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe033038120074eaea585e7f85a5c9220d5f24","date":1424979733,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if (collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if (col != null) {\n      if (expectedVersion == null) return col;\n      if (expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if (ref == null) {\n      //no such collection exists\n      return null;\n    }\n    if (!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock) {\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if (col != null) {\n        if (expectedVersion == null) return col;\n        if (expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if (col == null) return null;\n    if (col.getStateFormat() > 1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) {\n      if(expectedVersion == null) return col;\n      if(expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) {\n        if(expectedVersion == null) return col;\n        if(expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if (collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if (col != null) {\n      if (expectedVersion == null) return col;\n      if (expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if (ref == null) {\n      //no such collection exists\n      return null;\n    }\n    if (!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock) {\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if (col != null) {\n        if (expectedVersion == null) return col;\n        if (expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if (col == null) return null;\n    if (col.getStateFormat() > 1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","sourceNew":null,"sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if (collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if (col != null) {\n      if (expectedVersion == null) return col;\n      if (expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if (ref == null) {\n      //no such collection exists\n      return null;\n    }\n    if (!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock) {\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if (col != null) {\n        if (expectedVersion == null) return col;\n        if (expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if (col == null) return null;\n    if (col.getStateFormat() > 1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","sourceNew":null,"sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if (collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if (col != null) {\n      if (expectedVersion == null) return col;\n      if (expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if (ref == null) {\n      //no such collection exists\n      return null;\n    }\n    if (!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock) {\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if (col != null) {\n        if (expectedVersion == null) return col;\n        if (expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if (col == null) return null;\n    if (col.getStateFormat() > 1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe033038120074eaea585e7f85a5c9220d5f24"],"0a20a867de92263c94258f9778db64a5efc7956d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["d3fe033038120074eaea585e7f85a5c9220d5f24","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3fe033038120074eaea585e7f85a5c9220d5f24":["0a20a867de92263c94258f9778db64a5efc7956d"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["d3fe033038120074eaea585e7f85a5c9220d5f24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3eaeb36333664e8cb92108ef03f68a7b90beb759"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a20a867de92263c94258f9778db64a5efc7956d":["d3fe033038120074eaea585e7f85a5c9220d5f24"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a20a867de92263c94258f9778db64a5efc7956d"],"d3fe033038120074eaea585e7f85a5c9220d5f24":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}