{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","date":1444778526,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createData(\n          dir + \"/\" + response_prefix,\n          null, CreateMode.EPHEMERAL_SEQUENTIAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createData(dir + \"/\" + PREFIX + watchID.substring(watchID.lastIndexOf(\"-\") + 1),\n          data, CreateMode.PERSISTENT);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8","9f45f67a018421da088ea39274f23ad5d339b97d"],"bugIntro":["1275856c84e2d39350c6d0f98681e2c6ba1e18aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1275856c84e2d39350c6d0f98681e2c6ba1e18aa","date":1459923987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createData(\n          dir + \"/\" + response_prefix,\n          null, CreateMode.EPHEMERAL_SEQUENTIAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createData(dir + \"/\" + PREFIX + watchID.substring(watchID.lastIndexOf(\"-\") + 1),\n          data, CreateMode.PERSISTENT);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","9f45f67a018421da088ea39274f23ad5d339b97d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createData(\n          dir + \"/\" + response_prefix,\n          null, CreateMode.EPHEMERAL_SEQUENTIAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createData(dir + \"/\" + PREFIX + watchID.substring(watchID.lastIndexOf(\"-\") + 1),\n          data, CreateMode.PERSISTENT);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ec82ee811ca4bf233f8445e727133af762a7bf0","date":1516991772,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      LatchWatcher watcher = new LatchWatcher();\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      if (stat != null) {\n        watcher.await(timeout);\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      synchronized (lock) {\n        if (stat != null && watcher.getWatchedEvent() == null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   *\n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    if (shuttingDown.get()) {\n      throw new SolrException(SolrException.ErrorCode.CONFLICT,\"Solr is shutting down, no more overseer tasks may be offered\");\n    }\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      LatchWatcher watcher = new LatchWatcher();\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      if (stat != null) {\n        pendingResponses.incrementAndGet();\n        watcher.await(timeout);\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n      pendingResponses.decrementAndGet();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      // Create and watch the response node before creating the request node;\n      // otherwise we may miss the response.\n      String watchID = createResponseNode();\n\n      LatchWatcher watcher = new LatchWatcher();\n      Stat stat = zookeeper.exists(watchID, watcher, true);\n\n      // create the request node\n      createRequestNode(data, watchID);\n\n      if (stat != null) {\n        watcher.await(timeout);\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      // create the event before deleting the node, otherwise we can get the deleted\n      // event from the watcher.\n      QueueEvent event =  new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n      zookeeper.delete(watchID, -1, true);\n      return event;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["b6284684320a9808c41a5e43de958b2da22f89bd"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1275856c84e2d39350c6d0f98681e2c6ba1e18aa":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"727bb765ff2542275f6d31f67be18d7104bae148":["b6284684320a9808c41a5e43de958b2da22f89bd","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"b6284684320a9808c41a5e43de958b2da22f89bd":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","1275856c84e2d39350c6d0f98681e2c6ba1e18aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["6ec82ee811ca4bf233f8445e727133af762a7bf0"],"6ec82ee811ca4bf233f8445e727133af762a7bf0":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["727bb765ff2542275f6d31f67be18d7104bae148","6ec82ee811ca4bf233f8445e727133af762a7bf0"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"1275856c84e2d39350c6d0f98681e2c6ba1e18aa":["b6284684320a9808c41a5e43de958b2da22f89bd"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"b6284684320a9808c41a5e43de958b2da22f89bd":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","727bb765ff2542275f6d31f67be18d7104bae148"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ec82ee811ca4bf233f8445e727133af762a7bf0":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef":["1275856c84e2d39350c6d0f98681e2c6ba1e18aa","b6284684320a9808c41a5e43de958b2da22f89bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}