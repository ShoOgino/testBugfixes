{"path":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","commits":[{"id":"69d8f9cca4a5fc4049a99ea24253b41a88b0d234","date":1277138158,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          \n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          \n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          \n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          \n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f825da350bbcd34d73cc0b5652530554f35ea01f","date":1280228164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          \n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          \n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<Integer>();\n      if (a.isSingleton()) {\n        // accepts only one\n        final String s = a.singleton;\n      \n        int charUpto = 0;\n        while(charUpto < s.length()) {\n          final int cp = s.codePointAt(charUpto);\n          charUpto += Character.charCount(cp);\n          soFar.add(cp);\n        }\n      } else {\n\n        State s = a.initial;\n\n        while(true) {\n      \n          if (s.accept) {\n            if (s.numTransitions == 0) {\n              // stop now\n              break;\n            } else {\n              if (r.nextBoolean()) {\n                break;\n              }\n            }\n          }\n\n          if (s.numTransitions == 0) {\n            throw new RuntimeException(\"this automaton has dead states\");\n          }\n\n          boolean cheat = r.nextBoolean();\n\n          final Transition t;\n          if (cheat) {\n            // pick a transition that we know is the fastest\n            // path to an accept state\n            List<Transition> toAccept = new ArrayList<Transition>();\n            for(int i=0;i<s.numTransitions;i++) {\n              final Transition t0 = s.transitionsArray[i];\n              if (leadsToAccept.containsKey(t0)) {\n                toAccept.add(t0);\n              }\n            }\n            if (toAccept.size() == 0) {\n              // this is OK -- it means we jumped into a cycle\n              t = s.transitionsArray[r.nextInt(s.numTransitions)];\n            } else {\n              t = toAccept.get(r.nextInt(toAccept.size()));\n            }\n          } else {\n            t = s.transitionsArray[r.nextInt(s.numTransitions)];\n          }\n          soFar.add(getRandomCodePoint(r, t));\n          s = t.to;\n        }\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f825da350bbcd34d73cc0b5652530554f35ea01f":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","f825da350bbcd34d73cc0b5652530554f35ea01f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f825da350bbcd34d73cc0b5652530554f35ea01f","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["3242a09f703274d3b9283f2064a1a33064b53a1b","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["f825da350bbcd34d73cc0b5652530554f35ea01f"]},"commit2Childs":{"f825da350bbcd34d73cc0b5652530554f35ea01f":["3242a09f703274d3b9283f2064a1a33064b53a1b","29ef99d61cda9641b6250bf9567329a6e65f901d","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234","5f4e87790277826a2aea119328600dfb07761f32"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["f825da350bbcd34d73cc0b5652530554f35ea01f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}