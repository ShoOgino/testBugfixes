{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet (AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":["6620df8541b174097b1133a4fc370adb2e570524"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":null,"sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":null,"sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort,true,true);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        assertNull(\"acceptDocs should be null, as we have no deletions\", acceptDocs);\n        BitSet bs = new BitSet(context.reader().maxDoc());\n        bs.set(0, context.reader().maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort,true,true);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f183729ece15402db94402d482f29ebac4f7f54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","5f183729ece15402db94402d482f29ebac4f7f54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358","ef0d8a69209261514c5739c770bba706c2308450"],"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}