{"path":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"/dev/null","sourceNew":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.put(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\tdo {\n\t  if (!first.nextPosition())\n\t    return (float)freq;\n\t} while (first.position < last.position);\n\tfirstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return (float)freq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e493496c35fb4f17315b8827d1ba1ae1585554","date":1177392767,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","sourceNew":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.put(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return (float)freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return (float)freq;\n  }\n\n","sourceOld":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.put(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\tdo {\n\t  if (!first.nextPosition())\n\t    return (float)freq;\n\t} while (first.position < last.position);\n\tfirstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return (float)freq;\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","sourceNew":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.put(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","sourceOld":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.put(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return (float)freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return (float)freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","sourceNew":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","sourceOld":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.put(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","sourceNew":"  @Override\n  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","sourceOld":"  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","sourceNew":"  @Override\n  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","sourceOld":"  @Override\n  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3e493496c35fb4f17315b8827d1ba1ae1585554":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"b3e493496c35fb4f17315b8827d1ba1ae1585554":["052fac7830290bd38a04cddee1a121ee07656b56"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"052fac7830290bd38a04cddee1a121ee07656b56":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}