{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e339aeeefbb0f94800c9777e747a22e43c64cc","date":1323800559,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File( h.getCore().getDataDir(), testfile );\n      writeFile( f, \"aaa\", \"A\" );\n\n      QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<String>();\n      args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n      comp.init( args );\n      comp.inform( h.getCore() );\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n      assertNull( map.get( \"bbb\" ) );\n      req.close();\n\n      // now change the file\n      writeFile( f, \"bbb\", \"B\" );\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull( map.get( \"aaa\" ) );\n      assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    String testfile = \"data-elevation.xml\";\n    File f = new File( h.getCore().getDataDir(), testfile );\n    writeFile( f, \"aaa\", \"A\" );\n    \n    QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n    comp.init( args );\n    comp.inform( h.getCore() );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n    assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n    assertNull( map.get( \"bbb\" ) );\n    req.close();\n    \n    // now change the file\n    writeFile( f, \"bbb\", \"B\" );\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n\n    req = req();\n    reader = req.getSearcher().getIndexReader();\n    map = comp.getElevationMap(reader, h.getCore());\n    assertNull( map.get( \"aaa\" ) );\n    assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File(h.getCore().getDataDir(), testfile);\n      writeFile(f, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue(map.get(\"aaa\").priority.containsKey(new BytesRef(\"A\")));\n      assertNull(map.get(\"bbb\"));\n      req.close();\n\n      // now change the file\n      writeFile(f, \"bbb\", \"B\");\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull(map.get(\"aaa\"));\n      assertTrue(map.get(\"bbb\").priority.containsKey(new BytesRef(\"B\")));\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception\n  {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File( h.getCore().getDataDir(), testfile );\n      writeFile( f, \"aaa\", \"A\" );\n\n      QueryElevationComponent comp = (QueryElevationComponent)h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<String>();\n      args.add( QueryElevationComponent.CONFIG_FILE, testfile );\n      comp.init( args );\n      comp.inform( h.getCore() );\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue( map.get( \"aaa\" ).priority.containsKey( new BytesRef(\"A\") ) );\n      assertNull( map.get( \"bbb\" ) );\n      req.close();\n\n      // now change the file\n      writeFile( f, \"bbb\", \"B\" );\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull( map.get( \"aaa\" ) );\n      assertTrue( map.get( \"bbb\" ).priority.containsKey( new BytesRef(\"B\") ) );\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File(h.getCore().getDataDir(), testfile);\n      writeFile(f, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue(map.get(\"aaa\").priority.containsKey(new BytesRef(\"A\")));\n      assertNull(map.get(\"bbb\"));\n      req.close();\n\n      // now change the file\n      writeFile(f, \"bbb\", \"B\");\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull(map.get(\"aaa\"));\n      assertTrue(map.get(\"bbb\").priority.containsKey(new BytesRef(\"B\")));\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File(h.getCore().getDataDir(), testfile);\n      writeFile(f, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue(map.get(\"aaa\").priority.containsKey(new BytesRef(\"A\")));\n      assertNull(map.get(\"bbb\"));\n      req.close();\n\n      // now change the file\n      writeFile(f, \"bbb\", \"B\");\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull(map.get(\"aaa\"));\n      assertTrue(map.get(\"bbb\").priority.containsKey(new BytesRef(\"B\")));\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":3,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider = null;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File(h.getCore().getDataDir(), testfile);\n      writeFile(f, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue(map.get(\"aaa\").priority.containsKey(new BytesRef(\"A\")));\n      assertNull(map.get(\"bbb\"));\n      req.close();\n\n      // now change the file\n      writeFile(f, \"bbb\", \"B\");\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull(map.get(\"aaa\"));\n      assertTrue(map.get(\"bbb\").priority.containsKey(new BytesRef(\"B\")));\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider = null;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File(h.getCore().getDataDir(), testfile);\n      writeFile(f, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue(map.get(\"aaa\").priority.containsKey(new BytesRef(\"A\")));\n      assertNull(map.get(\"bbb\"));\n      req.close();\n\n      // now change the file\n      writeFile(f, \"bbb\", \"B\");\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull(map.get(\"aaa\"));\n      assertTrue(map.get(\"bbb\").priority.containsKey(new BytesRef(\"B\")));\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider = null;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File f = new File(h.getCore().getDataDir(), testfile);\n      writeFile(f, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());\n      assertTrue(map.get(\"aaa\").priority.containsKey(new BytesRef(\"A\")));\n      assertNull(map.get(\"bbb\"));\n      req.close();\n\n      // now change the file\n      writeFile(f, \"bbb\", \"B\");\n      assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n      assertU(commit());\n\n      req = req();\n      reader = req.getSearcher().getIndexReader();\n      map = comp.getElevationMap(reader, h.getCore());\n      assertNull(map.get(\"aaa\"));\n      assertTrue(map.get(\"bbb\").priority.containsKey(new BytesRef(\"B\")));\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeElevationConfigFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeElevationConfigFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeElevationConfigFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider = null;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevationReloading().mjava","sourceNew":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeElevationConfigFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeElevationConfigFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeElevationConfigFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevationReloading() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      String testfile = \"data-elevation.xml\";\n      File configFile = new File(h.getCore().getDataDir(), testfile);\n      writeFile(configFile, \"aaa\", \"A\");\n\n      QueryElevationComponent comp = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.CONFIG_FILE, testfile);\n      comp.init(args);\n      comp.inform(h.getCore());\n\n      QueryElevationComponent.ElevationProvider elevationProvider = null;\n\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // now change the file\n      writeFile(configFile, \"bbb\", \"B\");\n\n      // With no index change, we get the same index reader, so the elevationProviderCache returns the previous ElevationProvider without the change.\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertTrue(elevationProvider.getElevationForQuery(\"aaa\").elevatedIds.contains(new BytesRef(\"A\")));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n      }\n\n      // Index a new doc to get a new index reader.\n      assertU(adoc(\"id\", \"10000\"));\n      assertU(commit());\n\n      // Check that we effectively reload a new ElevationProvider for a different index reader (so two entries in elevationProviderCache).\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"bbb\").elevatedIds.contains(new BytesRef(\"B\")));\n      }\n\n      // Now change the config file again.\n      writeFile(configFile, \"ccc\", \"C\");\n\n      // Without index change, but calling a different method that clears the elevationProviderCache, so we should load a new ElevationProvider.\n      int elevationRuleNumber = comp.loadElevationConfiguration(h.getCore());\n      assertEquals(1, elevationRuleNumber);\n      try (SolrQueryRequest req = req()) {\n        elevationProvider = comp.getElevationProvider(req.getSearcher().getIndexReader(), req.getCore());\n        assertNull(elevationProvider.getElevationForQuery(\"aaa\"));\n        assertNull(elevationProvider.getElevationForQuery(\"bbb\"));\n        assertTrue(elevationProvider.getElevationForQuery(\"ccc\").elevatedIds.contains(new BytesRef(\"C\")));\n      }\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d0561cea94adff1867218e77bb763c7583be279"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["c26f00b574427b55127e869b935845554afde1fa"],"1d0561cea94adff1867218e77bb763c7583be279":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["2ad458affd82a1d762eb506003907d9363a333cb"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2ad458affd82a1d762eb506003907d9363a333cb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["2ad458affd82a1d762eb506003907d9363a333cb","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c26f00b574427b55127e869b935845554afde1fa":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["1d0561cea94adff1867218e77bb763c7583be279"],"1d0561cea94adff1867218e77bb763c7583be279":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2ad458affd82a1d762eb506003907d9363a333cb":["e6046c615b67e878b7c0ab9257d01dd759493f06","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}