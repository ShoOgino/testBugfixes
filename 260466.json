{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getSortedSetDocValues(String).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getSortedSetDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    SortedSetDocValues dv = super.getSortedSetDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET;\n      return new AssertingSortedSetDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.SORTED_SET;\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getSortedSetDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    SortedSetDocValues dv = super.getSortedSetDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET;\n      return new AssertingSortedSetDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.SORTED_SET;\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f682f39e729d9d5379e1f49bbc0e3519cda940e0","date":1411403931,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getSortedSetDocValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    SortedSetDocValues dv = super.getSortedSetDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET;\n      if (dv instanceof RandomAccessOrds) {\n        return new AssertingRandomAccessOrds((RandomAccessOrds) dv, maxDoc());\n      } else {\n        return new AssertingSortedSetDocValues(dv, maxDoc());\n      }\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.SORTED_SET;\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    SortedSetDocValues dv = super.getSortedSetDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET;\n      return new AssertingSortedSetDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.SORTED_SET;\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader#getSortedSetDocValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    SortedSetDocValues dv = super.getSortedSetDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET;\n      if (dv instanceof RandomAccessOrds) {\n        return new AssertingRandomAccessOrds((RandomAccessOrds) dv, maxDoc());\n      } else {\n        return new AssertingSortedSetDocValues(dv, maxDoc());\n      }\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.SORTED_SET;\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    SortedSetDocValues dv = super.getSortedSetDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET;\n      if (dv instanceof RandomAccessOrds) {\n        return new AssertingRandomAccessOrds((RandomAccessOrds) dv, maxDoc());\n      } else {\n        return new AssertingSortedSetDocValues(dv, maxDoc());\n      }\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.SORTED_SET;\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f682f39e729d9d5379e1f49bbc0e3519cda940e0":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f366ce28775e2b8ea4e06355009471328711666d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f682f39e729d9d5379e1f49bbc0e3519cda940e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"f682f39e729d9d5379e1f49bbc0e3519cda940e0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["f682f39e729d9d5379e1f49bbc0e3519cda940e0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}