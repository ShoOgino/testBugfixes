{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverWriter#writeEntry(StorageEntryWrapper,Writer).mjava","commits":[{"id":"89f8b19763ea545f1e428dfa5efb8235beaaa05e","date":1151436680,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverWriter#writeEntry(StorageEntryWrapper,Writer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param wrapper \n     * @throws IOException \n     * \n     * \n     * \n     */\n    public void writeEntry(StorageEntryWrapper wrapper,Writer writer)throws IOException{\n        \n        writeOperation(wrapper.getOperation(),writer);\n        writeFeedID(wrapper.getFeedId(),writer);\n        writeEntryID(wrapper.getEntryId(),writer);\n        writeTimeStamp(wrapper.getTimestamp().toString(),writer);\n        if(!wrapper.getOperation().equals(StorageOperation.DELETE)){\n        writeService(wrapper,writer);\n            writer.write(META_DATA_ENTRY_SEPARATOR);\n            BaseEntry entry = wrapper.getEntry();\n            XmlWriter xmlWriter = new XmlWriter(writer);\n            entry.generateAtom(xmlWriter,wrapper.getConfigurator().getExtensionProfile());\n        }\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.write(STORAGE_OPERATION_SEPARATOR);\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverWriter#writeEntry(StorageEntryWrapper,Writer).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverWriter#writeEntry(StorageEntryWrapper,Writer).mjava","sourceNew":"    /**\n     * @param wrapper \n     * @throws IOException \n     * \n     * \n     * \n     */\n    public void writeEntry(StorageEntryWrapper wrapper,Writer writer)throws IOException{\n        \n        writeOperation(wrapper.getOperation(),writer);\n        writeFeedID(wrapper.getFeedId(),writer);\n        writeEntryID(wrapper.getEntryId(),writer);\n        writeTimeStamp(wrapper.getTimestamp().toString(),writer);\n        if(!wrapper.getOperation().equals(StorageOperation.DELETE)){\n        writeService(wrapper,writer);\n            writer.write(META_DATA_ENTRY_SEPARATOR);\n            BaseEntry entry = wrapper.getEntry();\n            XmlWriter xmlWriter = new XmlWriter(writer);\n            entry.generateAtom(xmlWriter,wrapper.getConfigurator().getExtensionProfile());\n        }\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.write(STORAGE_OPERATION_SEPARATOR);\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.flush();\n    }\n\n","sourceOld":"    /**\n     * @param wrapper \n     * @throws IOException \n     * \n     * \n     * \n     */\n    public void writeEntry(StorageEntryWrapper wrapper,Writer writer)throws IOException{\n        \n        writeOperation(wrapper.getOperation(),writer);\n        writeFeedID(wrapper.getFeedId(),writer);\n        writeEntryID(wrapper.getEntryId(),writer);\n        writeTimeStamp(wrapper.getTimestamp().toString(),writer);\n        if(!wrapper.getOperation().equals(StorageOperation.DELETE)){\n        writeService(wrapper,writer);\n            writer.write(META_DATA_ENTRY_SEPARATOR);\n            BaseEntry entry = wrapper.getEntry();\n            XmlWriter xmlWriter = new XmlWriter(writer);\n            entry.generateAtom(xmlWriter,wrapper.getConfigurator().getExtensionProfile());\n        }\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.write(STORAGE_OPERATION_SEPARATOR);\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverWriter#writeEntry(StorageEntryWrapper,Writer).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverWriter#writeEntry(StorageEntryWrapper,Writer).mjava","sourceNew":"    /**\n     * @param wrapper \n     * @throws IOException \n     * \n     * \n     * \n     */\n    public void writeEntry(StorageEntryWrapper wrapper,Writer writer)throws IOException{\n        \n        writeOperation(wrapper.getOperation(),writer);\n        writeFeedID(wrapper.getFeedId(),writer);\n        writeEntryID(wrapper.getEntryId(),writer);\n        writeTimeStamp(wrapper.getTimestamp().toString(),writer);\n        if(!wrapper.getOperation().equals(StorageOperation.DELETE)){\n        writeService(wrapper,writer);\n            writer.write(META_DATA_ENTRY_SEPARATOR);\n            BaseEntry entry = wrapper.getEntry();\n            XmlWriter xmlWriter = new XmlWriter(writer);\n            entry.generateAtom(xmlWriter,wrapper.getConfigurator().getExtensionProfile());\n        }\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.write(STORAGE_OPERATION_SEPARATOR);\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.flush();\n    }\n\n","sourceOld":"    /**\n     * @param wrapper \n     * @throws IOException \n     * \n     * \n     * \n     */\n    public void writeEntry(StorageEntryWrapper wrapper,Writer writer)throws IOException{\n        \n        writeOperation(wrapper.getOperation(),writer);\n        writeFeedID(wrapper.getFeedId(),writer);\n        writeEntryID(wrapper.getEntryId(),writer);\n        writeTimeStamp(wrapper.getTimestamp().toString(),writer);\n        if(!wrapper.getOperation().equals(StorageOperation.DELETE)){\n        writeService(wrapper,writer);\n            writer.write(META_DATA_ENTRY_SEPARATOR);\n            BaseEntry entry = wrapper.getEntry();\n            XmlWriter xmlWriter = new XmlWriter(writer);\n            entry.generateAtom(xmlWriter,wrapper.getConfigurator().getExtensionProfile());\n        }\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.write(STORAGE_OPERATION_SEPARATOR);\n        writer.write(META_DATA_ENTRY_SEPARATOR);\n        writer.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}