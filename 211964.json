{"path":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","commits":[{"id":"103e2ec175f1aa5629df5bcd34eb1c53055caeb1","date":1268243753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf","date":1268662366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e52fea2c4081a1e552b98506691990be59503168":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}