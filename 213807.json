{"path":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: debateably, the caller should never pass in a\n      // multi reader...\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: debateably, the caller should never pass in a\n      // multi reader...\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: debateably, the caller should never pass in a\n      // multi reader...\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","33a8b1f99104f4144f210f5d068411c297cd7163"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33a8b1f99104f4144f210f5d068411c297cd7163"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}