{"path":"lucene/monitor/src/test/org/apache/lucene/monitor/TestTermPresearcher#testQueryBuilder().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestTermPresearcher#testQueryBuilder().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryBuilder() throws IOException {\n\n    Presearcher presearcher = createPresearcher();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new KeywordAnalyzer());\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    MonitorConfiguration config = new MonitorConfiguration(){\n      @Override\n      public IndexWriter buildIndexWriter() {\n        return writer;\n      }\n    };\n\n    try (Monitor monitor = new Monitor(ANALYZER, presearcher, config)) {\n\n      monitor.register(new MonitorQuery(\"1\", parse(\"f:test\")));\n\n      try (IndexReader reader = DirectoryReader.open(writer, false, false)) {\n\n        MemoryIndex mindex = new MemoryIndex();\n        mindex.addField(\"f\", \"this is a test document\", WHITESPACE);\n        LeafReader docsReader = (LeafReader) mindex.createSearcher().getIndexReader();\n\n        QueryIndex.QueryTermFilter termFilter = new QueryIndex.QueryTermFilter(reader);\n\n        BooleanQuery q = (BooleanQuery) presearcher.buildQuery(docsReader, termFilter);\n        BooleanQuery expected = new BooleanQuery.Builder()\n            .add(should(new BooleanQuery.Builder()\n                .add(should(new TermInSetQuery(\"f\", new BytesRef(\"test\")))).build()))\n            .add(should(new TermQuery(new Term(\"__anytokenfield\", \"__ANYTOKEN__\"))))\n            .build();\n\n        assertEquals(expected, q);\n\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be7d4224f6806f83f7ff05240ba956ff5eba1bcc","date":1585345261,"type":3,"author":"Marvin Justice","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestTermPresearcher#testQueryBuilder().mjava","pathOld":"lucene/monitor/src/test/org/apache/lucene/monitor/TestTermPresearcher#testQueryBuilder().mjava","sourceNew":"  public void testQueryBuilder() throws IOException {\n\n    Presearcher presearcher = createPresearcher();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new KeywordAnalyzer());\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    MonitorConfiguration config = new MonitorConfiguration(){\n      @Override\n      public IndexWriter buildIndexWriter() {\n        return writer;\n      }\n    };\n\n    try (Monitor monitor = new Monitor(ANALYZER, presearcher, config)) {\n\n      monitor.register(new MonitorQuery(\"1\", parse(\"f:test\")));\n\n      try (IndexReader reader = DirectoryReader.open(writer, false, false)) {\n\n        MemoryIndex mindex = new MemoryIndex();\n        mindex.addField(\"f\", \"this is a test document\", WHITESPACE);\n        mindex.addField(\"g\", \"#######\", ANALYZER); // analyzes away to empty field\n        LeafReader docsReader = (LeafReader) mindex.createSearcher().getIndexReader();\n\n        QueryIndex.QueryTermFilter termFilter = new QueryIndex.QueryTermFilter(reader);\n\n        BooleanQuery q = (BooleanQuery) presearcher.buildQuery(docsReader, termFilter);\n        BooleanQuery expected = new BooleanQuery.Builder()\n            .add(should(new BooleanQuery.Builder()\n                .add(should(new TermInSetQuery(\"f\", new BytesRef(\"test\")))).build()))\n            .add(should(new TermQuery(new Term(\"__anytokenfield\", \"__ANYTOKEN__\"))))\n            .build();\n\n        assertEquals(expected, q);\n\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testQueryBuilder() throws IOException {\n\n    Presearcher presearcher = createPresearcher();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new KeywordAnalyzer());\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    MonitorConfiguration config = new MonitorConfiguration(){\n      @Override\n      public IndexWriter buildIndexWriter() {\n        return writer;\n      }\n    };\n\n    try (Monitor monitor = new Monitor(ANALYZER, presearcher, config)) {\n\n      monitor.register(new MonitorQuery(\"1\", parse(\"f:test\")));\n\n      try (IndexReader reader = DirectoryReader.open(writer, false, false)) {\n\n        MemoryIndex mindex = new MemoryIndex();\n        mindex.addField(\"f\", \"this is a test document\", WHITESPACE);\n        LeafReader docsReader = (LeafReader) mindex.createSearcher().getIndexReader();\n\n        QueryIndex.QueryTermFilter termFilter = new QueryIndex.QueryTermFilter(reader);\n\n        BooleanQuery q = (BooleanQuery) presearcher.buildQuery(docsReader, termFilter);\n        BooleanQuery expected = new BooleanQuery.Builder()\n            .add(should(new BooleanQuery.Builder()\n                .add(should(new TermInSetQuery(\"f\", new BytesRef(\"test\")))).build()))\n            .add(should(new TermQuery(new Term(\"__anytokenfield\", \"__ANYTOKEN__\"))))\n            .build();\n\n        assertEquals(expected, q);\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be7d4224f6806f83f7ff05240ba956ff5eba1bcc":["7c529b189e09de25455d82ebd7260748cf11ee14"],"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be7d4224f6806f83f7ff05240ba956ff5eba1bcc"]},"commit2Childs":{"be7d4224f6806f83f7ff05240ba956ff5eba1bcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c529b189e09de25455d82ebd7260748cf11ee14":["be7d4224f6806f83f7ff05240ba956ff5eba1bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}