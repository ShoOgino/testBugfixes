{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","commits":[{"id":"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","date":1423258737,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","pathOld":"/dev/null","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        try {\n          indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n          compareResult.checkSummed = true;\n        } catch (Exception e) {\n          LOG.warn(\"Could not retrieve checksum from file.\", e);\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n                \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n                backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["512001e33b52ae6ab9dca7f7830da0a3ab7662dd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cef15a56c64f46175c1d6df43f47d4b09f44d57b","date":1423328408,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. \"  + \"expected length is {} and actual length is {}\",\n                filename, backupIndexFileChecksum, indexFileChecksum,\n                backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        try {\n          indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n          compareResult.checkSummed = true;\n        } catch (Exception e) {\n          LOG.warn(\"Could not retrieve checksum from file.\", e);\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n                \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n                backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":["512001e33b52ae6ab9dca7f7830da0a3ab7662dd","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9646176d31f1defc2d1ea24dd93d064a05306d72","date":1423332733,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. \"  + \"expected length is {} and actual length is {}\",\n                filename, backupIndexFileChecksum, indexFileChecksum,\n                backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. \"  + \"expected length is {} and actual length is {}\",\n                filename, backupIndexFileChecksum, indexFileChecksum,\n                backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512001e33b52ae6ab9dca7f7830da0a3ab7662dd","date":1423507176,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. \"  + \"expected length is {} and actual length is {}\",\n                filename, backupIndexFileChecksum, indexFileChecksum,\n                backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"512001e33b52ae6ab9dca7f7830da0a3ab7662dd":["9646176d31f1defc2d1ea24dd93d064a05306d72"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["512001e33b52ae6ab9dca7f7830da0a3ab7662dd","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["512001e33b52ae6ab9dca7f7830da0a3ab7662dd"],"9646176d31f1defc2d1ea24dd93d064a05306d72":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cef15a56c64f46175c1d6df43f47d4b09f44d57b":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"512001e33b52ae6ab9dca7f7830da0a3ab7662dd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9646176d31f1defc2d1ea24dd93d064a05306d72":["512001e33b52ae6ab9dca7f7830da0a3ab7662dd"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"cef15a56c64f46175c1d6df43f47d4b09f44d57b":["9646176d31f1defc2d1ea24dd93d064a05306d72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}