{"path":"modules/analysis/stempel/src/java/org/egothor/stemmer/Reduce#removeGaps(int,List[Row],List[Row],int[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Reduce#removeGaps(int,List[Row],List[Row],int[]).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Reduce#removeGaps(int,List[Row],List[Row],int[]).mjava","sourceNew":"  List<Row> removeGaps(int ind, List<Row> old, List<Row> to, int remap[]) {\n    remap[ind] = to.size();\n    \n    Row now = old.get(ind);\n    to.add(now);\n    Iterator<Cell> i = now.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0 && remap[c.ref] < 0) {\n        removeGaps(c.ref, old, to, remap);\n      }\n    }\n    to.set(remap[ind], new Remap(now, remap));\n    return to;\n  }\n\n","sourceOld":"  List<Row> removeGaps(int ind, List<Row> old, List<Row> to, int remap[]) {\n    remap[ind] = to.size();\n    \n    Row now = old.get(ind);\n    to.add(now);\n    Iterator<Cell> i = now.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0 && remap[c.ref] < 0) {\n        removeGaps(c.ref, old, to, remap);\n      }\n    }\n    to.set(remap[ind], new Remap(now, remap));\n    return to;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Reduce#removeGaps(int,List[Row],List[Row],int[]).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Reduce#removeGaps(int,List[Row],List[Row],int[]).mjava","sourceNew":"  List<Row> removeGaps(int ind, List<Row> old, List<Row> to, int remap[]) {\n    remap[ind] = to.size();\n    \n    Row now = old.get(ind);\n    to.add(now);\n    Iterator<Cell> i = now.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0 && remap[c.ref] < 0) {\n        removeGaps(c.ref, old, to, remap);\n      }\n    }\n    to.set(remap[ind], new Remap(now, remap));\n    return to;\n  }\n\n","sourceOld":"  List<Row> removeGaps(int ind, List<Row> old, List<Row> to, int remap[]) {\n    remap[ind] = to.size();\n    \n    Row now = old.get(ind);\n    to.add(now);\n    Iterator<Cell> i = now.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0 && remap[c.ref] < 0) {\n        removeGaps(c.ref, old, to, remap);\n      }\n    }\n    to.set(remap[ind], new Remap(now, remap));\n    return to;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}