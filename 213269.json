{"path":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","commits":[{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setMaxBufferedDocs(4);\n    modifier.setMaxBufferedDeleteTerms(4);\n\n    int id = 0;\n    int value = 100;\n\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    assertEquals(2, modifier.getNumBufferedDeleteTerms());\n    assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n    addDoc(modifier, ++id, value);\n    assertEquals(0, modifier.getSegmentCount());\n    modifier.flush();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(1, reader.numDocs());\n\n    int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n    assertEquals(1, hitCount);\n    reader.close();\n\n    modifier.close();\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    Directory dir = new RAMDirectory();\n    NewIndexModifier modifier = new NewIndexModifier(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setMaxBufferedDocs(4);\n    modifier.setMaxBufferedDeleteTerms(4);\n\n    int id = 0;\n    int value = 100;\n\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    assertEquals(2, modifier.getNumBufferedDeleteTerms());\n    assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n    addDoc(modifier, ++id, value);\n    assertEquals(0, modifier.getSegmentCount());\n    modifier.flush();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(1, reader.numDocs());\n\n    int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n    assertEquals(1, hitCount);\n    reader.close();\n\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n      assertEquals(2, modifier.getNumBufferedDeleteTerms());\n      assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setMaxBufferedDocs(4);\n    modifier.setMaxBufferedDeleteTerms(4);\n\n    int id = 0;\n    int value = 100;\n\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    assertEquals(2, modifier.getNumBufferedDeleteTerms());\n    assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n    addDoc(modifier, ++id, value);\n    assertEquals(0, modifier.getSegmentCount());\n    modifier.flush();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(1, reader.numDocs());\n\n    int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n    assertEquals(1, hitCount);\n    reader.close();\n\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n      assertEquals(2, modifier.getNumBufferedDeleteTerms());\n      assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n      assertEquals(2, modifier.getNumBufferedDeleteTerms());\n      assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n      assertEquals(2, modifier.getNumBufferedDeleteTerms());\n      assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n      assertEquals(2, modifier.getNumBufferedDeleteTerms());\n      assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      addDoc(modifier, ++id, value);\n      modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n      assertEquals(2, modifier.getNumBufferedDeleteTerms());\n      assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir, true);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir, true);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n      for(int t=0;t<2;t++) {\n        boolean autoCommit = (0==pass);\n        Directory dir = new MockRAMDirectory();\n        IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                               new WhitespaceAnalyzer(), true);\n        modifier.setMaxBufferedDocs(4);\n        modifier.setMaxBufferedDeleteTerms(4);\n\n        int id = 0;\n        int value = 100;\n\n        addDoc(modifier, ++id, value);\n        if (0 == t)\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n        addDoc(modifier, ++id, value);\n        if (0 == t) {\n          modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n          assertEquals(2, modifier.getNumBufferedDeleteTerms());\n          assertEquals(1, modifier.getBufferedDeleteTermsSize());\n        }\n        else\n          modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n        addDoc(modifier, ++id, value);\n        assertEquals(0, modifier.getSegmentCount());\n        modifier.flush();\n\n        modifier.commit();\n\n        IndexReader reader = IndexReader.open(dir, true);\n        assertEquals(1, reader.numDocs());\n\n        int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n        assertEquals(1, hitCount);\n        reader.close();\n        modifier.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.flush();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ae99f08f69aa3acba7cd75134e8447eb747559","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e82780afe6097066eb5befb86e9432f077667e3d"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["8b6187898fc4413ccd18229711786550a280383c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"8b6187898fc4413ccd18229711786550a280383c":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["8b6187898fc4413ccd18229711786550a280383c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"e82780afe6097066eb5befb86e9432f077667e3d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"8b6187898fc4413ccd18229711786550a280383c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}