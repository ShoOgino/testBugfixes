{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static final SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(oneOrMany(args, \"fieldName\"));\n    params.typeName = new HashSet<String>(oneOrMany(args, \"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = oneOrMany(args, \"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SERVER_ERROR, \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = oneOrMany(args, \"typeClass\");\n\n    return params;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb12132f7aef3ad5be4b300f3cea59aa03b6820","date":1339628268,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(oneOrMany(args, \"fieldName\"));\n    params.typeName = new HashSet<String>(oneOrMany(args, \"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = oneOrMany(args, \"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SERVER_ERROR, \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = oneOrMany(args, \"typeClass\");\n\n    return params;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static final SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(oneOrMany(args, \"fieldName\"));\n    params.typeName = new HashSet<String>(oneOrMany(args, \"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = oneOrMany(args, \"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SERVER_ERROR, \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = oneOrMany(args, \"typeClass\");\n\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0a19f093878b8ef6d65992a55f7a565549f30ee","date":1370735567,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","sourceNew":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(oneOrMany(args, \"fieldName\"));\n    params.typeName = new HashSet<String>(oneOrMany(args, \"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = oneOrMany(args, \"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SERVER_ERROR, \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = oneOrMany(args, \"typeClass\");\n\n    // getBooleanArg() returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = getBooleanArg(args, \"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(oneOrMany(args, \"fieldName\"));\n    params.typeName = new HashSet<String>(oneOrMany(args, \"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = oneOrMany(args, \"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SERVER_ERROR, \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = oneOrMany(args, \"typeClass\");\n\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","sourceNew":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<String>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // getBooleanArg() returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = getBooleanArg(args, \"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","sourceOld":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(oneOrMany(args, \"fieldName\"));\n    params.typeName = new HashSet<String>(oneOrMany(args, \"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = oneOrMany(args, \"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SERVER_ERROR, \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = oneOrMany(args, \"typeClass\");\n\n    // getBooleanArg() returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = getBooleanArg(args, \"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daeabea0f98580c53abe9b70ec5b71caa9dd32","date":1380827550,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","sourceNew":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<String>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // Returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = args.removeBooleanArg(\"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","sourceOld":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<String>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // getBooleanArg() returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = getBooleanArg(args, \"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","sourceNew":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // Returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = args.removeBooleanArg(\"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","sourceOld":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<String>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<String>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<Pattern>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // Returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = args.removeBooleanArg(\"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorParams(NamedList).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static SelectorParams parseSelectorParams(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // Returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = args.removeBooleanArg(\"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","sourceOld":"  public static SelectorParams parseSelectorParams(NamedList args) {\n    SelectorParams params = new SelectorParams();\n    \n    params.fieldName = new HashSet<>(args.removeConfigArgs(\"fieldName\"));\n    params.typeName = new HashSet<>(args.removeConfigArgs(\"typeName\"));\n\n    // we can compile the patterns now\n    Collection<String> patterns = args.removeConfigArgs(\"fieldRegex\");\n    if (! patterns.isEmpty()) {\n      params.fieldRegex = new ArrayList<>(patterns.size());\n      for (String s : patterns) {\n        try {\n          params.fieldRegex.add(Pattern.compile(s));\n        } catch (PatternSyntaxException e) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid 'fieldRegex' pattern: \" + s, e);\n        }\n      }\n    }\n    \n    // resolve this into actual Class objects later\n    params.typeClass = args.removeConfigArgs(\"typeClass\");\n\n    // Returns null if the arg is not specified\n    params.fieldNameMatchesSchemaField = args.removeBooleanArg(\"fieldNameMatchesSchemaField\");\n    \n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8daeabea0f98580c53abe9b70ec5b71caa9dd32":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d8daeabea0f98580c53abe9b70ec5b71caa9dd32"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["b0a19f093878b8ef6d65992a55f7a565549f30ee"]},"commit2Childs":{"d8daeabea0f98580c53abe9b70ec5b71caa9dd32":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["d8daeabea0f98580c53abe9b70ec5b71caa9dd32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}