{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","commits":[{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId));\n    NamedList rsp = solr.request(qr);\n    String match = \n        JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match, match == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd90adb2be0ad7d69e4f6e26f0fab7675176721","date":1409252598,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match =\n        JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId));\n    NamedList rsp = solr.request(qr);\n    String match = \n        JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e36353d7461af8d2329a78a71457cf8e3c1e88f","date":1411572107,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match =\n        JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocExists(HttpSolrServer,String,String).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected void assertDocExists(HttpSolrServer solr, String coll, String docId) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\"));\n    NamedList rsp = solr.request(qr);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cd90adb2be0ad7d69e4f6e26f0fab7675176721":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["0cd90adb2be0ad7d69e4f6e26f0fab7675176721"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"0cd90adb2be0ad7d69e4f6e26f0fab7675176721":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["0cd90adb2be0ad7d69e4f6e26f0fab7675176721"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}