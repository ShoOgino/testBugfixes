{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList[Object],Throwable,String,SolrResponse,String,Set[String]).mjava","commits":[{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList[Object],Throwable,String,SolrResponse,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList,Throwable,String,SolrResponse,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void processResponse(NamedList<Object> results, Throwable e, String nodeName, SolrResponse solrResponse, String shard, Set<String> okayExceptions) {\n    String rootThrowable = null;\n    if (e instanceof RemoteSolrException) {\n      rootThrowable = ((RemoteSolrException) e).getRootThrowable();\n    }\n\n    if (e != null && (rootThrowable == null || !okayExceptions.contains(rootThrowable))) {\n      log.error(\"Error from shard: \" + shard, e);\n      addFailure(results, nodeName, e.getClass().getName() + \":\" + e.getMessage());\n    } else {\n      addSuccess(results, nodeName, solrResponse.getResponse());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void processResponse(NamedList results, Throwable e, String nodeName, SolrResponse solrResponse, String shard, Set<String> okayExceptions) {\n    String rootThrowable = null;\n    if (e instanceof RemoteSolrException) {\n      rootThrowable = ((RemoteSolrException) e).getRootThrowable();\n    }\n\n    if (e != null && (rootThrowable == null || !okayExceptions.contains(rootThrowable))) {\n      log.error(\"Error from shard: \" + shard, e);\n      addFailure(results, nodeName, e.getClass().getName() + \":\" + e.getMessage());\n    } else {\n      addSuccess(results, nodeName, solrResponse.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList[Object],Throwable,String,SolrResponse,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList[Object],Throwable,String,SolrResponse,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void processResponse(NamedList<Object> results, Throwable e, String nodeName, SolrResponse solrResponse, String shard, Set<String> okayExceptions) {\n    String rootThrowable = null;\n    if (e instanceof BaseHttpSolrClient.RemoteSolrException) {\n      rootThrowable = ((BaseHttpSolrClient.RemoteSolrException) e).getRootThrowable();\n    }\n\n    if (e != null && (rootThrowable == null || !okayExceptions.contains(rootThrowable))) {\n      log.error(\"Error from shard: \" + shard, e);\n      addFailure(results, nodeName, e.getClass().getName() + \":\" + e.getMessage());\n    } else {\n      addSuccess(results, nodeName, solrResponse.getResponse());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private void processResponse(NamedList<Object> results, Throwable e, String nodeName, SolrResponse solrResponse, String shard, Set<String> okayExceptions) {\n    String rootThrowable = null;\n    if (e instanceof RemoteSolrException) {\n      rootThrowable = ((RemoteSolrException) e).getRootThrowable();\n    }\n\n    if (e != null && (rootThrowable == null || !okayExceptions.contains(rootThrowable))) {\n      log.error(\"Error from shard: \" + shard, e);\n      addFailure(results, nodeName, e.getClass().getName() + \":\" + e.getMessage());\n    } else {\n      addSuccess(results, nodeName, solrResponse.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList[Object],Throwable,String,SolrResponse,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponse(NamedList[Object],Throwable,String,SolrResponse,String,Set[String]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void processResponse(NamedList<Object> results, Throwable e, String nodeName, SolrResponse solrResponse, String shard, Set<String> okayExceptions) {\n    String rootThrowable = null;\n    if (e instanceof BaseHttpSolrClient.RemoteSolrException) {\n      rootThrowable = ((BaseHttpSolrClient.RemoteSolrException) e).getRootThrowable();\n    }\n\n    if (e != null && (rootThrowable == null || !okayExceptions.contains(rootThrowable))) {\n      log.error(\"Error from shard: {}\", shard, e);\n      addFailure(results, nodeName, e.getClass().getName() + \":\" + e.getMessage());\n    } else {\n      addSuccess(results, nodeName, solrResponse.getResponse());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private void processResponse(NamedList<Object> results, Throwable e, String nodeName, SolrResponse solrResponse, String shard, Set<String> okayExceptions) {\n    String rootThrowable = null;\n    if (e instanceof BaseHttpSolrClient.RemoteSolrException) {\n      rootThrowable = ((BaseHttpSolrClient.RemoteSolrException) e).getRootThrowable();\n    }\n\n    if (e != null && (rootThrowable == null || !okayExceptions.contains(rootThrowable))) {\n      log.error(\"Error from shard: \" + shard, e);\n      addFailure(results, nodeName, e.getClass().getName() + \":\" + e.getMessage());\n    } else {\n      addSuccess(results, nodeName, solrResponse.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4abf821a41a2fdca2a1dea148999931d22e20529":["db96734b79e26d948b59f68bd4564c4836a71acf"],"69e6520a21709190413a63084ed135271aab1a7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["69e6520a21709190413a63084ed135271aab1a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4abf821a41a2fdca2a1dea148999931d22e20529"]},"commit2Childs":{"4abf821a41a2fdca2a1dea148999931d22e20529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69e6520a21709190413a63084ed135271aab1a7c":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69e6520a21709190413a63084ed135271aab1a7c"],"db96734b79e26d948b59f68bd4564c4836a71acf":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}