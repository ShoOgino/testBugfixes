{"path":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.termBuffer();\n      int termLength = termAttribute.termLength();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.termBuffer();\n      int termLength = termAttribute.termLength();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.termBuffer();\n      int termLength = termAttribute.termLength();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.termBuffer();\n      int termLength = termAttribute.termLength();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"384e84fe86b09273dea9bb358ff47fc7781f3f17","date":1272992848,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"384e84fe86b09273dea9bb358ff47fc7781f3f17":["d085fb336a7208eea2214e5ffcc803960819b60b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["384e84fe86b09273dea9bb358ff47fc7781f3f17"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d085fb336a7208eea2214e5ffcc803960819b60b"],"384e84fe86b09273dea9bb358ff47fc7781f3f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["384e84fe86b09273dea9bb358ff47fc7781f3f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}