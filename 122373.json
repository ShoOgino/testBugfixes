{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["71e1a70f18d64b93db3ef618e606d6df5062f747"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.shutdown();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.shutdown();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.shutdown();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.shutdown();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71e1a70f18d64b93db3ef618e606d6df5062f747","date":1466156390,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setLiveCommitData(data.entrySet());\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setLiveCommitData(data.entrySet());\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["b47e1512544568a22b82c96169d466fae8a4b79e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setLiveCommitData(data.entrySet());\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setLiveCommitData(data.entrySet());\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setIndexDeletionPolicy(new KeepAllCommits())\n            .setMaxBufferedDocs(-1)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", i+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.setCommitData(data);\n      writer.commit();\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b47e1512544568a22b82c96169d466fae8a4b79e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"71e1a70f18d64b93db3ef618e606d6df5062f747":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["04f07771a2a7dd3a395700665ed839c3dae2def2","b47e1512544568a22b82c96169d466fae8a4b79e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","71e1a70f18d64b93db3ef618e606d6df5062f747"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b47e1512544568a22b82c96169d466fae8a4b79e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71e1a70f18d64b93db3ef618e606d6df5062f747"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"71e1a70f18d64b93db3ef618e606d6df5062f747":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["407687e67faf6e1f02a211ca078d8e3eed631027","b47e1512544568a22b82c96169d466fae8a4b79e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["71e1a70f18d64b93db3ef618e606d6df5062f747","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b47e1512544568a22b82c96169d466fae8a4b79e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}