{"path":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <b>Note:</b> The re-opened reader instance and the old instance might share\n   * the same resources. For this reason no index modification operations \n   * (e. g. {@link #deleteDocument(int)}, {@link #setNorm(int, String, byte)}) \n   * should be performed using one of the readers until the old reader instance\n   * is closed. <b>Otherwise, the behavior of the readers is undefined.</b> \n   * <p>   \n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader new = r.reopen();\n   * if (new != reader) {\n   *   ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = new;\n   * ...\n   * </pre>\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","sourceNew":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader new = r.reopen();\n   * if (new != reader) {\n   *   ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = new;\n   * ...\n   * </pre>\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","sourceOld":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <b>Note:</b> The re-opened reader instance and the old instance might share\n   * the same resources. For this reason no index modification operations \n   * (e. g. {@link #deleteDocument(int)}, {@link #setNorm(int, String, byte)}) \n   * should be performed using one of the readers until the old reader instance\n   * is closed. <b>Otherwise, the behavior of the readers is undefined.</b> \n   * <p>   \n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader new = r.reopen();\n   * if (new != reader) {\n   *   ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = new;\n   * ...\n   * </pre>\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34c1144faef0f156d12cf8121613d3e40da42ed","date":1234350887,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","sourceNew":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","sourceOld":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader new = r.reopen();\n   * if (new != reader) {\n   *   ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = new;\n   * ...\n   * </pre>\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","sourceNew":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   *\n   * <p><b>NOTE</b>: If this reader is a near real-time\n   * reader (obtained from {@link IndexWriter#getReader()},\n   * reopen() will simply call writer.getReader() again for\n   * you, though this may change in the future.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","sourceOld":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","sourceNew":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   *\n   * <p><b>NOTE</b>: If this reader is a near real-time\n   * reader (obtained from {@link IndexWriter#getReader()},\n   * reopen() will simply call writer.getReader() again for\n   * you, though this may change in the future.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","sourceOld":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   *\n   * <p><b>NOTE</b>: If this reader is a near real-time\n   * reader (obtained from {@link IndexWriter#getReader()},\n   * reopen() will simply call writer.getReader() again for\n   * you, though this may change in the future.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"f34c1144faef0f156d12cf8121613d3e40da42ed":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["f34c1144faef0f156d12cf8121613d3e40da42ed"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c4ff8864209d2e972cb4393600c26082f9a6533d"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["f34c1144faef0f156d12cf8121613d3e40da42ed"],"f34c1144faef0f156d12cf8121613d3e40da42ed":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}