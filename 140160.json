{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","commits":[{"id":"0ceb5bb30e401cb218b31197b1a9aa47e77cda17","date":1336330521,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() throws Exception {\n    assertHits(new FunctionQuery(new QueryValueSource(\n        new FunctionQuery(new ConstValueSource(2f)), 0f)),\n        new float[] { 2f, 2f });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    assertHits(new FunctionQuery(new QueryValueSource(\n        new FunctionQuery(new ConstValueSource(2f)), 0f)),\n        new float[] { 2f, 2f });\n  }\n\n","bugFix":null,"bugIntro":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    assertHits(new FunctionQuery(new QueryValueSource(\n        new FunctionQuery(new ConstValueSource(2f)), 0f)),\n        new float[] { 2f, 2f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new DefaultSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15945ff3f3391bc929e2e244bbb02a145b2641d9","date":1584508273,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n      // doc doesn't match the query, so default value should be returned\n      vs = new QueryValueSource(new MatchNoDocsQuery(), 5.0f);\n      final LeafReaderContext leaf = searcher.getIndexReader().leaves().get(0);\n      FunctionValues fv = vs.getValues(ValueSource.newContext(searcher), leaf);\n      assertEquals(5.0f, fv.objectVal(1));\n\n      // test with def value but doc matches the query, so def value shouldn't be returned\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 2F);\n      fv = vs.getValues(ValueSource.newContext(searcher), leaf);\n      assertNotEquals(2f, fv.objectVal(1));\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n\n    try {\n      searcher.setSimilarity(new ClassicSimilarity());\n      \n      ValueSource vs = new QueryValueSource(new TermQuery(new Term(\"string\",\"bar\")), 42F);\n      assertHits(new FunctionQuery(vs), new float[] { 42F, 1.4054651F });\n\n      // valuesource should exist only for things matching the term query\n      // sanity check via quick & dirty wrapper arround tf\n      ValueSource expected = new MultiFloatFunction(new ValueSource[] {\n          new TFValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))}) {\n\n        @Override\n        protected String name() { return \"tf_based_exists\"; }\n\n        @Override\n        protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n          return valsArr[0].floatVal(doc);\n        }\n        @Override\n        protected boolean exists(int doc, FunctionValues[] valsArr) throws IOException {\n          // if tf > 0, then it should exist\n          return 0 < func(doc, valsArr);\n        }\n      };\n\n      assertExists(expected, vs);\n\n\n      // Query matches all docs, func exists for all docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"text\",\"test\")), 0F);\n      assertAllExist(vs);\n\n      // Query matches no docs, func exists for no docs\n      vs = new QueryValueSource(new TermQuery(new Term(\"bogus\",\"does not exist\")), 0F);\n      assertNoneExist(vs);\n\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["485545da3b4429d6f138b4baac573a97820ee93b"],"485545da3b4429d6f138b4baac573a97820ee93b":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81d0720146de53dd3a4a023d2a3d1089d86d748d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"15945ff3f3391bc929e2e244bbb02a145b2641d9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15945ff3f3391bc929e2e244bbb02a145b2641d9"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["15945ff3f3391bc929e2e244bbb02a145b2641d9"],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["a701a7aab388afa1412a3dc23b4115c321f478c4","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"485545da3b4429d6f138b4baac573a97820ee93b":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["485545da3b4429d6f138b4baac573a97820ee93b","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"15945ff3f3391bc929e2e244bbb02a145b2641d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}