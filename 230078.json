{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a16b40feb4e6e0d55c1716733bde48296bedd20","date":1400540388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n        if (reader.eof()) {\n          if (ended) {\n            return NO_MORE_DOCS;\n          } else {\n            ended = true;\n            docID = postingsArray.lastDocIDs[termID];\n            if (readTermFreq) {\n              freq = postingsArray.termFreqs[termID];\n            }\n          }\n        } else {\n          int code = reader.readVInt();\n          if (!readTermFreq) {\n            docID += code;\n          } else {\n            docID += code >>> 1;\n            if ((code & 1) != 0) {\n              freq = 1;\n            } else {\n              freq = reader.readVInt();\n            }\n          }\n\n          assert docID != postingsArray.lastDocIDs[termID];\n        }\n\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          continue;\n        }\n\n        return docID;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a0b58a171748f1022e63a0483908e6f50b0abf","date":1400686165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n        if (reader.eof()) {\n          if (ended) {\n            return NO_MORE_DOCS;\n          } else {\n            ended = true;\n            docID = postingsArray.lastDocIDs[termID];\n            if (readTermFreq) {\n              freq = postingsArray.termFreqs[termID];\n            }\n          }\n        } else {\n          int code = reader.readVInt();\n          if (!readTermFreq) {\n            docID += code;\n          } else {\n            docID += code >>> 1;\n            if ((code & 1) != 0) {\n              freq = 1;\n            } else {\n              freq = reader.readVInt();\n            }\n          }\n\n          assert docID != postingsArray.lastDocIDs[termID];\n        }\n\n        return docID;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n        if (reader.eof()) {\n          if (ended) {\n            return NO_MORE_DOCS;\n          } else {\n            ended = true;\n            docID = postingsArray.lastDocIDs[termID];\n            if (readTermFreq) {\n              freq = postingsArray.termFreqs[termID];\n            }\n          }\n        } else {\n          int code = reader.readVInt();\n          if (!readTermFreq) {\n            docID += code;\n          } else {\n            docID += code >>> 1;\n            if ((code & 1) != 0) {\n              freq = 1;\n            } else {\n              freq = reader.readVInt();\n            }\n          }\n\n          assert docID != postingsArray.lastDocIDs[termID];\n        }\n\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          continue;\n        }\n\n        return docID;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a621dd071a902e1fd30367200d7bbbea037706","date":1400686915,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n        if (reader.eof()) {\n          if (ended) {\n            return NO_MORE_DOCS;\n          } else {\n            ended = true;\n            docID = postingsArray.lastDocIDs[termID];\n            if (readTermFreq) {\n              freq = postingsArray.termFreqs[termID];\n            }\n          }\n        } else {\n          int code = reader.readVInt();\n          if (!readTermFreq) {\n            docID += code;\n          } else {\n            docID += code >>> 1;\n            if ((code & 1) != 0) {\n              freq = 1;\n            } else {\n              freq = reader.readVInt();\n            }\n          }\n\n          assert docID != postingsArray.lastDocIDs[termID];\n        }\n\n        return docID;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == -1) {\n        docID = 0;\n      }\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docID == -1) {\n        docID = 0;\n      }\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (reader.eof()) {\n        if (ended) {\n          return NO_MORE_DOCS;\n        } else {\n          ended = true;\n          docID = postingsArray.lastDocIDs[termID];\n          if (readTermFreq) {\n            freq = postingsArray.termFreqs[termID];\n          }\n        }\n      } else {\n        int code = reader.readVInt();\n        if (!readTermFreq) {\n          docID += code;\n        } else {\n          docID += code >>> 1;\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = reader.readVInt();\n          }\n        }\n\n        assert docID != postingsArray.lastDocIDs[termID];\n      }\n\n      return docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"45a621dd071a902e1fd30367200d7bbbea037706":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","3e8715d826e588419327562287d5d6a8040d63d6"],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["0a16b40feb4e6e0d55c1716733bde48296bedd20"],"3e8715d826e588419327562287d5d6a8040d63d6":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"45a621dd071a902e1fd30367200d7bbbea037706":[],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["0a16b40feb4e6e0d55c1716733bde48296bedd20","d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["45a621dd071a902e1fd30367200d7bbbea037706"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["45a621dd071a902e1fd30367200d7bbbea037706","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}