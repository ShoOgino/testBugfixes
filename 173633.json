{"path":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","commits":[{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        request = wrapWithPrincipal(request, principal);\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        }\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        }\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        }\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        }\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        request = wrapWithPrincipal(request, principal);\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        request = wrapWithPrincipal(request, principal);\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        }\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        }\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}