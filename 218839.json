{"path":"lucene/src/java/org/apache/lucene/search/SimilarityProvider#coord(int,int).mjava","commits":[{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SimilarityProvider#coord(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#coord(int,int).mjava","sourceNew":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SimilarityProvider#coord(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#coord(int,int).mjava","sourceNew":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SimilarityProvider#coord(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#coord(int,int).mjava","sourceNew":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityProvider#coord(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SimilarityProvider#coord(int,int).mjava","sourceNew":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"]},"commit2Childs":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["29ef99d61cda9641b6250bf9567329a6e65f901d","60e3b31201fd9bb5d73884faa5a38c63ea9239f2","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}