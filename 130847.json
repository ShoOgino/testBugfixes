{"path":"sandbox/contributions/parsers/pdf/PdfTextExtractor#getContent(Pdf,int).mjava","commits":[{"id":"c3700445a056e0fea104882b72e222550d465d81","date":1024277396,"type":0,"author":"Kelvin Tan","isMerge":false,"pathNew":"sandbox/contributions/parsers/pdf/PdfTextExtractor#getContent(Pdf,int).mjava","pathOld":"/dev/null","sourceNew":"    private static String getContent(Pdf pdf, int pageNo)\n    {\n        String content = null;\n        PjStream stream = null;\n        StringBuffer strbf = new StringBuffer();\n        try\n        {\n            PjPage page = (PjPage) pdf.getObject(pdf.getPage(pageNo));\n            PjObject pobj = (PjObject) pdf.resolve(page.getContents());\n            if (pobj instanceof PjArray)\n            {\n                PjArray array = (PjArray) pobj;\n                Vector vArray = array.getVector();\n                int size = vArray.size();\n                for (int j = 0; j < size; j++)\n                {\n                    stream = (PjStream) pdf.resolve((PjObject) vArray.get(j));\n                    strbf.append(getStringFromPjStream(stream));\n                }\n                content = strbf.toString();\n            }\n            else\n            {\n                stream = (PjStream) pobj;\n                content = getStringFromPjStream(stream);\n            }\n        }\n        catch (InvalidPdfObjectException pdfe)\n        {\n            cat.error(\"Invalid PDF Object:\" + pdfe, pdfe);\n        }\n        catch (Exception e)\n        {\n            cat.error(\"Exception in getContent() \" + e, e);\n        }\n        return content;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cddd6a5f0a3875d0bf4faee87d05849f9f95c3a","date":1073447632,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/parsers/src/java/org/apache/lucene/parsers/pdf/PdfTextExtractor#getContent(Pdf,int).mjava","pathOld":"sandbox/contributions/parsers/pdf/PdfTextExtractor#getContent(Pdf,int).mjava","sourceNew":"    private static String getContent(Pdf pdf, int pageNo)\n    {\n        String content = null;\n        PjStream stream = null;\n        StringBuffer strbf = new StringBuffer();\n        try\n        {\n            PjPage page = (PjPage) pdf.getObject(pdf.getPage(pageNo));\n            PjObject pobj = (PjObject) pdf.resolve(page.getContents());\n            if (pobj instanceof PjArray)\n            {\n                PjArray array = (PjArray) pobj;\n                Vector vArray = array.getVector();\n                int size = vArray.size();\n                for (int j = 0; j < size; j++)\n                {\n                    stream = (PjStream) pdf.resolve((PjObject) vArray.get(j));\n                    strbf.append(getStringFromPjStream(stream));\n                }\n                content = strbf.toString();\n            }\n            else\n            {\n                stream = (PjStream) pobj;\n                content = getStringFromPjStream(stream);\n            }\n        }\n        catch (InvalidPdfObjectException pdfe)\n        {\n            cat.error(\"Invalid PDF Object:\" + pdfe, pdfe);\n        }\n        catch (Exception e)\n        {\n            cat.error(\"Exception in getContent() \" + e, e);\n        }\n        return content;\n    }\n\n","sourceOld":"    private static String getContent(Pdf pdf, int pageNo)\n    {\n        String content = null;\n        PjStream stream = null;\n        StringBuffer strbf = new StringBuffer();\n        try\n        {\n            PjPage page = (PjPage) pdf.getObject(pdf.getPage(pageNo));\n            PjObject pobj = (PjObject) pdf.resolve(page.getContents());\n            if (pobj instanceof PjArray)\n            {\n                PjArray array = (PjArray) pobj;\n                Vector vArray = array.getVector();\n                int size = vArray.size();\n                for (int j = 0; j < size; j++)\n                {\n                    stream = (PjStream) pdf.resolve((PjObject) vArray.get(j));\n                    strbf.append(getStringFromPjStream(stream));\n                }\n                content = strbf.toString();\n            }\n            else\n            {\n                stream = (PjStream) pobj;\n                content = getStringFromPjStream(stream);\n            }\n        }\n        catch (InvalidPdfObjectException pdfe)\n        {\n            cat.error(\"Invalid PDF Object:\" + pdfe, pdfe);\n        }\n        catch (Exception e)\n        {\n            cat.error(\"Exception in getContent() \" + e, e);\n        }\n        return content;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cddd6a5f0a3875d0bf4faee87d05849f9f95c3a":["c3700445a056e0fea104882b72e222550d465d81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3700445a056e0fea104882b72e222550d465d81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cddd6a5f0a3875d0bf4faee87d05849f9f95c3a"]},"commit2Childs":{"0cddd6a5f0a3875d0bf4faee87d05849f9f95c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3700445a056e0fea104882b72e222550d465d81"],"c3700445a056e0fea104882b72e222550d465d81":["0cddd6a5f0a3875d0bf4faee87d05849f9f95c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}