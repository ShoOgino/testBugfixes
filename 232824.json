{"path":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the query must see the NumericTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(new NumericRangeTreeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74","date":1438421983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","sourceNew":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the query must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(new NumericRangeTreeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the query must see the NumericTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(new NumericRangeTreeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","sourceNew":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the query must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(new NumericRangeTreeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the query must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(new NumericRangeTreeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testNumericNoValuesMatch().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testNumericNoValuesMatch().mjava","sourceNew":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(0, s.count(new DimensionalRangeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testNumericNoValuesMatch() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 17));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"value\", 22));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the query must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(new NumericRangeTreeQuery(\"value\", 17L, true, 13L, false)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}