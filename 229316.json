{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testCompares().mjava","commits":[{"id":"cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f","date":1469760343,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testCompares().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompares() throws Exception {\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i, 2)\");\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i,2)\");\n    assertFuncEquals(\"lt(foo_i,2)\", \"lt(foo_i,2)\");\n    assertFuncEquals(\"lte(foo_i,2)\", \"lte(foo_i,2)\");\n    assertFuncEquals(\"gte(foo_i,2)\", \"gte(foo_i,2)\");\n    assertFuncEquals(\"eq(foo_i,2)\", \"eq(foo_i,2)\");\n\n    boolean equals = false;\n    try {\n      assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\");\n      equals = true;\n    } catch (AssertionError e) {\n      //expected\n    }\n    assertFalse(equals);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testCompares().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompares() throws Exception {\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i, 2)\");\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i,2)\");\n    assertFuncEquals(\"lt(foo_i,2)\", \"lt(foo_i,2)\");\n    assertFuncEquals(\"lte(foo_i,2)\", \"lte(foo_i,2)\");\n    assertFuncEquals(\"gte(foo_i,2)\", \"gte(foo_i,2)\");\n    assertFuncEquals(\"eq(foo_i,2)\", \"eq(foo_i,2)\");\n\n    boolean equals = false;\n    try {\n      assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\");\n      equals = true;\n    } catch (AssertionError e) {\n      //expected\n    }\n    assertFalse(equals);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testCompares().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompares() throws Exception {\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i, 2)\");\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i,2)\");\n    assertFuncEquals(\"lt(foo_i,2)\", \"lt(foo_i,2)\");\n    assertFuncEquals(\"lte(foo_i,2)\", \"lte(foo_i,2)\");\n    assertFuncEquals(\"gte(foo_i,2)\", \"gte(foo_i,2)\");\n    assertFuncEquals(\"eq(foo_i,2)\", \"eq(foo_i,2)\");\n\n    boolean equals = false;\n    try {\n      assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\");\n      equals = true;\n    } catch (AssertionError e) {\n      //expected\n    }\n    assertFalse(equals);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testCompares().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testCompares().mjava","sourceNew":"  public void testCompares() throws Exception {\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i, 2)\");\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i,2)\");\n    assertFuncEquals(\"lt(foo_i,2)\", \"lt(foo_i,2)\");\n    assertFuncEquals(\"lte(foo_i,2)\", \"lte(foo_i,2)\");\n    assertFuncEquals(\"gte(foo_i,2)\", \"gte(foo_i,2)\");\n    assertFuncEquals(\"eq(foo_i,2)\", \"eq(foo_i,2)\");\n\n    expectThrows(AssertionError.class, \"expected error, functions are not equal\",\n        () -> assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\"));\n  }\n\n","sourceOld":"  public void testCompares() throws Exception {\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i, 2)\");\n    assertFuncEquals(\"gt(foo_i,2)\", \"gt(foo_i,2)\");\n    assertFuncEquals(\"lt(foo_i,2)\", \"lt(foo_i,2)\");\n    assertFuncEquals(\"lte(foo_i,2)\", \"lte(foo_i,2)\");\n    assertFuncEquals(\"gte(foo_i,2)\", \"gte(foo_i,2)\");\n    assertFuncEquals(\"eq(foo_i,2)\", \"eq(foo_i,2)\");\n\n    boolean equals = false;\n    try {\n      assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\");\n      equals = true;\n    } catch (AssertionError e) {\n      //expected\n    }\n    assertFalse(equals);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464e7336798bc8a1281d5cf610c649c5a0784e83":["cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["464e7336798bc8a1281d5cf610c649c5a0784e83"]},"commit2Childs":{"cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f":["464e7336798bc8a1281d5cf610c649c5a0784e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}