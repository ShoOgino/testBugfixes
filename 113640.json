{"path":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","commits":[{"id":"1dccd7bcb5aed74b05d5884f4579a968cb3325fe","date":1434356398,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      BooleanQuery booleanQuery = new BooleanQuery(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery, collector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    }\n    // must get exception\n    assertNotNull(\"Timeout expected!\", timoutException);\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","sourceNew":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery.build(), collector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    }\n    // must get exception\n    assertNotNull(\"Timeout expected!\", timoutException);\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","sourceOld":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      BooleanQuery booleanQuery = new BooleanQuery(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery, collector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    }\n    // must get exception\n    assertNotNull(\"Timeout expected!\", timoutException);\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"550cf6504b217adb129a3ce192d5b5a1caa6fd88","date":1434721222,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","sourceNew":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search\n    TimeExceededException timeoutException = null;\n    try {\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery.build(), collector);\n    } catch (TimeExceededException x) {\n      timeoutException = x;\n    }\n    // must get exception\n    assertNotNull(\"Timeout expected!\", timeoutException);\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","sourceOld":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery.build(), collector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    }\n    // must get exception\n    assertNotNull(\"Timeout expected!\", timoutException);\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testNoHits().mjava","sourceNew":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search: must get exception\n    expectThrows(TimeExceededException.class, () -> {\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery.build(), collector);\n    });\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","sourceOld":"  public void testNoHits() throws IOException {\n    MyHitCollector myHc = new MyHitCollector();\n    Collector collector = createTimedCollector(myHc, -1, random().nextBoolean());\n    // search\n    TimeExceededException timeoutException = null;\n    try {\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder(); // won't match - we only test if we check timeout when collectors are pulled\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"one\")), BooleanClause.Occur.MUST);\n      booleanQuery.add(new TermQuery(new Term(FIELD_NAME, \"blueberry\")), BooleanClause.Occur.MUST);\n      searcher.search(booleanQuery.build(), collector);\n    } catch (TimeExceededException x) {\n      timeoutException = x;\n    }\n    // must get exception\n    assertNotNull(\"Timeout expected!\", timeoutException);\n    assertEquals(-1, myHc.getLastDocCollected());\n  }\n\n","bugFix":["1dccd7bcb5aed74b05d5884f4579a968cb3325fe","550cf6504b217adb129a3ce192d5b5a1caa6fd88"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1dccd7bcb5aed74b05d5884f4579a968cb3325fe"],"550cf6504b217adb129a3ce192d5b5a1caa6fd88":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["550cf6504b217adb129a3ce192d5b5a1caa6fd88"],"1dccd7bcb5aed74b05d5884f4579a968cb3325fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["550cf6504b217adb129a3ce192d5b5a1caa6fd88"],"550cf6504b217adb129a3ce192d5b5a1caa6fd88":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1dccd7bcb5aed74b05d5884f4579a968cb3325fe"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1dccd7bcb5aed74b05d5884f4579a968cb3325fe":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}