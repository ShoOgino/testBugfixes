{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_43, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(Version.LUCENE_43, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_4_0, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_4_0, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_4_0, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(Version.LUCENE_4_0, in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["192e49c0445803405b0bc0eebc8b758485480c21"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}