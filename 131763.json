{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  @SuppressWarnings({\"unchecked\"})\n  public void testIterable() throws Exception {\n    \n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      @SuppressWarnings({\"rawtypes\"})\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      @SuppressWarnings({\"rawtypes\"})\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIterable() throws Exception {\n    \n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    byte[] arr;\n    try (JavaBinCodec jbc = new JavaBinCodec(null); ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n      jbc.marshal(r,baos);\n      arr = baos.toByteArray();\n    }\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream bais = new ByteArrayInputStream(arr)) {\n      NamedList result = (NamedList) jbc.unmarshal(bais);\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"28288370235ed02234a64753cdbf0c6ec096304a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["28288370235ed02234a64753cdbf0c6ec096304a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["28288370235ed02234a64753cdbf0c6ec096304a","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"28288370235ed02234a64753cdbf0c6ec096304a":["4cba13865da71de3b9b0937fcbc66d726089356d"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["9ba1b632c041956c93c41aa1143d16a567014891"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}