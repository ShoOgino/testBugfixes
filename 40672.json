{"path":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3c7501e15f71c01b69ba22749b192827fa2019b","date":1335285341,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieDateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateField#parseMathLenient(Date,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Invalid Date in Date Math String: '\" + val + '\\'', e);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Invalid Date String: '\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Invalid Date Math String: '\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMathLenient(Date now, String val, SolrQueryRequest req) {\n    String math = null;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDateLenient(val.substring(0,zz+1), req));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3c7501e15f71c01b69ba22749b192827fa2019b":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"b3c7501e15f71c01b69ba22749b192827fa2019b":["2106271e380c198349e0f6eac0395bb462913fab"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}