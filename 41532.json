{"path":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#reload(CloudDescriptor).mjava","commits":[{"id":"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","date":1493061731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#reload(CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void reload(CloudDescriptor reloadFrom) {\n    if (reloadFrom == null) return;\n\n    setShardId(StringUtils.isEmpty(reloadFrom.getShardId()) ? getShardId() : reloadFrom.getShardId());\n    setCollectionName(StringUtils.isEmpty(reloadFrom.getCollectionName()) ? getCollectionName() : reloadFrom.getCollectionName());\n    setRoles(StringUtils.isEmpty(reloadFrom.getRoles()) ? getRoles() : reloadFrom.getRoles());\n    if (reloadFrom.getNumShards() != null) {\n      setNumShards(reloadFrom.getNumShards());\n    }\n    setCoreNodeName(StringUtils.isEmpty(reloadFrom.getCoreNodeName()) ? getCoreNodeName() : reloadFrom.getCoreNodeName());\n    setLeader(reloadFrom.isLeader);\n    setHasRegistered(reloadFrom.hasRegistered);\n    setLastPublished(reloadFrom.getLastPublished());\n\n    for (Map.Entry<String, String> ent : reloadFrom.getParams().entrySet()) {\n      collectionParams.put(ent.getKey(), ent.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#reload(CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void reload(CloudDescriptor reloadFrom) {\n    if (reloadFrom == null) return;\n\n    setShardId(StringUtils.isEmpty(reloadFrom.getShardId()) ? getShardId() : reloadFrom.getShardId());\n    setCollectionName(StringUtils.isEmpty(reloadFrom.getCollectionName()) ? getCollectionName() : reloadFrom.getCollectionName());\n    setRoles(StringUtils.isEmpty(reloadFrom.getRoles()) ? getRoles() : reloadFrom.getRoles());\n    if (reloadFrom.getNumShards() != null) {\n      setNumShards(reloadFrom.getNumShards());\n    }\n    setCoreNodeName(StringUtils.isEmpty(reloadFrom.getCoreNodeName()) ? getCoreNodeName() : reloadFrom.getCoreNodeName());\n    setLeader(reloadFrom.isLeader);\n    setHasRegistered(reloadFrom.hasRegistered);\n    setLastPublished(reloadFrom.getLastPublished());\n\n    for (Map.Entry<String, String> ent : reloadFrom.getParams().entrySet()) {\n      collectionParams.put(ent.getKey(), ent.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}